[
  {
    "id": "alias:list",
    "summary": "List all aliases currently set on your local computer.",
    "description": "Aliases are global, which means that you can use all the listed aliases in any Salesforce DX project on your computer.",
    "strict": true,
    "pluginName": "@salesforce/plugin-settings",
    "pluginAlias": "@salesforce/plugin-settings",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List all the aliases you've set:\n<%= config.bin %> <%= command.id %>"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "alias:set",
    "summary": "Set one or more aliases on your local computer.",
    "description": "Aliases are user-defined short names that make it easier to use the CLI. For example, users often set an alias for a scratch org usernames because they're long and unintuitive.  Check the --help of a CLI command to determine where you can use an alias.\n\nYou can associate an alias with only one value at a time. If you set an alias multiple times, the alias points to the most recent value. Aliases are global; after you set an alias, you can use it in any Salesforce DX project on your computer.\n\nUse quotes to specify an alias value that contains spaces. You typically use an equal sign to set your alias, although you don't need it if you're setting a single alias in a command.",
    "strict": true,
    "pluginName": "@salesforce/plugin-settings",
    "pluginAlias": "@salesforce/plugin-settings",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Set an alias for a scratch org username:\n<%= config.bin %> <%= command.id %> my-scratch-org=test-sadbiytjsupn@example.com",
      "Set multiple aliases with a single command:\n<%= config.bin %> <%= command.id %> my-scratch-org=test-sadbiytjsupn@example.com my-other-scratch-org=test-ss0xut7txzxf@example.com",
      "Set an alias that contains spaces:\n<%= config.bin %> <%= command.id %> my-alias='alias with spaces'",
      "Set a single alias without using an equal sign:\n<%= config.bin %> <%= command.id %> my-scratch-org test-ss0xut7txzxf@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "alias:unset",
    "summary": "Unset one or more aliases that are currently set on your local computer.",
    "description": "Aliases are global, so when you unset one it's no longer available in any Salesforce DX project.",
    "strict": true,
    "pluginName": "@salesforce/plugin-settings",
    "pluginAlias": "@salesforce/plugin-settings",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Unset an alias:\n<%= config.bin %> <%= command.id %> my-alias",
      "Unset multiple aliases with a single command:\n<%= config.bin %> <%= command.id %> my-alias my-other-alias",
      "Unset all aliases:\n<%= config.bin %> <%= command.id %> --all [--no-prompt]"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "all": {
        "name": "all",
        "type": "boolean",
        "char": "a",
        "summary": "Unset all currently set aliases.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "Don't prompt the user for confirmation when unsetting all aliases.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "analytics:generate:template",
    "summary": "Generate a simple Analytics template.",
    "description": "The metadata files associated with the Analytics template must be contained in a parent directory called \"waveTemplates\" in your package directory. Either run this command from an existing directory of this name, or use the --output-dir flag to generate one or point to an existing one.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata files for a simple Analytics template file called myTemplate in the force-app/main/default/waveTemplates directory:\n<%= config.bin %> <%= command.id %> --name myTemplate --output-dir force-app/main/default/waveTemplates"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": [
          "outputdir"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the Analytics template.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "templatename"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "apex:generate:class",
    "summary": "Generate an Apex class.",
    "description": "Generates the Apex *.cls file and associated metadata file. These files must be contained in a parent directory called \"classes\" in your package directory. Either run this command from an existing directory of this name, or use the --output-dir flag to generate one or point to an existing one.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate two metadata files associated with the MyClass Apex class (MyClass.cls and MyClass.cls-meta.xml) in the current directory:\n<%= config.bin %> <%= command.id %> --name MyClass",
      "Similar to previous example, but generates the files in the \"force-app/main/default/classes\" directory:\n<%= config.bin %> <%= command.id %> --name MyClass --output-dir force-app/main/default/classes"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Apex class.",
        "description": "The name can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "classname"
        ]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "multiple": false,
        "options": [
          "ApexException",
          "ApexUnitTest",
          "DefaultApexClass",
          "InboundEmailService"
        ],
        "default": "DefaultApexClass",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": [
          "outputdir"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "apex:generate:trigger",
    "summary": "Generate an Apex trigger.",
    "description": "Generates the Apex trigger *.trigger file and associated metadata file. These files must be contained in a parent directory called \"triggers\" in your package directory. Either run this command from an existing directory of this name, or use the --output-dir flag to generate one or point to an existing one. \n\nIf you don't specify the --sobject flag, the .trigger file contains the generic placeholder SOBJECT; replace it with the Salesforce object you want to generate a trigger for. If you don't specify --event, \"before insert\" is used.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate two files associated with the MyTrigger Apex trigger (MyTrigger.trigger and MyTrigger.trigger-meta.xml) in the current directory:\n<%= config.bin %> <%= command.id %> --name MyTrigger",
      "Similar to the previous example, but generate the files in the \"force-app/main/default/triggers\" directory:\n<%= config.bin %> <%= command.id %> --name MyTrigger --output-dir force-app/main/default/triggers",
      "Generate files for a trigger that fires on the Account object before and after an insert:\n<%= config.bin %> <%= command.id %> --name MyTrigger --sobject Account --event \"before insert,after insert\""
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Apex trigger",
        "description": "The name can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "triggername"
        ]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "multiple": false,
        "options": [
          "ApexTrigger"
        ],
        "default": "ApexTrigger",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": [
          "outputdir"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "Salesforce object to generate a trigger on.",
        "multiple": false,
        "default": "SOBJECT",
        "deprecateAliases": true
      },
      "event": {
        "name": "event",
        "type": "option",
        "char": "e",
        "summary": "Events that fire the trigger.",
        "multiple": true,
        "options": [
          "before insert",
          "before update",
          "before delete",
          "after insert",
          "after update",
          "after delete",
          "after undelete"
        ],
        "default": [
          "before insert"
        ],
        "deprecateAliases": true,
        "aliases": [
          "triggerevents"
        ],
        "delimiter": ","
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "apex:get:log",
    "summary": "Fetch the specified log or given number of most recent logs from the org.",
    "description": "To get the IDs for your debug logs, run \"<%= config.bin %> apex log list\". Executing this command without flags returns the most recent log.",
    "strict": true,
    "pluginName": "@salesforce/plugin-apex",
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Fetch the log in your default org using an ID:\n<%= config.bin %> <%= command.id %> --log-id <log id>",
      "Fetch the log in the org with the specified username using an ID:\n<%= config.bin %> <%= command.id %> --log-id <log id> --target-org me@my.org",
      "Fetch the two most recent logs in your default org:\n<%= config.bin %> <%= command.id %> --number 2",
      "Similar to previous example, but save the two log files in the specified directory:\n<%= config.bin %> <%= command.id %> --output-dir /Users/sfdxUser/logs --number 2"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "log-id": {
        "name": "log-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the specific log to display.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "logid"
        ]
      },
      "number": {
        "name": "number",
        "type": "option",
        "char": "n",
        "summary": "Number of the most recent logs to display.",
        "multiple": false,
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the log files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "outputdir",
          "output-directory"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "apex:get:test",
    "summary": "Display test results for a specific asynchronous test run.",
    "description": "Provide a test run ID to display test results for an enqueued or completed asynchronous test run. The test run ID is displayed after running the \"<%= config.bin %> apex test run\" command.",
    "strict": true,
    "pluginName": "@salesforce/plugin-apex",
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display test results for your default org using a test run ID:\n<%= config.bin %> <%= command.id %> --test-run-id <test run id>",
      "Similar to previous example, but output the result in JUnit format:\n<%= config.bin %> <%= command.id %> --test-run-id <test run id> --result-format junit",
      "Also retrieve code coverage results and output in JSON format:\n<%= config.bin %> <%= command.id %> --test-run-id <test run id> --code-coverage --json",
      "Specify a directory in which to save the test results from the org with the specified username (rather than your default org):\n<%= config.bin %> <%= command.id %> --test-run-id <test run id> --code-coverage --output-dir <path to outputdir> --target-org me@myorg',"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "test-run-id": {
        "name": "test-run-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the test run.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "testrunid"
        ]
      },
      "code-coverage": {
        "name": "code-coverage",
        "type": "boolean",
        "char": "c",
        "summary": "Retrieve code coverage results.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "codecoverage"
        ]
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory in which to store test result files.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "outputdir",
          "output-directory"
        ]
      },
      "result-format": {
        "name": "result-format",
        "type": "option",
        "char": "r",
        "summary": "Format of the results.",
        "multiple": false,
        "options": [
          "human",
          "tap",
          "junit",
          "json"
        ],
        "default": "human",
        "deprecateAliases": true,
        "aliases": [
          "resultformat"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "apex:list:log",
    "summary": "Display a list of IDs and general information about debug logs.",
    "description": "Run this command in a project to list the IDs and general information for all debug logs in your default org.\n\nTo fetch a specific log from your org, obtain the ID from this command's output, then run the “<%= config.bin %> apex log get” command.",
    "strict": true,
    "pluginName": "@salesforce/plugin-apex",
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List the IDs and information about the debug logs in your default org:\n<%= config.bin %> <%= command.id %>",
      "Similar to previous example, but use the org with the specified username:\n<%= config.bin %> <%= command.id %> --target-org me@my.org"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "apex:run",
    "summary": "Execute anonymous Apex code entered on the command line or from a local file.",
    "description": "If you don’t run this command from within a Salesforce DX project, you must specify the —-target-org flag.\n\nTo execute your code interactively, run this command with no flags. At the prompt, enter all your Apex code; press CTRL-D when you're finished. Your code is then executed in a single execute anonymous request.\nFor more information, see \"Anonymous Blocks\" in the Apex Developer Guide.",
    "strict": true,
    "pluginName": "@salesforce/plugin-apex",
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Execute the Apex code that's in the ~/test.apex file in the org with the specified username:\n<%= config.bin %> <%= command.id %> --target-org testusername@salesforce.org --file ~/test.apex",
      "Similar to previous example, but execute the code in your default org:\n<%= config.bin %> <%= command.id %> --file ~/test.apex",
      "Run the command with no flags to start interactive mode; the code will execute in your default org when you exit. At the prompt, start type Apex code and press the Enter key after each line. Press CTRL+D when finished.\n<%= config.bin %> <%= command.id %>"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "summary": "Path to a local file that contains Apex code.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apexcodefile"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "apex:run:test",
    "summary": "Invoke Apex tests in an org.",
    "description": "Specify which tests to run by using the --class-names, --suite-names, or --tests flags. Alternatively, use the --test-level flag to run all the tests in your org, local tests, or specified tests.\n\nTo see code coverage results, use the --code-coverage flag with --result-format. The output displays a high-level summary of the test run and the code coverage values for classes in your org. If you specify human-readable result format, use the --detailed-coverage flag to see detailed coverage results for each test method run.\n\nApex tests run asynchronously by default. The command waits for 1 minute (default), or for the value of the --wait flag; if the tests have finished, the command displays the results. If the tests haven't finished by the end of the wait time, the command displays a test run ID; use the \"<%= config.bin %> apex get test --test-run-id\" command to get the results.\n\nNOTE: The testRunCoverage value (JSON and JUnit result formats) is a percentage of the covered lines and total lines from all the Apex classes evaluated by the tests in this run.",
    "strict": true,
    "pluginName": "@salesforce/plugin-apex",
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Run all Apex tests and suites in your default org:\n<%= config.bin %> <%= command.id %>",
      "Run the specified Apex test classes in your default org and display results in human-readable form:\n<%= config.bin %> <%= command.id %> --class-names \"MyClassTest,MyOtherClassTest\" --result-format human",
      "Run the specified Apex test suites in your default org and include code coverage results and additional details:\n<%= config.bin %> <%= command.id %> --suite-names \"MySuite,MyOtherSuite\" --code-coverage --detailed-coverage",
      "Run the specified Apex tests in your default org and display results in human-readable output:\n<%= config.bin %> <%= command.id %> --tests \"MyClassTest.testCoolFeature,MyClassTest.testAwesomeFeature,AnotherClassTest,namespace.TheirClassTest.testThis\" --result-format human",
      "Run all tests in the org with the specified username with the specified test level; save the output to the specified directory:\n<%= config.bin %> <%= command.id %> --test-level RunLocalTests --output-dir <path to outputdir> --target-org me@my.org"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "code-coverage": {
        "name": "code-coverage",
        "type": "boolean",
        "char": "c",
        "summary": "Retrieve code coverage results.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "codecoverage"
        ]
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory in which to store test run files.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "outputdir",
          "output-directory"
        ]
      },
      "test-level": {
        "name": "test-level",
        "type": "option",
        "char": "l",
        "summary": "Level of tests to run; default is RunLocalTests.",
        "description": "Here's what the levels mean:\n\n- RunSpecifiedTests — Only the tests that you specify are run.\n- RunLocalTests — All tests in your org are run, except the ones that originate from installed managed packages.\n- RunAllTestsInOrg — All tests are in your org and in installed managed packages are run",
        "multiple": false,
        "options": [
          "RunLocalTests",
          "RunAllTestsInOrg",
          "RunSpecifiedTests"
        ],
        "deprecateAliases": true,
        "aliases": [
          "testlevel"
        ]
      },
      "class-names": {
        "name": "class-names",
        "type": "option",
        "char": "n",
        "summary": "Comma-separated list of Apex test class names to run; default is all classes.",
        "description": "If you select --class-names, you can't specify --suite-names or --tests.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "classnames"
        ]
      },
      "result-format": {
        "name": "result-format",
        "type": "option",
        "char": "r",
        "summary": "Format of the test results.",
        "multiple": false,
        "options": [
          "human",
          "tap",
          "junit",
          "json"
        ],
        "default": "human",
        "deprecateAliases": true,
        "aliases": [
          "resultformat"
        ]
      },
      "suite-names": {
        "name": "suite-names",
        "type": "option",
        "char": "s",
        "summary": "Comma-separated list of Apex test suite names to run; default is all suites.",
        "description": "If you select --suite-names, you can't specify --class-names or --tests.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "suitenames"
        ]
      },
      "tests": {
        "name": "tests",
        "type": "option",
        "char": "t",
        "summary": "Comma-separated list of Apex test class names or IDs and, if applicable, test methods to run; default is all tests.",
        "description": "If you specify --tests, you can't specify --class-names or --suite-names",
        "multiple": false,
        "deprecateAliases": true
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Sets the streaming client socket timeout in minutes; specify a longer wait time if timeouts occur frequently.",
        "multiple": false,
        "deprecateAliases": true
      },
      "synchronous": {
        "name": "synchronous",
        "type": "boolean",
        "char": "y",
        "summary": "Runs test methods from a single Apex class synchronously; if not specified, tests are run asynchronously.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "detailed-coverage": {
        "name": "detailed-coverage",
        "type": "boolean",
        "char": "v",
        "summary": "Display detailed code coverage per test.",
        "allowNo": false,
        "dependsOn": [
          "code-coverage"
        ],
        "deprecateAliases": true,
        "aliases": [
          "detailedcoverage"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "apex:tail:log",
    "summary": "Activate debug logging and display logs in the terminal.",
    "description": "You can also pipe the logs to a file.",
    "strict": true,
    "pluginName": "@salesforce/plugin-apex",
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Activate debug logging:\n<%= config.bin %> <%= command.id %>",
      "Specify a debug level:\n<%= config.bin %> <%= command.id %> --debug-level MyDebugLevel",
      "Skip the trace flag setup and apply default colors:\n<%= config.bin %> <%= command.id %> --color --skip-trace-flag"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "color": {
        "name": "color",
        "type": "boolean",
        "char": "c",
        "summary": "Apply default colors to noteworthy log lines.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "debug-level": {
        "name": "debug-level",
        "type": "option",
        "char": "d",
        "summary": "Debug level to set on the DEVELOPER_LOG trace flag for your user.",
        "multiple": false,
        "exclusive": [
          "skip-trace-flag"
        ],
        "deprecateAliases": true,
        "aliases": [
          "debuglevel"
        ]
      },
      "skip-trace-flag": {
        "name": "skip-trace-flag",
        "type": "boolean",
        "char": "s",
        "summary": "Skip trace flag setup. Assumes that a trace flag and debug level are fully set up.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "skiptraceflag"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:login:access-token",
    "summary": "Authorize an org using an existing Salesforce access token.",
    "description": "By default, the command runs interactively and asks you for the access token. If you previously authorized the org, the command prompts whether you want to overwrite the local file. Specify --no-prompt to not be prompted.\n\nTo use the command in a CI/CD script, set the SFDX_ACCESS_TOKEN environment variable to the access token. Then run the command with the --no-prompt parameter.",
    "strict": true,
    "pluginName": "@salesforce/plugin-auth",
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Authorize an org on https://mycompany.my.salesforce.com; the command prompts you for the access token:\n<%= config.bin %> <%= command.id %> --instance-url https://mycompany.my.salesforce.com",
      "Authorize the org without being prompted; you must have previously set the SFDX_ACCESS_TOKEN environment variable to the access token:\n<%= config.bin %> <%= command.id %> --instance-url https://dev-hub.my.salesforce.com --no-prompt"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "instance-url": {
        "name": "instance-url",
        "type": "option",
        "char": "r",
        "summary": "URL of the instance that the org lives on.",
        "description": "If you specify an --instance-url value, this value overrides the sfdcLoginUrl value in your sfdx-project.json file.\n\nTo specify a My Domain URL, use the format https://yourcompanyname.my.salesforce.com.\n\nTo specify a sandbox, set --instance-url to https://MyDomainName--SandboxName.sandbox.my.salesforce.com.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "instanceurl"
        ]
      },
      "set-default-dev-hub": {
        "name": "set-default-dev-hub",
        "type": "boolean",
        "char": "d",
        "summary": "Set the authenticated org as the default Dev Hub.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "setdefaultdevhub",
          "setdefaultdevhubusername"
        ]
      },
      "set-default": {
        "name": "set-default",
        "type": "boolean",
        "char": "s",
        "summary": "Set the authenticated org as the default that all org-related commands run against.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "setdefaultusername"
        ]
      },
      "alias": {
        "name": "alias",
        "type": "option",
        "char": "a",
        "summary": "Alias for the org.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "setalias"
        ]
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "Don't prompt for confirmation.",
        "required": false,
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "noprompt"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "org:login:device",
    "summary": "Authorize an org using a device code.",
    "description": "Use this command to allow a device to connect to an org.\n\nWhen you run this command, it first displays an 8-digit device code and the URL for verifying the code on your org. The default instance URL is https://login.salesforce.com, so if the org you're authorizing is on a different instance, use the --instance-url. The command waits while you complete the verification. Open a browser and navigate to the displayed verification URL, enter the code, then click Connect. If you aren't already logged into your org, log in, and then you're prompted to allow the device to connect to the org. After you successfully authorize the org, you can close the browser window.",
    "strict": true,
    "pluginName": "@salesforce/plugin-auth",
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Authorize an org using a device code, give the org the alias TestOrg1, and set it as your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --set-default-dev-hub --alias TestOrg1",
      "Authorize an org in which you've created a custom connected app with the specified client ID (consumer key):\n<%= config.bin %> <%= command.id %> --client-id <OAuth client id>",
      "Authorize a sandbox org with the specified instance URL:\n<%= config.bin %> <%= command.id %> --instance-url https://MyDomainName--SandboxName.sandbox.my.salesforce.com"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "client-id": {
        "name": "client-id",
        "type": "option",
        "char": "i",
        "summary": "OAuth client ID (also called consumer key) of your custom connected app.",
        "multiple": false,
        "aliases": [
          "clientid"
        ]
      },
      "instance-url": {
        "name": "instance-url",
        "type": "option",
        "char": "r",
        "summary": "URL of the instance that the org lives on.",
        "description": "If you specify an --instance-url value, this value overrides the sfdcLoginUrl value in your sfdx-project.json file.\n\nTo specify a My Domain URL, use the format https://yourcompanyname.my.salesforce.com.\n\nTo specify a sandbox, set --instance-url to https://MyDomainName--SandboxName.sandbox.my.salesforce.com.",
        "multiple": false,
        "aliases": [
          "instanceurl"
        ]
      },
      "set-default-dev-hub": {
        "name": "set-default-dev-hub",
        "type": "boolean",
        "char": "d",
        "summary": "Set the authenticated org as the default Dev Hub.",
        "allowNo": false,
        "aliases": [
          "setdefaultdevhub",
          "setdefaultdevhubusername"
        ]
      },
      "set-default": {
        "name": "set-default",
        "type": "boolean",
        "char": "s",
        "summary": "Set the authenticated org as the default that all org-related commands run against.",
        "allowNo": false,
        "aliases": [
          "setdefaultusername"
        ]
      },
      "alias": {
        "name": "alias",
        "type": "option",
        "char": "a",
        "summary": "Alias for the org.",
        "multiple": false,
        "aliases": [
          "setalias"
        ]
      },
      "disable-masking": {
        "name": "disable-masking",
        "type": "boolean",
        "summary": "Disable masking of user input; use with problematic terminals.",
        "hidden": true,
        "allowNo": false,
        "aliases": [
          "disablemasking"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "org:login:jwt",
    "summary": "Log in to a Salesforce org using a JSON web token (JWT).",
    "description": "Use this command in automated environments where you can’t interactively log in with a browser, such as in CI/CD scripts.\n\nLogging into an org authorizes the CLI to run other commands that connect to that org, such as deploying or retrieving a project. You can log into many types of orgs, such as sandboxes, Dev Hubs, Env Hubs, production orgs, and scratch orgs.\n\nComplete these steps before you run this command:\n\n    1. Create a digital certificate (also called digital signature) and the private key to sign the certificate. You can use your own key and certificate issued by a certification authority. Or use OpenSSL to create a key and a self-signed digital certificate.\n    2. Store the private key in a file on your computer. When you run this command, you set the --jwt-key-file flag to this file.\n    3. Create a custom connected app in your org using the digital certificate. Make note of the consumer key (also called client id) that’s generated for you. Be sure the username of the user logging in is approved to use the connected app. When you run this command, you set the --client-id flag to the consumer key.\n\nSee https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_auth_jwt_flow.htm for more information.\n\nWe recommend that you set an alias when you log into an org. Aliases make it easy to later reference this org when running commands that require it. If you don’t set an alias, you use the username that you specified when you logged in to the org. If you run multiple commands that reference the same org, consider setting the org as your default. Use --set-default for your default scratch org or sandbox, or --set-default-dev-hub for your default Dev Hub.",
    "strict": true,
    "pluginName": "@salesforce/plugin-auth",
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Log into an org with username jdoe@example.org and on the default instance URL (https://login.salesforce.org). The private key is stored in the file /Users/jdoe/JWT/server.key and the command uses the connected app with consumer key (client id) 04580y4051234051.\n<%= config.bin %> <%= command.id %> --username jdoe@example.org --jwt-key-file /Users/jdoe/JWT/server.key --client-id 04580y4051234051",
      "Set the org as the default and give it an alias:\n<%= config.bin %> <%= command.id %> --username jdoe@example.org --jwt-key-file /Users/jdoe/JWT/server.key --client-id 04580y4051234051 --alias ci-org --set-default",
      "Set the org as the default Dev Hub and give it an alias:\n<%= config.bin %> <%= command.id %> --username jdoe@example.org --jwt-key-file /Users/jdoe/JWT/server.key --client-id 04580y4051234051 --alias ci-dev-hub --set-default-dev-hub",
      "Log in to a sandbox using URL https://MyDomainName--SandboxName.sandbox.my.salesforce.com:\n<%= config.bin %> <%= command.id %> --username jdoe@example.org --jwt-key-file /Users/jdoe/JWT/server.key --client-id 04580y4051234051 --alias ci-org --set-default --instance-url https://MyDomainName--SandboxName.sandbox.my.salesforce.com"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "username": {
        "name": "username",
        "type": "option",
        "char": "o",
        "summary": "Username of the user logging in.",
        "required": true,
        "multiple": false,
        "aliases": [
          "u"
        ]
      },
      "jwt-key-file": {
        "name": "jwt-key-file",
        "type": "option",
        "char": "f",
        "summary": "Path to a file containing the private key.",
        "required": true,
        "multiple": false,
        "aliases": [
          "jwtkeyfile",
          "keyfile"
        ]
      },
      "client-id": {
        "name": "client-id",
        "type": "option",
        "char": "i",
        "summary": "OAuth client ID (also called consumer key) of your custom connected app.",
        "required": true,
        "multiple": false,
        "aliases": [
          "clientid"
        ]
      },
      "instance-url": {
        "name": "instance-url",
        "type": "option",
        "char": "r",
        "summary": "URL of the instance that the org lives on.",
        "description": "If you specify an --instance-url value, this value overrides the sfdcLoginUrl value in your sfdx-project.json file.\n\nTo specify a My Domain URL, use the format https://yourcompanyname.my.salesforce.com.\n\nTo specify a sandbox, set --instance-url to https://MyDomainName--SandboxName.sandbox.my.salesforce.com.",
        "multiple": false,
        "aliases": [
          "instanceurl",
          "l"
        ]
      },
      "set-default-dev-hub": {
        "name": "set-default-dev-hub",
        "type": "boolean",
        "char": "d",
        "summary": "Set the authenticated org as the default Dev Hub.",
        "allowNo": false,
        "aliases": [
          "setdefaultdevhub",
          "setdefaultdevhubusername",
          "v"
        ]
      },
      "set-default": {
        "name": "set-default",
        "type": "boolean",
        "char": "s",
        "summary": "Set the authenticated org as the default that all org-related commands run against.",
        "allowNo": false,
        "aliases": [
          "setdefaultusername"
        ]
      },
      "alias": {
        "name": "alias",
        "type": "option",
        "char": "a",
        "summary": "Alias for the org.",
        "multiple": false,
        "aliases": [
          "setalias"
        ]
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "Don't prompt for confirmation.",
        "hidden": true,
        "required": false,
        "allowNo": false,
        "aliases": [
          "noprompt"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "org:list:auth",
    "summary": "List authorization information about the orgs you created or logged into.",
    "description": "This command uses local authorization information that Salesforce CLI caches when you create a scratch org or log into an org. The command doesn't actually connect to the orgs to verify that they're still active. As a result, this command executes very quickly. If you want to view live information about your authorized orgs, such as their connection status, use the \"org list\" command.",
    "strict": true,
    "pluginName": "@salesforce/plugin-auth",
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List local authorization information about your orgs:\n<%= config.bin %> <%= command.id %>"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "org:logout",
    "summary": "Log out of a Salesforce org.",
    "description": "If you run this command with no flags, it first displays a list of orgs you've created or logged into, with none of the orgs selected. Use the arrow keys to scroll through the list and the space bar to select the orgs you want to log out of. Press Enter when you're done; the command asks for a final confirmation before logging out of the selected orgs.\n\nThe process is similar if you specify --all, except that in the initial list of orgs, they're all selected. Use --target-org to logout of a specific org. In both these cases by default, you must still confirm that you want to log out. Use --no-prompt to never be asked for confirmation when also using --all or --target-org.\n\nBe careful! If you log out of a scratch org without having access to its password, you can't access the scratch org again, either through the CLI or the Salesforce UI.",
    "strict": true,
    "pluginName": "@salesforce/plugin-auth",
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Interactively select the orgs to log out of:\n<%= config.bin %> <%= command.id %>",
      "Log out of the org with username me@my.org:\n<%= config.bin %> <%= command.id %> --target-org me@my.org",
      "Log out of all orgs after confirmation:\n<%= config.bin %> <%= command.id %> --all",
      "Logout of the org with alias my-scratch and don't prompt for confirmation:\n<%= config.bin %> <%= command.id %> --target-org my-scratch --no-prompt"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "all": {
        "name": "all",
        "type": "boolean",
        "char": "a",
        "summary": "Include all authenticated orgs.",
        "description": "All orgs includes Dev Hubs, sandboxes, DE orgs, and expired, deleted, and unknown-status scratch orgs.",
        "required": false,
        "allowNo": false,
        "exclusive": [
          "target-org"
        ],
        "deprecateAliases": true
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "Don't prompt for confirmation.",
        "required": false,
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "noprompt"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "org:login:sfdx-url",
    "summary": "Authorize an org using a Salesforce DX authorization URL stored in a file.",
    "description": "The Salesforce DX (SFDX) authorization URL must have the format \"force://<clientId>:<clientSecret>:<refreshToken>@<instanceUrl>\". NOTE: The SFDX authorization URL uses the \"force\" protocol, and not \"http\" or \"https\". Also, the \"instanceUrl\" inside the SFDX authorization URL doesn't include the protocol (\"https://\").\n\nYou have three options when creating the authorization file. The easiest option is to redirect the output of the \"<%= config.bin %> org display --verbose --json\" command into a file. For example, using an org with alias my-org that you've already authorized:\n\n    $ <%= config.bin %> org display --target-org my-org --verbose --json > authFile.json\n\nThe resulting JSON file contains the URL in the \"sfdxAuthUrl\" property of the \"result\" object. You can then reference the file when running this command:\n\n    $ <%= config.bin %> <%= command.id %> --sfdx-url-file authFile.json\n\nNOTE: The \"<%= config.bin %> org display --verbose\" command displays the refresh token only for orgs authorized with the web server flow, and not the JWT bearer flow.\n\nYou can also create a JSON file that has a top-level property named sfdxAuthUrl whose value is the authorization URL. Finally, you can create a normal text file that includes just the URL and nothing else.",
    "strict": true,
    "pluginName": "@salesforce/plugin-auth",
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Authorize an org using the SFDX authorization URL in the files/authFile.json file:\n<%= config.bin %> <%= command.id %> --sfdx-url-file files/authFile.json",
      "Similar to previous example, but set the org as your default and give it an alias MyDefaultOrg:\n<%= config.bin %> <%= command.id %> --sfdx-url-file files/authFile.json --set-default --alias MyDefaultOrg"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "sfdx-url-file": {
        "name": "sfdx-url-file",
        "type": "option",
        "char": "f",
        "summary": "Path to a file that contains the Salesforce DX authorization URL.",
        "required": true,
        "multiple": false,
        "aliases": [
          "sfdxurlfile"
        ]
      },
      "set-default-dev-hub": {
        "name": "set-default-dev-hub",
        "type": "boolean",
        "char": "d",
        "summary": "Set the authenticated org as the default Dev Hub.",
        "allowNo": false,
        "aliases": [
          "setdefaultdevhub",
          "setdefaultdevhubusername"
        ]
      },
      "set-default": {
        "name": "set-default",
        "type": "boolean",
        "char": "s",
        "summary": "Set the authenticated org as the default that all org-related commands run against.",
        "allowNo": false,
        "aliases": [
          "setdefaultusername"
        ]
      },
      "alias": {
        "name": "alias",
        "type": "option",
        "char": "a",
        "summary": "Alias for the org.",
        "multiple": false,
        "aliases": [
          "setalias"
        ]
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "Don't prompt for confirmation.",
        "hidden": true,
        "required": false,
        "allowNo": false,
        "aliases": [
          "noprompt"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "org:login:web",
    "summary": "Log in to a Salesforce org using the web server flow.",
    "description": "Opens a Salesforce instance URL in a web browser so you can enter your credentials and log in to your org. After you log in, you can close the browser window.\n\nLogging into an org authorizes the CLI to run other commands that connect to that org, such as deploying or retrieving metadata. You can log into many types of orgs, such as sandboxes, Dev Hubs, Env Hubs, production orgs, and scratch orgs.\n\nWe recommend that you set an alias when you log into an org. Aliases make it easy to later reference this org when running commands that require it. If you don’t set an alias, you use the username that you specified when you logged in to the org. If you run multiple commands that reference the same org, consider setting the org as your default. Use --set-default for your default scratch org or sandbox, or --set-default-dev-hub for your default Dev Hub.\n\nBy default, this command uses the global out-of-the-box connected app in your org. If you need more security or control, such as setting the refresh token timeout or specifying IP ranges, create your own connected app using a digital certificate. Make note of the consumer key (also called cliend id) that’s generated for you. Then specify the consumer key with the --client-id flag.",
    "strict": true,
    "pluginName": "@salesforce/plugin-auth",
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Run the command with no flags to open the default Salesforce login page (https://login.salesforce.com):\n<%= config.bin %> <%= command.id %>",
      "Log in to your Dev Hub, set it as your default Dev Hub, and set an alias that you reference later when you create a scratch org:\n<%= config.bin %> <%= command.id %> --set-default-dev-hub --alias dev-hub",
      "Log in to a sandbox and set it as your default org:\n<%= config.bin %> <%= command.id %> --instance-url https://MyDomainName--SandboxName.sandbox.my.salesforce.com --set-default",
      "Use --browser to specify a specific browser, such as Google Chrome:\n<%= config.bin %> <%= command.id %> --instance-url https://MyDomainName--SandboxName.sandbox.my.salesforce.com --set-default --browser chrome",
      "Use your own connected app by specifying its consumer key (also called client ID):\n<%= config.bin %> <%= command.id %> --instance-url https://MyDomainName--SandboxName.sandbox.my.salesforce.com --set-default --browser chrome --client-id 04580y4051234051"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "browser": {
        "name": "browser",
        "type": "option",
        "char": "b",
        "summary": "Browser in which to open the org.",
        "description": "If you don’t specify --browser, the command uses your default browser. The exact names of the browser applications differ depending on the operating system you're on; check your documentation for details.",
        "multiple": false,
        "options": [
          "chrome",
          "edge",
          "firefox"
        ],
        "deprecateAliases": true
      },
      "client-id": {
        "name": "client-id",
        "type": "option",
        "char": "i",
        "summary": "OAuth client ID (also called consumer key) of your custom connected app.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "clientid"
        ]
      },
      "instance-url": {
        "name": "instance-url",
        "type": "option",
        "char": "r",
        "summary": "URL of the instance that the org lives on.",
        "description": "If you specify an --instance-url value, this value overrides the sfdcLoginUrl value in your sfdx-project.json file.\n\nTo specify a My Domain URL, use the format https://yourcompanyname.my.salesforce.com.\n\nTo specify a sandbox, set --instance-url to https://MyDomainName--SandboxName.sandbox.my.salesforce.com.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "instanceurl",
          "l"
        ]
      },
      "set-default-dev-hub": {
        "name": "set-default-dev-hub",
        "type": "boolean",
        "char": "d",
        "summary": "Set the authenticated org as the default Dev Hub.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "setdefaultdevhubusername",
          "setdefaultdevhub",
          "v"
        ]
      },
      "set-default": {
        "name": "set-default",
        "type": "boolean",
        "char": "s",
        "summary": "Set the authenticated org as the default that all org-related commands run against.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "setdefaultusername"
        ]
      },
      "alias": {
        "name": "alias",
        "type": "option",
        "char": "a",
        "summary": "Alias for the org.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "setalias"
        ]
      },
      "disable-masking": {
        "name": "disable-masking",
        "type": "boolean",
        "summary": "Disable masking of user input; use with problematic terminals.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "disablemasking"
        ]
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "Don't prompt for confirmation.",
        "hidden": true,
        "required": false,
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "noprompt"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "autocomplete",
    "description": "display autocomplete installation instructions",
    "strict": true,
    "pluginName": "@oclif/plugin-autocomplete",
    "pluginAlias": "@oclif/plugin-autocomplete",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ <%= config.bin %> autocomplete",
      "$ <%= config.bin %> autocomplete bash",
      "$ <%= config.bin %> autocomplete zsh",
      "$ <%= config.bin %> autocomplete powershell",
      "$ <%= config.bin %> autocomplete --refresh-cache"
    ],
    "flags": {
      "refresh-cache": {
        "name": "refresh-cache",
        "type": "boolean",
        "char": "r",
        "description": "Refresh cache (ignores displaying instructions)",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "refresh-cache": {
        "description": "Refresh cache (ignores displaying instructions)",
        "char": "r",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false,
    "_enableJsonFlag": false
  },
  {
    "id": "cmdt:generate:object",
    "summary": "Generate a new custom metadata type in the current project.",
    "description": "This command creates a metadata file that describes the new custom metadata type. By default, the file is created in the MyCustomType__mdt directory in the current directory, where MyCustomType is the value of the required --type-name flag. Use the --output-directory to generate the file in a package directory with other custom metadata types, such as \"force-app/main/default/objects\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-custom-metadata",
    "pluginAlias": "@salesforce/plugin-custom-metadata",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate a custom metadata type with developer name 'MyCustomType'; this name is also used as the label:\n<%= config.bin %> <%= command.id %> --type-name MyCustomType",
      "Generate a protected custom metadata type with a specific label:\n<%= config.bin %> <%= command.id %> --type-name MyCustomType --label \"Custom Type\" --plural-label \"Custom Types\" --visibility Protected"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "type-name": {
        "name": "type-name",
        "type": "option",
        "char": "n",
        "summary": "Unique object name for the custom metadata type.",
        "description": "The name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores.",
        "required": true,
        "multiple": false,
        "aliases": [
          "typename"
        ]
      },
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "Label for the custom metadata type.",
        "multiple": false
      },
      "plural-label": {
        "name": "plural-label",
        "type": "option",
        "char": "p",
        "summary": "Plural version of the label value; if blank, uses label.",
        "multiple": false,
        "aliases": [
          "plurallabel"
        ]
      },
      "visibility": {
        "name": "visibility",
        "type": "option",
        "char": "v",
        "summary": "Who can see the custom metadata type.",
        "description": "For more information on what each option means, see this topic in Salesforce Help: https://help.salesforce.com/s/articleView?id=sf.custommetadatatypes_ui_create.htm&type=5.",
        "multiple": false,
        "options": [
          "PackageProtected",
          "Protected",
          "Public"
        ],
        "default": "Public"
      },
      "output-directory": {
        "name": "output-directory",
        "type": "option",
        "char": "d",
        "summary": "Directory to store the newly-created custom metadata type files",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": "",
        "aliases": [
          "outputdir",
          "outputdirectory"
        ]
      }
    },
    "args": {},
    "requiresProject": true,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "cmdt:generate:field",
    "summary": "Generate a field for a custom metadata type based on the provided field type.",
    "description": "Similar to a custom object, a custom metadata type has a list of custom fields that represent aspects of the metadata.\n\nThis command creates a metadata file that describes the new custom metadata type field. By default, the file is created in a \"fields\" directory in the current directory. Use the --output-directory to generate the file in the directory that contains the custom metadata type metdata files, such as \"force-app/main/default/objects/MyCmdt__mdt\" for the custom metadata type called MyCmdt.",
    "strict": true,
    "pluginName": "@salesforce/plugin-custom-metadata",
    "pluginAlias": "@salesforce/plugin-custom-metadata",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate a metadata file for a custom checkbox field and add the file to the MyCmdt__mdt/fields directory:\n<%= config.bin %> <%= command.id %> --name MyCheckboxField --type Checkbox --output-directory force-app/main/default/objects/MyCmdt__mdt",
      "Generate a metadata file for a custom picklist field and add a few values:\n<%= config.bin %> <%= command.id %> --name MyPicklistField --type Picklist --picklist-values A --picklist-values B --picklist-values C --output-directory force-app/main/default/objects/MyCmdt__mdt",
      "Generate a metadata file for a custom number field and specify 2 decimal places:\n<%= config.bin %> <%= command.id %> --name MyNumberField --type Number --decimal-places 2 --output-directory force-app/main/default/objects/MyCmdt__mdt"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Unique name for the field.",
        "required": true,
        "multiple": false,
        "aliases": [
          "fieldname"
        ]
      },
      "type": {
        "name": "type",
        "type": "option",
        "char": "f",
        "summary": "Type of the field.",
        "description": "You can't use this command to create a custom metadata type field of type \"Metadata Relationship\". Use the Salesforce Setup UI instead.",
        "required": true,
        "multiple": false,
        "options": [
          "Checkbox",
          "Date",
          "DateTime",
          "Email",
          "Number",
          "Percent",
          "Phone",
          "Picklist",
          "Text",
          "TextArea",
          "LongTextArea",
          "Url"
        ],
        "aliases": [
          "fieldtype"
        ]
      },
      "picklist-values": {
        "name": "picklist-values",
        "type": "option",
        "char": "p",
        "summary": "Picklist values; required for picklist fields.",
        "multiple": true,
        "aliases": [
          "picklistvalues"
        ],
        "delimiter": ","
      },
      "decimal-places": {
        "name": "decimal-places",
        "type": "option",
        "char": "s",
        "summary": "Number of decimal places to use for number or percent fields.",
        "description": "The value must be greater than or equal to zero. Default value is 0.",
        "multiple": false,
        "default": 0,
        "aliases": [
          "decimalplaces"
        ]
      },
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "Label for the field.",
        "multiple": false
      },
      "output-directory": {
        "name": "output-directory",
        "type": "option",
        "char": "d",
        "summary": "Directory to store newly-created field definition files.",
        "description": "New files are automatically created in the \"fields\" directory. The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": "",
        "aliases": [
          "outputdir",
          "outputdirectory"
        ]
      }
    },
    "args": {},
    "requiresProject": true,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "cmdt:generate:fromorg",
    "summary": "Generate a custom metadata type and all its records from a Salesforce object.",
    "description": "Use this command to migrate existing custom objects or custom settings in an org to custom metadata types. If a field of the Salesforce object is of an unsupported type, the field type is automatically converted to text. Run \"<%= config.bin %> cmdt generate field --help\" to see the list of supported cmdt field types, listed in the --type flag summary. Use the --ignore-unsupported to ignore these fields.\n\nThis command creates the metadata files that describe the new custom metadata type and its fields in the \"force-app/main/default/objects/TypeName__mdt\" directory by default, where \"TypeName\" is the value of the required --dev-name flag. Use --type-output-directory to create them in a different directory.",
    "strict": true,
    "pluginName": "@salesforce/plugin-custom-metadata",
    "pluginAlias": "@salesforce/plugin-custom-metadata",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate a custom metadata type from a custom object called MySourceObject__c in your default org:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --sobject MySourceObject__c",
      "Generate a custom metadata type from a custom object in an org with alias my-scratch-org; ignore unsupported field types instead of converting them to text:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --sobject MySourceObject__c --ignore-unsupported --target-org my-scratch-org",
      "Generate a protected custom metadata type from a custom object:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --sobject MySourceObject__c --visibility Protected",
      "Generate a protected custom metadata type from a custom setting with a specific singular and plural label:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --label \"My CMDT\" --plural-label \"My CMDTs\" --sobject MySourceSetting__c --visibility Protected",
      "Generate a custom metadata type and put the resulting metadata files in the specified directory:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --sobject MySourceObject__c --type-output-directory path/to/my/cmdt/directory",
      "Generate a custom metadata type and put the resulting record metadata file(s) in the specified directory:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --sobject MySourceObject__c --records-output-dir path/to/my/cmdt/record/directory"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "dev-name": {
        "name": "dev-name",
        "type": "option",
        "char": "n",
        "summary": "Name of the custom metadata type.",
        "required": true,
        "multiple": false,
        "aliases": [
          "devname"
        ]
      },
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "Label for the custom metadata type.",
        "multiple": false
      },
      "plural-label": {
        "name": "plural-label",
        "type": "option",
        "char": "p",
        "summary": "Plural version of the label value; if blank, uses label.",
        "multiple": false,
        "aliases": [
          "plurallabel"
        ]
      },
      "visibility": {
        "name": "visibility",
        "type": "option",
        "char": "v",
        "summary": "Who can see the custom metadata type.",
        "description": "For more information on what each option means, see this topic in Salesforce Help: https://help.salesforce.com/s/articleView?id=sf.custommetadatatypes_ui_create.htm&type=5.",
        "multiple": false,
        "options": [
          "PackageProtected",
          "Protected",
          "Public"
        ],
        "default": "Public"
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the source Salesforce object used to generate the custom metadata type.",
        "required": true,
        "multiple": false,
        "aliases": [
          "sobjectname"
        ]
      },
      "ignore-unsupported": {
        "name": "ignore-unsupported",
        "type": "boolean",
        "char": "i",
        "summary": "Ignore unsupported field types.",
        "description": "In this context, \"ignore\" means that the fields aren't created. The default behavior is to create fields of type text and convert the field values to text.",
        "allowNo": false,
        "aliases": [
          "ignoreunsupported"
        ]
      },
      "type-output-directory": {
        "name": "type-output-directory",
        "type": "option",
        "char": "d",
        "summary": "Directory to store newly-created custom metadata type files.",
        "multiple": false,
        "default": "force-app/main/default/objects",
        "aliases": [
          "typeoutputdir"
        ]
      },
      "records-output-dir": {
        "name": "records-output-dir",
        "type": "option",
        "char": "r",
        "summary": "Directory to store newly-created custom metadata record files.",
        "multiple": false,
        "default": "force-app/main/default/customMetadata",
        "aliases": [
          "recordsoutputdir"
        ]
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "cmdt:generate:record",
    "summary": "Generate a new record for a given custom metadata type in the current project.",
    "description": "The custom metadata type must already exist in your project. You must specify a name for the new record. Use name=value pairs to specify the values for the fields, such as MyTextField=\"some text here\" or MyNumberField=32.",
    "strict": true,
    "pluginName": "@salesforce/plugin-custom-metadata",
    "pluginAlias": "@salesforce/plugin-custom-metadata",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create a record metadata file for custom metadata type 'MyCMT' with specified values for two custom fields:\n<%= config.bin %> <%= command.id %> --type-name MyCMT__mdt --record-name MyRecord My_Custom_Field_1=Foo My_Custom_Field_2=Bar",
      "Create a protected record metadata file for custom metadata type 'MyCMT' with a specific label and values specified for two custom fields:\n<%= config.bin %> <%= command.id %> --type-name MyCMT__mdt --record-name MyRecord --label \"My Record\" --protected true My_Custom_Field_1=Foo My_Custom_Field_2=Bar"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "type-name": {
        "name": "type-name",
        "type": "option",
        "char": "t",
        "summary": "API name of the custom metadata type to create a record for; must end in \"__mdt\".",
        "required": true,
        "multiple": false,
        "aliases": [
          "typename"
        ]
      },
      "record-name": {
        "name": "record-name",
        "type": "option",
        "char": "n",
        "summary": "Name of the new record.",
        "required": true,
        "multiple": false,
        "aliases": [
          "recordname"
        ]
      },
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "Label for the new record.",
        "multiple": false
      },
      "protected": {
        "name": "protected",
        "type": "option",
        "char": "p",
        "summary": "Protect the record when it's in a managed package.",
        "description": "Protected records can only be accessed by code in the same managed package namespace.",
        "multiple": false,
        "options": [
          "true",
          "false"
        ],
        "default": "false"
      },
      "input-directory": {
        "name": "input-directory",
        "type": "option",
        "char": "i",
        "summary": "Directory from which to get the custom metadata type definition from.",
        "multiple": false,
        "default": "force-app/main/default/objects",
        "aliases": [
          "inputdir",
          "inputdirectory"
        ]
      },
      "output-directory": {
        "name": "output-directory",
        "type": "option",
        "char": "d",
        "summary": "Directory to store newly-created custom metadata record files.",
        "multiple": false,
        "default": "force-app/main/default/customMetadata",
        "aliases": [
          "outputdir",
          "outputdirectory"
        ]
      }
    },
    "args": {},
    "requiresProject": true,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "cmdt:generate:records",
    "summary": "Generate new custom metadata type records from a CSV file.",
    "description": "The custom metadata type must already exist in your project. By default, the Name column is used to determine the record name; use the --name-column flag to specify a different column.",
    "strict": true,
    "pluginName": "@salesforce/plugin-custom-metadata",
    "pluginAlias": "@salesforce/plugin-custom-metadata",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate record metadata files from values in a CSV file for the custom metadata type MyCmdt. Use 'Name' as the column that specifies the record name:\n<%= config.bin %> <%= command.id %> --csv path/to/my.csv --type-name MyCmdt",
      "Generate record metadata files from a CSV file in the directory different from the default, and use 'PrimaryKey' as the column that specifies the record name:\n<%= config.bin %> <%= command.id %> --csv path/to/my.csv --type-name MyCmdt --input-directory path/to/my/cmdt/directory --name-column \"PrimaryKey\""
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "csv": {
        "name": "csv",
        "type": "option",
        "char": "f",
        "summary": "Pathname of the CSV file.",
        "required": true,
        "multiple": false,
        "aliases": [
          "filepath"
        ]
      },
      "type-name": {
        "name": "type-name",
        "type": "option",
        "char": "t",
        "summary": "API name of the custom metadata type to create a record for.",
        "description": "The '__mdt' suffix is appended to the end of the name if it's omitted.",
        "required": true,
        "multiple": false,
        "aliases": [
          "typename"
        ]
      },
      "input-directory": {
        "name": "input-directory",
        "type": "option",
        "char": "i",
        "summary": "Directory from which to get the custom metadata type definition from.",
        "multiple": false,
        "default": "force-app/main/default/objects",
        "aliases": [
          "inputdir",
          "inputdirectory"
        ]
      },
      "output-directory": {
        "name": "output-directory",
        "type": "option",
        "char": "d",
        "summary": "Directory to store newly-created custom metadata record files.",
        "multiple": false,
        "default": "force-app/main/default/customMetadata",
        "aliases": [
          "outputdir",
          "outputdirectory"
        ]
      },
      "name-column": {
        "name": "name-column",
        "type": "option",
        "char": "n",
        "summary": "Column used to determine the name of the record.",
        "multiple": false,
        "default": "Name",
        "aliases": [
          "namecolumn"
        ]
      }
    },
    "args": {},
    "requiresProject": true,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "commands",
    "description": "list all the commands",
    "strict": true,
    "pluginName": "@oclif/plugin-commands",
    "pluginAlias": "@oclif/plugin-commands",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "help": {
        "name": "help",
        "type": "boolean",
        "char": "h",
        "description": "Show CLI help.",
        "allowNo": false
      },
      "hidden": {
        "name": "hidden",
        "type": "boolean",
        "description": "show hidden commands",
        "allowNo": false
      },
      "tree": {
        "name": "tree",
        "type": "boolean",
        "description": "show tree of commands",
        "allowNo": false
      },
      "columns": {
        "name": "columns",
        "type": "option",
        "description": "only show provided columns (comma-separated)",
        "multiple": false,
        "exclusive": [
          "extended"
        ]
      },
      "sort": {
        "name": "sort",
        "type": "option",
        "description": "property to sort by (prepend '-' for descending)",
        "multiple": false
      },
      "filter": {
        "name": "filter",
        "type": "option",
        "description": "filter property by partial string matching, ex: name=foo",
        "multiple": false
      },
      "csv": {
        "name": "csv",
        "type": "boolean",
        "description": "output is csv format [alias: --output=csv]",
        "allowNo": false,
        "exclusive": [
          "no-truncate"
        ]
      },
      "output": {
        "name": "output",
        "type": "option",
        "description": "output in a more machine friendly format",
        "multiple": false,
        "options": [
          "csv",
          "json",
          "yaml"
        ],
        "exclusive": [
          "no-truncate",
          "csv"
        ]
      },
      "extended": {
        "name": "extended",
        "type": "boolean",
        "char": "x",
        "description": "show extra columns",
        "allowNo": false,
        "exclusive": [
          "columns"
        ]
      },
      "no-truncate": {
        "name": "no-truncate",
        "type": "boolean",
        "description": "do not truncate output to fit screen",
        "allowNo": false,
        "exclusive": [
          "csv"
        ]
      },
      "no-header": {
        "name": "no-header",
        "type": "boolean",
        "description": "hide table header from output",
        "allowNo": false,
        "exclusive": [
          "csv"
        ]
      }
    },
    "args": {},
    "_enableJsonFlag": false,
    "_baseFlags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "_flags": {
      "help": {
        "description": "Show CLI help.",
        "char": "h",
        "allowNo": false,
        "type": "boolean",
        "name": "help"
      },
      "hidden": {
        "description": "show hidden commands",
        "allowNo": false,
        "type": "boolean",
        "name": "hidden"
      },
      "tree": {
        "description": "show tree of commands",
        "allowNo": false,
        "type": "boolean",
        "name": "tree"
      },
      "columns": {
        "exclusive": [
          "extended"
        ],
        "description": "only show provided columns (comma-separated)",
        "input": [],
        "multiple": false,
        "type": "option",
        "name": "columns"
      },
      "sort": {
        "description": "property to sort by (prepend '-' for descending)",
        "input": [],
        "multiple": false,
        "type": "option",
        "name": "sort"
      },
      "filter": {
        "description": "filter property by partial string matching, ex: name=foo",
        "input": [],
        "multiple": false,
        "type": "option",
        "name": "filter"
      },
      "csv": {
        "exclusive": [
          "no-truncate"
        ],
        "description": "output is csv format [alias: --output=csv]",
        "allowNo": false,
        "type": "boolean",
        "name": "csv"
      },
      "output": {
        "exclusive": [
          "no-truncate",
          "csv"
        ],
        "description": "output in a more machine friendly format",
        "options": [
          "csv",
          "json",
          "yaml"
        ],
        "input": [],
        "multiple": false,
        "type": "option",
        "name": "output"
      },
      "extended": {
        "exclusive": [
          "columns"
        ],
        "char": "x",
        "description": "show extra columns",
        "allowNo": false,
        "type": "boolean",
        "name": "extended"
      },
      "no-truncate": {
        "exclusive": [
          "csv"
        ],
        "description": "do not truncate output to fit screen",
        "allowNo": false,
        "type": "boolean",
        "name": "no-truncate"
      },
      "no-header": {
        "exclusive": [
          "csv"
        ],
        "description": "hide table header from output",
        "allowNo": false,
        "type": "boolean",
        "name": "no-header"
      }
    },
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "community:create",
    "summary": "Create an Experience Cloud site using a template.",
    "description": "See 'Which Experience Cloud Template Should I Use?' (https://help.salesforce.com/s/articleView?id=sf.siteforce_commtemp_intro.htm&type=5) in Salesforce Help for more information about the different template\ntypes available for Experience Cloud.\n\nWhen creating a site with the Build Your Own (LWR) template, you must also specify the AuthenticationType value using the format templateParams.AuthenticationType=value, where value is AUTHENTICATED, UNAUTHENTICATED, or AUTHENTICATED_WITH_PUBLIC_ACCESS. Name and values are case-sensitive. See 'ExperienceBundle' in the Metadata API Developer Guide for more information. (https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_experiencebundle.htm)\n\nWhen you execute this command, it creates the site in preview status, which means that it isn't yet live. After you finish building your site, you can make it live.\n\nIf you have an Experience Builder site, publish the site using the \"community publish\" command to make it live.\n\nIf you have a Salesforce Tabs + Visualforce site, activate the site to make it live by updating the status field of the Network type in the Metadata API. Alternatively, in Experience Workspaces, go to Administration | Settings, and click Activate.\n\nFor Experience Builder sites, activating the site just sends out a welcome email to site members.",
    "strict": true,
    "pluginName": "@salesforce/plugin-community",
    "pluginAlias": "@salesforce/plugin-community",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create an Experience Cloud site using template 'Customer Service' and URL path prefix 'customers':\n<%= config.bin %> <%= command.id %> --name 'My Customer Site' --template-name 'Customer Service' --url-path-prefix customers --description 'My customer site'",
      "Create a site using 'Partner Central' template:\n<%= config.bin %> <%= command.id %> --name partnercentral --template-name 'Partner Central' --url-path-prefix partners",
      "Create a site using the 'Build Your Own (LWR)' template with authentication type of UNAUTHENTICATED:\n<%= config.bin %> <%= command.id %> --name lwrsite --template-name 'Build Your Own (LWR)' --url-path-prefix lwrsite templateParams.AuthenticationType=UNAUTHENTICATED"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the site to create.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "template-name": {
        "name": "template-name",
        "type": "option",
        "char": "t",
        "summary": "Template to use to create a site.",
        "description": "An example of a template is Customer Service. Run the \"community template list\" command to see which templates are available in your org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "templatename"
        ]
      },
      "url-path-prefix": {
        "name": "url-path-prefix",
        "type": "option",
        "char": "p",
        "summary": "URL to append to the domain created when Digital Experiences was enabled for this org.",
        "description": "For example, if your domain name is https://MyDomainName.my.site.com and you create a customer site, enter 'customers' to create the unique URL https://MyDomainName.my.site.com/customers.",
        "multiple": false,
        "default": "",
        "deprecateAliases": true,
        "aliases": [
          "urlpathprefix"
        ]
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "summary": "Description of the site.",
        "description": "The description displays in Digital Experiences - All Sites in Setup and helps with site identification.",
        "multiple": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      }
    },
    "args": {},
    "validationPatterns": [
      "name",
      "urlPathPrefix",
      "templateName",
      "description",
      "templateParams(\\.\\w+)+"
    ],
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "community:list:template",
    "summary": "Retrieve the list of templates available in your org.",
    "description": "See 'Which Experience Cloud Template Should I Use?' (https://help.salesforce.com/s/articleView?id=sf.siteforce_commtemp_intro.htm&type=5) in Salesforce Help for more information about the different template types available for Experience Cloud.",
    "strict": true,
    "pluginName": "@salesforce/plugin-community",
    "pluginAlias": "@salesforce/plugin-community",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Retrieve the template list from an org with alias my-scratch-org:\n<%= config.bin %> <%= command.id %> --target-org my-scratch-org"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "community:publish",
    "summary": "Publish an Experience Builder site to make it live.",
    "description": "Each time you publish it, you update the live site with the most recent updates. When you publish an Experience Builder site for the first time, you make the site's URL live and enable login access for site members.\n\nAdditionally, to send a welcome email to all site members, you must activate the site. (Activation is also required to successfully set up SEO for Experience Builder sites.) To activate a site, update the status field of the Network type in the Metadata API. Alternatively, in Experience Workspaces, go to Administration | Settings, and click Activate.\n\nSubsequently, each time you publish the site, you update the live site with all changes made to the site since it was last published.\n\nAn email notification informs you when your changes are live.",
    "strict": true,
    "pluginName": "@salesforce/plugin-community",
    "pluginAlias": "@salesforce/plugin-community",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Publish the Experience Builder site with name \"My Customer Site':\n<%= config.bin %> <%= command.id %> --name 'My Customer Site'"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the Experience Builder site to publish.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "config:get",
    "summary": "Get the value of a configuration variable.",
    "description": "Run \"sf config list\" to see all the configuration variables you've set. Global configuration variable are always displayed; local ones are displayed if you run the command in a project directory. Run \"sf config set\" to set a configuration variable.",
    "strict": true,
    "pluginName": "@salesforce/plugin-settings",
    "pluginAlias": "@salesforce/plugin-settings",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Get the value of the \"target-org\" configuration variable.\n<%= config.bin %> <%= command.id %> target-org",
      "Get multiple configuration variables and display whether they're set locally or globally:\n<%= config.bin %> <%= command.id %> target-org api-version --verbose"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Display whether the configuration variables are set locally or globally.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "configurationVariablesSection": {
      "header": "CONFIGURATION VARIABLES",
      "body": [
        {
          "name": "org-instance-url",
          "description": "URL of the Salesforce instance hosting your org. Default: https://login.salesforce.com."
        },
        {
          "name": "org-api-version",
          "description": "API version of your project. Default: API version of your Dev Hub org."
        },
        {
          "name": "target-dev-hub",
          "description": "Username or alias of your default Dev Hub org. (sf only)"
        },
        {
          "name": "target-org",
          "description": "Username or alias of the org that all commands run against by default. (sf only)"
        },
        {
          "name": "org-isv-debugger-sid",
          "description": "ISV debugger SID."
        },
        {
          "name": "org-isv-debugger-url",
          "description": "ISV debugger URL."
        },
        {
          "name": "org-custom-metadata-templates",
          "description": "A valid repository URL or directory for the custom org metadata templates."
        },
        {
          "name": "org-max-query-limit",
          "description": "Maximum number of Salesforce records returned by a CLI command. Default: 10,000."
        }
      ]
    },
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "config:list",
    "summary": "List the configuration variables that you've previously set.",
    "description": "Global configuration variables apply to any Salesforce DX project and are always displayed. If you run this command from a project directory, local configuration variables are also displayed.",
    "strict": true,
    "pluginName": "@salesforce/plugin-settings",
    "pluginAlias": "@salesforce/plugin-settings",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List both global configuration variables and those local to your project:\n$ <%= config.bin %> <%= command.id %>"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "config:set",
    "summary": "Set one or more configuration variables, such as your default org.",
    "description": "Use configuration variables to set CLI defaults, such as your default org or the API version you want the CLI to use. For example, if you set the \"target-org\" configuration variable, you don't need to specify it as a \"sf deploy metadata\" flag if you're deploying to your default org.\n\nLocal configuration variables apply only to your current project. Global variables, specified with the --global flag, apply in any Salesforce DX project.\n\nThe resolution order if you've set a flag value in multiple ways is as follows:\n\n    1. Flag value specified at the command line.\n    2. Local (project-level) configuration variable.\n    3. Global configuration variable.\n\nRun \"sf config list\" to see the configuration variables you've already set and their level (local or global).",
    "strict": true,
    "pluginName": "@salesforce/plugin-settings",
    "pluginAlias": "@salesforce/plugin-settings",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Set the local target-org configuration variable to an org username:\n<%= config.bin %> <%= command.id %> target-org=me@my.org",
      "Set the local target-org configuration variable to an alias:\n<%= config.bin %> <%= command.id %> target-org=my-scratch-org",
      "Set the global target-org configuration variable:\n<%= config.bin %> <%= command.id %> --global target-org=my-scratch-org",
      "Set a single configuration variable without using an equal sign; this syntax doesn't work when setting multiple configuration variables:\n<%= config.bin %> <%= command.id %> target-org me@my.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "global": {
        "name": "global",
        "type": "boolean",
        "char": "g",
        "summary": "Set the configuration variables globally, so they can be used from any Salesforce DX project.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "configurationVariablesSection": {
      "header": "CONFIGURATION VARIABLES",
      "body": [
        {
          "name": "org-instance-url",
          "description": "URL of the Salesforce instance hosting your org. Default: https://login.salesforce.com."
        },
        {
          "name": "org-api-version",
          "description": "API version of your project. Default: API version of your Dev Hub org."
        },
        {
          "name": "target-dev-hub",
          "description": "Username or alias of your default Dev Hub org. (sf only)"
        },
        {
          "name": "target-org",
          "description": "Username or alias of the org that all commands run against by default. (sf only)"
        },
        {
          "name": "org-isv-debugger-sid",
          "description": "ISV debugger SID."
        },
        {
          "name": "org-isv-debugger-url",
          "description": "ISV debugger URL."
        },
        {
          "name": "org-custom-metadata-templates",
          "description": "A valid repository URL or directory for the custom org metadata templates."
        },
        {
          "name": "org-max-query-limit",
          "description": "Maximum number of Salesforce records returned by a CLI command. Default: 10,000."
        }
      ]
    },
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "config:unset",
    "summary": "Unset local or global configuration variables.",
    "description": "Local configuration variables apply only to your current project. Global configuration variables apply in any Salesforce DX project.",
    "strict": true,
    "pluginName": "@salesforce/plugin-settings",
    "pluginAlias": "@salesforce/plugin-settings",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Unset the local \"target-org\" configuration variable:\n<%= config.bin %> <%= command.id %> target-org",
      "Unset multiple configuration variables globally:\n<%= config.bin %> <%= command.id %> target-org api-version --global"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "global": {
        "name": "global",
        "type": "boolean",
        "char": "g",
        "summary": "Unset the configuration variables globally, so they can no longer be used from any Salesforce DX project.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "configurationVariablesSection": {
      "header": "CONFIGURATION VARIABLES",
      "body": [
        {
          "name": "org-instance-url",
          "description": "URL of the Salesforce instance hosting your org. Default: https://login.salesforce.com."
        },
        {
          "name": "org-api-version",
          "description": "API version of your project. Default: API version of your Dev Hub org."
        },
        {
          "name": "target-dev-hub",
          "description": "Username or alias of your default Dev Hub org. (sf only)"
        },
        {
          "name": "target-org",
          "description": "Username or alias of the org that all commands run against by default. (sf only)"
        },
        {
          "name": "org-isv-debugger-sid",
          "description": "ISV debugger SID."
        },
        {
          "name": "org-isv-debugger-url",
          "description": "ISV debugger URL."
        },
        {
          "name": "org-custom-metadata-templates",
          "description": "A valid repository URL or directory for the custom org metadata templates."
        },
        {
          "name": "org-max-query-limit",
          "description": "Maximum number of Salesforce records returned by a CLI command. Default: 10,000."
        }
      ]
    },
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "data:create:record",
    "summary": "Create and insert a record into a Salesforce or Tooling API object.",
    "description": "You must specify a value for all required fields of the object.\n\nWhen specifying fields, use the format <fieldName>=<value>. Enclose all field-value pairs in one set of double quotation marks, delimited by spaces. Enclose values that contain spaces in single quotes.\n\nThis command inserts a record into Salesforce objects by default. Use the --use-tooling-api flag to insert into a Tooling API object.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Insert a record into the Account object of your default org; only the required Name field has a value:\n<%= config.bin %> <%= command.id %> --sobject Account --values \"Name=Acme\"",
      "Insert an Account record with values for two fields, one value contains a space; the command uses the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --sobject Account --values \"Name='Universal Containers' Website=www.example.com\" --target-org my-scratch",
      "Insert a record into the Tooling API object TraceFlag:\n<%= config.bin %> <%= command.id %> --use-tooling-api --sobject TraceFlag --values \"DebugLevelId=7dl170000008U36AAE StartDate=2022-12-15T00:26:04.000+0000 ExpirationDate=2022-12-15T00:56:04.000+0000 LogType=CLASS_TRACING TracedEntityId=01p17000000R6bLAAS\""
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Org alias or username to use for the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the Salesforce or Tooling API object that you're inserting a record into.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "sobjecttype"
        ]
      },
      "values": {
        "name": "values",
        "type": "option",
        "char": "v",
        "summary": "Values for the flags in the form <fieldName>=<value>, separate multiple pairs with spaces.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "use-tooling-api": {
        "name": "use-tooling-api",
        "type": "boolean",
        "char": "t",
        "summary": "Use Tooling API so you can insert a record in a Tooling API object.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "usetoolingapi"
        ]
      },
      "perflog": {
        "name": "perflog",
        "type": "boolean",
        "summary": "Get API performance data.",
        "description": "Gets data on API performance metrics from the server. The data is stored in $HOME/.sfdx/apiPerformanceLog.json.",
        "hidden": true,
        "allowNo": false,
        "deprecated": {
          "version": "57"
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "data:delete:bulk",
    "summary": "Bulk delete records from an org using a CSV file. Uses Bulk API 2.0.",
    "description": "The CSV file must have only one column (\"Id\") and then the list of record IDs you want to delete, one ID per line.\n\nWhen you execute this command, it starts a job, displays the ID, and then immediately returns control of the terminal to you by default. If you prefer to wait, set the --wait flag to the number of minutes; if it times out, the command outputs the IDs. Use the job ID to check the status of the job with the \"<%= config.bin %> data delete resume\" command.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Bulk delete Account records from your default org using the list of IDs in the \"files/delete.csv\" file:\n<%= config.bin %> <%= command.id %> --sobject Account --file files/delete.csv",
      "Bulk delete records from a custom object in an org with alias my-scratch and wait 5 minutes for the command to complete:\n<%= config.bin %> <%= command.id %> --sobject MyObject\\_\\_c --file files/delete.csv --wait 5 --target-org my-scratch"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Org alias or username to use for the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "summary": "CSV file that contains the IDs of the records to delete.",
        "required": true,
        "multiple": false,
        "aliases": [
          "csvfile"
        ]
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the Salesforce object, either standard or custom, that you want to delete records from.",
        "required": true,
        "multiple": false,
        "aliases": [
          "sobjecttype"
        ]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete before displaying the results.",
        "multiple": false,
        "exclusive": [
          "async"
        ],
        "default": {
          "quantity": 0,
          "unit": 0
        }
      },
      "async": {
        "name": "async",
        "type": "boolean",
        "char": "a",
        "summary": "Run the command asynchronously.",
        "allowNo": false,
        "exclusive": [
          "wait"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_baseFlags": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "data:delete:record",
    "summary": "Deletes a single record from a Salesforce or Tooling API object.",
    "description": "Specify the record you want to delete with either its ID or with a list of field-value pairs that identify the record. If your list of fields identifies more than one record, the delete fails; the error displays how many records were found.\n\nWhen specifying field-value pairs, use the format <fieldName>=<value>. Enclose all field-value pairs in one set of double quotation marks, delimited by spaces. Enclose values that contain spaces in single quotes.\n\nThis command deletes a record from Salesforce objects by default. Use the --use-tooling-api flag to delete from a Tooling API object.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Delete a record from Account with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --sobject Account --record-id 00180XX",
      "Delete a record from Account whose name equals \"Acme\":\n<%= config.bin %> <%= command.id %> --sobject Account --where \"Name=Acme\"",
      "Delete a record from Account identified with two field values, one that contains a space; the command uses the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --sobject Account --where \"Name='Universal Containers' Phone='(123) 456-7890'\" --target-org myscratch",
      "Delete a record from the Tooling API object TraceFlag with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --use-tooling-api --sobject TraceFlag --record-id 7tf8c"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Org alias or username to use for the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the Salesforce or Tooling API object that you're deleting a record from.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "sobjecttype"
        ]
      },
      "record-id": {
        "name": "record-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the record you’re deleting.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "sobjectid"
        ]
      },
      "where": {
        "name": "where",
        "type": "option",
        "char": "w",
        "summary": "List of <fieldName>=<value> pairs that identify the record you want to delete.",
        "multiple": false,
        "deprecateAliases": true
      },
      "use-tooling-api": {
        "name": "use-tooling-api",
        "type": "boolean",
        "char": "t",
        "summary": "Use Tooling API so you can delete a record from a Tooling API object.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "usetoolingapi"
        ]
      },
      "perflog": {
        "name": "perflog",
        "type": "boolean",
        "summary": "Get API performance data.",
        "description": "Gets data on API performance metrics from the server. The data is stored in $HOME/.sfdx/apiPerformanceLog.json.",
        "hidden": true,
        "allowNo": false,
        "deprecated": {
          "version": "57"
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "data:delete:resume",
    "summary": "Resume a bulk delete job that you previously started. Uses Bulk API 2.0.",
    "description": "The command uses the job ID returned by the \"<%= config.bin %> data delete bulk\" command or the most recently-run bulk delete job.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Resume a bulk delete job from your default org using an ID:\n<%= config.bin %> <%= command.id %> --job-id 750xx000000005sAAA",
      "Resume the most recently run bulk delete job for an org with alias my-scratch:\n<%= config.bin %> <%= command.id %> --use-most-recent --target-org my-scratch"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Org alias or username to use for the target org.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "job-id": {
        "name": "job-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the job you want to resume.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "jobid"
        ]
      },
      "use-most-recent": {
        "name": "use-most-recent",
        "type": "boolean",
        "summary": "Use the ID of the most recently-run bulk job.",
        "allowNo": false,
        "exclusive": [
          "job-id"
        ],
        "deprecateAliases": true
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "summary": "Number of minutes to wait for the command to complete before displaying the results.",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        },
        "deprecateAliases": true
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_baseFlags": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "data:export:tree",
    "summary": "Export data from an org into one or more JSON files.",
    "description": "Specify a SOQL query, either directly at the command line or read from a file, to retrieve the data you want to export. The exported data is written to JSON files in sObject tree format, which is a collection of nested, parent-child records with a single root record. Use these JSON files to import data into an org with the \"<%= config.bin %> data import tree\" command.\n\nIf your SOQL query references multiple objects, the command generates a single JSON file by default. You can specify the --plan flag to generate separate JSON files for each object and a plan definition file that aggregates them. You then specify just this plan definition file when you import the data into an org.\n\nThe SOQL query can return a maximum of 2,000 records. For more information, see the REST API Developer Guide. (https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_composite_sobject_tree.htm).",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Export records retrieved with the specified SOQL query into a single JSON file in the current directory; the command uses your default org:\n<%= config.bin %> <%= command.id %> --query \"SELECT Id, Name, (SELECT Name, Address__c FROM Properties__r) FROM Broker__c\"",
      "Export data using a SOQL query in the \"query.txt\" file and generate JSON files for each object and a plan that aggregates them:\n<%= config.bin %> <%= command.id %> --query query.txt --plan",
      "Prepend \"export-demo\" before each generated file and generate the files in the \"export-out\" directory; run the command on the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --query query.txt --plan --prefix export-demo --output-dir export-out --target-org my-scratch"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Org alias or username to use for the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "query": {
        "name": "query",
        "type": "option",
        "char": "q",
        "summary": "SOQL query, or filepath of a file that contains the query, to retrieve records.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "plan": {
        "name": "plan",
        "type": "boolean",
        "char": "p",
        "summary": "Generate multiple sObject tree files and a plan definition file for aggregated import.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "prefix": {
        "name": "prefix",
        "type": "option",
        "char": "x",
        "summary": "Prefix of generated files.",
        "multiple": false,
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory in which to generate the JSON files; default is current directory.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "outputdir"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "data:get:record",
    "summary": "Retrieve and display a single record of a Salesforce or Tooling API object.",
    "description": "Specify the record you want to retrieve with either its ID or with a list of field-value pairs that identify the record. If your list of fields identifies more than one record, the command fails; the error displays how many records were found.\n\nWhen specifying field-value pairs, use the format <fieldName>=<value>. Enclose all field-value pairs in one set of double quotation marks, delimited by spaces. Enclose values that contain spaces in single quotes.\n\nThe command displays all the record's fields and their values, one field per terminal line. Fields with no values are displayed as \"null\".\n\nThis command retrieves a record from Salesforce objects by default. Use the --use-tooling-api flag to retrieve from a Tooling API object.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Retrieve and display a record from Account with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --sobject Account --record-id 00180XX",
      "Retrieve a record from Account whose name equals \"Acme\":\n<%= config.bin %> <%= command.id %> --sobject Account --where \"Name=Acme\"",
      "Retrieve a record from Account identified with two field values, one that contains a space; the command uses the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --sobject Account --where \"Name='Universal Containers' Phone='(123) 456-7890'\" --target-org myscratch",
      "Retrieve a record from the Tooling API object TraceFlag with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --use-tooling-api --sobject TraceFlag --record-id 7tf8c"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Org alias or username to use for the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the Salesforce or Tooling API object that you're retrieving a record from.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "sobjecttype"
        ]
      },
      "record-id": {
        "name": "record-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the record you’re retrieving.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "sobjectid"
        ]
      },
      "where": {
        "name": "where",
        "type": "option",
        "char": "w",
        "summary": "List of <fieldName>=<value> pairs that identify the record you want to display.",
        "multiple": false,
        "deprecateAliases": true
      },
      "use-tooling-api": {
        "name": "use-tooling-api",
        "type": "boolean",
        "char": "t",
        "summary": "Use Tooling API so you can retrieve a record from a Tooling API object.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "usetoolingapi"
        ]
      },
      "perflog": {
        "name": "perflog",
        "type": "boolean",
        "summary": "Get API performance data.",
        "description": "Gets data on API performance metrics from the server. The data is stored in $HOME/.sfdx/apiPerformanceLog.json.",
        "hidden": true,
        "allowNo": false,
        "deprecated": {
          "version": "57"
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "data:import:tree",
    "summary": "Import data from one or more JSON files into an org.",
    "description": "The JSON files that contain the data are in sObject tree format, which is a collection of nested, parent-child records with a single root record. Use the \"<%= config.bin %> data export tree\" command to generate these JSON files.\n\nIf you used the --plan flag when exporting the data to generate a plan definition file, use the --plan flag to reference the file when you import. If you're not using a plan, use the --files flag to list the files. If you specify multiple JSON files that depend on each other in a parent-child relationship, be sure you list them in the correct order.\n\nThe sObject Tree API supports requests that contain up to 200 records. For more information, see the REST API Developer Guide. (https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_composite_sobject_tree.htm)",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Import the records contained in two JSON files into the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --files Contact.json,Account.json --target-org my-scratch",
      "Import records using a plan definition file into your default org:\n<%= config.bin %> <%= command.id %> --plan Account-Contact-plan.json"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Org alias or username to use for the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "files": {
        "name": "files",
        "type": "option",
        "char": "f",
        "summary": "Comma-separated and in-order JSON files that contain the records, in sObject tree format, that you want to insert.",
        "multiple": true,
        "exclusive": [
          "plan"
        ],
        "deprecateAliases": true,
        "aliases": [
          "sobjecttreefiles"
        ],
        "delimiter": ","
      },
      "plan": {
        "name": "plan",
        "type": "option",
        "char": "p",
        "summary": "Plan definition file to insert multiple data files.",
        "multiple": false,
        "deprecateAliases": true
      },
      "content-type": {
        "name": "content-type",
        "type": "option",
        "char": "c",
        "summary": "Content type of import files if their extention is not .json.",
        "hidden": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "contenttype"
        ]
      },
      "config-help": {
        "name": "config-help",
        "type": "boolean",
        "summary": "Display schema information for the --plan configuration file to stdout; if you specify this flag, all other flags except --json are ignored.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "confighelp"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "data:query",
    "summary": "Execute a SOQL query.",
    "description": "Specify the SOQL query at the command line with the --query flag or read the query from a file with the --file flag.\n\nIf your query returns more than 10,000 records, specify the --bulk flag. The command then runs the query using Bulk API 2.0, which has higher limits than the default API used by the command.\n\nWhen using --bulk, the command waits 3 minutes by default for the query to complete. Use the --wait parameter to specify a different number of minutes to wait, or set --wait to 0 to immediately return control to the terminal. If you set --wait to 0, or you use the --async flag, or the command simply times out, the command displays an ID. Pass this ID to the the \"data query resume\" command using the --bulk-query-id flag to get the results; pass the ID to the \"data resume\" command to get the job status.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Specify a SOQL query at the command line; the command uses your default org:\n<%= config.bin %> <%= command.id %> --query \"SELECT Id, Name, Account.Name FROM Contact\"",
      "Read the SOQL query from a file called \"query.txt\"; the command uses the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --file query.txt --target-org my-scratch",
      "Use Tooling API to run a query on the ApexTrigger Tooling API object:\n<%= config.bin %> <%= command.id %> --query \"SELECT Name FROM ApexTrigger\" --use-tooling-api",
      "Use Bulk API 2.0 to run a query that returns many rows, and return control to the terminal immediately:\n<%= config.bin %> <%= command.id %> --query \"SELECT Id FROM Contact\" --bulk --wait 0"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Org alias or username to use for the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "query": {
        "name": "query",
        "type": "option",
        "char": "q",
        "summary": "SOQL query to execute.",
        "multiple": false,
        "deprecateAliases": true
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "summary": "File that contains the SOQL query.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "soqlqueryfile"
        ]
      },
      "use-tooling-api": {
        "name": "use-tooling-api",
        "type": "boolean",
        "char": "t",
        "summary": "Use Tooling API so you can run queries on Tooling API objects.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "usetoolingapi"
        ]
      },
      "bulk": {
        "name": "bulk",
        "type": "boolean",
        "char": "b",
        "summary": "Use Bulk API 2.0 to run the query.",
        "allowNo": false,
        "exclusive": [
          "use-tooling-api"
        ],
        "deprecateAliases": true
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Time to wait for the command to finish, in minutes.",
        "multiple": false,
        "dependsOn": [
          "bulk"
        ],
        "exclusive": [
          "async"
        ],
        "deprecateAliases": true
      },
      "async": {
        "name": "async",
        "type": "boolean",
        "summary": "Use Bulk API 2.0, but don't wait for the job to complete.",
        "allowNo": false,
        "dependsOn": [
          "bulk"
        ],
        "exclusive": [
          "wait"
        ],
        "deprecateAliases": true
      },
      "result-format": {
        "name": "result-format",
        "type": "option",
        "char": "r",
        "summary": "Format to display the results; the --json flag overrides this flag.",
        "multiple": false,
        "options": [
          "human",
          "json",
          "csv"
        ],
        "default": "human",
        "deprecateAliases": true,
        "aliases": [
          "resultformat"
        ]
      },
      "perflog": {
        "name": "perflog",
        "type": "boolean",
        "summary": "Get API performance data.",
        "description": "Gets data on API performance metrics from the server. The data is stored in $HOME/.sfdx/apiPerformanceLog.json.",
        "hidden": true,
        "allowNo": false,
        "deprecated": {
          "version": "57"
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "data:query:resume",
    "summary": "View the status of a bulk query.",
    "description": "Run this command using the job ID returned from the \"<%= config.bin %> data query --bulk\" command.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "View the status of a bulk query with the specified ID:\n<%= config.bin %> <%= command.id %> --bulk-query-id 7500x000005BdFzXXX"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Org alias or username to use for the target org.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "result-format": {
        "name": "result-format",
        "type": "option",
        "char": "r",
        "summary": "Format to display the results; the --json flag overrides this flag.",
        "multiple": false,
        "options": [
          "human",
          "json",
          "csv"
        ],
        "default": "human",
        "deprecateAliases": true,
        "aliases": [
          "resultformat"
        ]
      },
      "bulk-query-id": {
        "name": "bulk-query-id",
        "type": "option",
        "char": "i",
        "summary": "Job ID of the bulk query.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "bulkqueryid"
        ]
      },
      "use-most-recent": {
        "name": "use-most-recent",
        "type": "boolean",
        "char": "r",
        "summary": "Use the most recent bulk query ID from cache.",
        "allowNo": false,
        "exclusive": [
          "bulk-query-id"
        ],
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "data:resume",
    "summary": "View the status of a bulk data load job or batch.",
    "description": "Run this command using the job ID or batch ID returned from the \"<%= config.bin %> data delete bulk\" or \"<%= config.bin %> data upsert bulk\" commands.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "View the status of a bulk load job:\n<%= config.bin %> <%= command.id %> --job-id 750xx000000005sAAA",
      "View the status of a bulk load job and a specific batches:\n<%= config.bin %> <%= command.id %> --job-id 750xx000000005sAAA --batch-id 751xx000000005nAAA"
    ],
    "deprecationOptions": {
      "to": "force:data:bulk:status",
      "message": "Use force:data:bulk:status instead"
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Org alias or username to use for the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "batch-id": {
        "name": "batch-id",
        "type": "option",
        "char": "b",
        "summary": "ID of the batch whose status you want to view; you must also specify the job ID.",
        "multiple": false,
        "aliases": [
          "batchid"
        ]
      },
      "job-id": {
        "name": "job-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the job whose status you want to view.",
        "required": true,
        "multiple": false,
        "aliases": [
          "jobid"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "data:update:record",
    "summary": "Updates a single record of a Salesforce or Tooling API object.",
    "description": "Specify the record you want to update with either its ID or with a list of field-value pairs that identify the record. If your list of fields identifies more than one record, the delete fails; the error displays how many records were found.\n\nWhen using field-value pairs for both identifying the record and specifiyng the new field values, use the format <fieldName>=<value>. Enclose all field-value pairs in one set of double quotation marks, delimited by spaces. Enclose values that contain spaces in single quotes.\n\nThis command updates a record in Salesforce objects by default. Use the --use-tooling-api flag to update a Tooling API object.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Update the Name field of an Account record with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --sobject Account --record-id 001D0 --values \"Name=NewAcme\"",
      "Update the Name field of an Account record whose current name is 'Old Acme':\n<%= config.bin %> <%= command.id %> --sobject Account --where \"Name='Old Acme'\" --values \"Name='New Acme'\"",
      "Update the Name and Website fields of an Account record with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --sobject Account --record-id 001D0 --values \"Name='Acme III' Website=www.example.com\"",
      "Update the ExpirationDate field of a record of the Tooling API object TraceFlag using the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> -t --sobject TraceFlag --record-id 7tf170000009cUBAAY --values \"ExpirationDate=2017-12-01T00:58:04.000+0000\""
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Org alias or username to use for the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the Salesforce or Tooling API object that contains the record you're updating.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "sobjecttype"
        ]
      },
      "record-id": {
        "name": "record-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the record you’re updating.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "sobjectid"
        ]
      },
      "where": {
        "name": "where",
        "type": "option",
        "char": "w",
        "summary": "List of <fieldName>=<value> pairs that identify the record you want to update.",
        "multiple": false,
        "deprecateAliases": true
      },
      "values": {
        "name": "values",
        "type": "option",
        "char": "v",
        "summary": "Fields that you're updating, in the format of <fieldName>=<value> pairs.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "use-tooling-api": {
        "name": "use-tooling-api",
        "type": "boolean",
        "char": "t",
        "summary": "Use Tooling API so you can update a record in a Tooling API object.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "usetoolingapi"
        ]
      },
      "perflog": {
        "name": "perflog",
        "type": "boolean",
        "summary": "Get API performance data.",
        "hidden": true,
        "allowNo": false,
        "deprecated": {
          "version": "57"
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "data:upsert:bulk",
    "summary": "Bulk upsert records to an org from a CSV file. Uses Bulk API 2.0.",
    "description": "An upsert refers to inserting a record into a Salesforce object if the record doesn't already exist, or updating it if it does exist.\n\nWhen you execute this command, it starts a job, displays the ID, and then immediately returns control of the terminal to you by default. If you prefer to wait, set the --wait flag to the number of minutes; if it times out, the command outputs the IDs. Use the job and batch IDs to check the status of the job with the \"<%= config.bin %> data upsert resume\" command.\n\nSee \"Prepare CSV Files\" in the Bulk API Developer Guide for details on formatting your CSV file. (https://developer.salesforce.com/docs/atlas.en-us.api_asynch.meta/api_asynch/datafiles_prepare_csv.htm)",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Bulk upsert records to the Contact object in your default org:\n<%= config.bin %> <%= command.id %> --sobject Contact --file files/contacts.csv --external-id Id",
      "Bulk upsert records to a custom object in an org with alias my-scratch and wait 5 minutes for the command to complete:\n<%= config.bin %> <%= command.id %> --sobject MyObject**c --file files/file.csv --external-id MyField**c --wait 5 --target-org my-scratch"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Org alias or username to use for the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "summary": "CSV file that contains the IDs of the records to delete.",
        "required": true,
        "multiple": false,
        "aliases": [
          "csvfile"
        ]
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the Salesforce object, either standard or custom, that you want to delete records from.",
        "required": true,
        "multiple": false,
        "aliases": [
          "sobjecttype"
        ]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete before displaying the results.",
        "multiple": false,
        "exclusive": [
          "async"
        ],
        "default": {
          "quantity": 0,
          "unit": 0
        }
      },
      "async": {
        "name": "async",
        "type": "boolean",
        "char": "a",
        "summary": "Run the command asynchronously.",
        "allowNo": false,
        "exclusive": [
          "wait"
        ]
      },
      "external-id": {
        "name": "external-id",
        "type": "option",
        "char": "i",
        "summary": "Name of the external ID field, or the Id field.",
        "required": true,
        "multiple": false,
        "aliases": [
          "externalid"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "_baseFlags": {},
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "data:upsert:resume",
    "summary": "Resume a bulk upsert job that you previously started. Uses Bulk API 2.0.",
    "description": "The command uses the job ID returned from the \"<%= config.bin %> data upsert bulk\" command or the most recently-run bulk upsert job.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Resume a bulk upsert job from your default org using an ID:\n<%= config.bin %> <%= command.id %> --job-id 750xx000000005sAAA",
      "Resume the most recently run bulk upsert job for an org with alias my-scratch:\n<%= config.bin %> <%= command.id %> --use-most-recent --target-org my-scratch"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Org alias or username to use for the target org.",
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "job-id": {
        "name": "job-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the job you want to resume.",
        "multiple": false,
        "aliases": [
          "jobid"
        ]
      },
      "use-most-recent": {
        "name": "use-most-recent",
        "type": "boolean",
        "summary": "Use the ID of the most recently-run bulk job.",
        "allowNo": false,
        "exclusive": [
          "job-id"
        ]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "summary": "Number of minutes to wait for the command to complete before displaying the results.",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        }
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_baseFlags": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "deploy",
    "summary": "Deploy a project interactively to any Salesforce environment.",
    "description": "This command must be run from within a project.\n\nThe command first analyzes your project, your active or logged-into environments, and local defaults to determine what to deploy and where to deploy it. The command then prompts you for information about this particular deployment and provides intelligent choices based on its analysis.\n\nFor example, if your local project contains a source directory with metadata files in source format, the command asks if you want to deploy that Salesforce app to an org. The command lists your connected orgs and asks which one you want to deploy to. The list of orgs starts with scratch orgs, ordered by expiration date with the most recently created one first, and then Dev Hub and production orgs ordered by name. If the command finds Apex tests, it asks if you want to run them and at which level.\n\nThe command stores your responses in the \"deploy-options.json\" file in your local project directory and uses them as defaults when you rerun the command. Specify --interactive to force the command to reprompt.\n\nUse this command for quick and simple deploys. For more complicated deployments, use the environment-specific commands, such as \"<%= config.bin %> project deploy start\", that provide additional flags.",
    "strict": true,
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "Deploy a project and use stored values from a previous command run:\n<%= config.bin %> <%= command.id %>",
      "Reprompt for all deployment inputs:\n<%= config.bin %> <%= command.id %> --interactive"
    ],
    "deprecationOptions": {
      "version": "59.0",
      "message": "The top-level deploy command is deprecated. You should use `functions deploy` to deploy functions, and use `project deploy start` to deploy metadata to Salesforce orgs."
    },
    "flags": {
      "interactive": {
        "name": "interactive",
        "type": "boolean",
        "summary": "Force the CLI to prompt for all deployment inputs.",
        "allowNo": false
      }
    },
    "args": {},
    "_enableJsonFlag": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "project:deploy:start",
    "summary": "Deploy metadata to an org from your local project.",
    "description": "You must run this command from within a project.\n\nMetadata components are deployed in source format by default. Deploy them in metadata format by specifying the --metadata-dir flag, which specifies the root directory or ZIP file that contains the metadata formatted files you want to deploy.\n\nIf your org allows source tracking, then this command tracks the changes in your source. Some orgs, such as production org, never allow source tracking. Source tracking is enabled by default on scratch and sandbox orgs; you can disable source tracking when you create the orgs by specifying the --no-track-source flag on the \"<%= config.bin %> org create scratch|sandbox\" commands.\n\nTo deploy multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.",
    "strict": true,
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Deploy local changes not in the org; uses your default org:\n<%= config.bin %> <%= command.id %>",
      "Deploy the source files in a directory to an org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %>  --source-dir path/to/source --target-org my-scratch",
      "Deploy a specific Apex class and the objects whose source is in a directory (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --source-dir path/to/apex/classes/MyClass.cls path/to/source/objects\n<%= config.bin %> <%= command.id %> --source-dir path/to/apex/classes/MyClass.cls --source-dir path/to/source/objects",
      "Deploy all Apex classes:\n<%= config.bin %> <%= command.id %> --metadata ApexClass",
      "Deploy a specific Apex class:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass",
      "Deploy all custom objects and Apex classes (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --metadata CustomObject ApexClass\n<%= config.bin %> <%= command.id %> --metadata CustomObject --metadata ApexClass",
      "Deploy all Apex classes and a profile that has a space in its name:\n<%= config.bin %> <%= command.id %> --metadata ApexClass --metadata \"Profile:My Profile\"",
      "Deploy all components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml",
      "Run the tests that aren’t in any managed packages as part of a deployment:\n<%= config.bin %> <%= command.id %> --metadata ApexClass --test-level RunLocalTests"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "char": "a",
        "summary": "Target API version for the deploy.",
        "description": "Use this flag to override the default API version with the API version of your package.xml file. The default API version is the latest version supported by the CLI.",
        "multiple": false,
        "deprecateAliases": true
      },
      "async": {
        "name": "async",
        "type": "boolean",
        "summary": "Run the command asynchronously.",
        "description": "The command immediately returns the job ID and control of the terminal to you. This way, you can continue to use the CLI. To resume the deployment, run \"<%= config.bin %> project deploy resume\". To check the status of the deployment, run \"<%= config.bin %> project deploy report\".",
        "allowNo": false,
        "exclusive": [
          "wait"
        ],
        "deprecateAliases": true
      },
      "concise": {
        "name": "concise",
        "type": "boolean",
        "summary": "Show concise output of the deploy result.",
        "allowNo": false,
        "exclusive": [
          "verbose"
        ],
        "deprecateAliases": true
      },
      "dry-run": {
        "name": "dry-run",
        "type": "boolean",
        "summary": "Validate deploy and run Apex tests but don’t save to the org.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "ignore-conflicts": {
        "name": "ignore-conflicts",
        "type": "boolean",
        "char": "c",
        "summary": "Ignore conflicts and deploy local files, even if they overwrite changes in the org.",
        "description": "This flag applies only to orgs that allow source tracking. It has no effect on orgs that don't allow it, such as production orgs.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "ignore-errors": {
        "name": "ignore-errors",
        "type": "boolean",
        "char": "r",
        "summary": "Ignore any errors and don’t roll back deployment.",
        "description": "When deploying to a production org, keep this flag set to false (default value). When set to true, components without errors are deployed and components with errors are skipped, and could result in an inconsistent production org.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "ignore-warnings": {
        "name": "ignore-warnings",
        "type": "boolean",
        "char": "g",
        "summary": "Ignore warnings and allow a deployment to complete successfully.",
        "description": "If a warning occurs and this flag is set to true, the success status of the deployment is set to true. When this flag is set to false, success is set to false, and the warning is treated like an error.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "manifest": {
        "name": "manifest",
        "type": "option",
        "char": "x",
        "summary": "Full file path for manifest (package.xml) of components to deploy.",
        "description": "All child components are included. If you specify this flag, don’t specify --metadata or --source-dir.",
        "multiple": false,
        "exclusive": [
          "source-dir",
          "metadata",
          "metadata-dir"
        ],
        "deprecateAliases": true
      },
      "metadata": {
        "name": "metadata",
        "type": "option",
        "char": "m",
        "summary": "Metadata component names to deploy.",
        "multiple": true,
        "exclusive": [
          "manifest",
          "source-dir",
          "metadata-dir"
        ],
        "deprecateAliases": true
      },
      "metadata-dir": {
        "name": "metadata-dir",
        "type": "option",
        "summary": "Root of directory or zip file of metadata formatted files to deploy.",
        "multiple": false,
        "exclusive": [
          "manifest",
          "source-dir",
          "metadata"
        ],
        "deprecateAliases": true
      },
      "single-package": {
        "name": "single-package",
        "type": "boolean",
        "summary": "Indicates that the metadata zip file points to a directory structure for a single package.",
        "allowNo": false,
        "dependsOn": [
          "metadata-dir"
        ],
        "deprecateAliases": true
      },
      "source-dir": {
        "name": "source-dir",
        "type": "option",
        "char": "d",
        "summary": "Path to the local source files to deploy.",
        "description": "The supplied path can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its subdirectories).\n\nIf you specify this flag, don’t specify --metadata or --manifest.",
        "multiple": true,
        "exclusive": [
          "manifest",
          "metadata",
          "metadata-dir"
        ],
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Login username or alias for the target org.",
        "description": "Overrides your default org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "tests": {
        "name": "tests",
        "type": "option",
        "char": "t",
        "summary": "Apex tests to run when --test-level is RunSpecifiedTests.",
        "description": "If a test name contains a space, enclose it in double quotes.\nFor multiple test names, use one of the following formats:\n\n- Repeat the flag for multiple test names: --tests Test1 --tests Test2 --tests \"Test With Space\"\n- Separate the test names with spaces: --tests Test1 Test2 \"Test With Space\"",
        "multiple": true,
        "deprecateAliases": true
      },
      "test-level": {
        "name": "test-level",
        "type": "option",
        "char": "l",
        "summary": "Deployment Apex testing level.",
        "description": "Valid values are:\n\n- NoTestRun — No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\n\n- RunSpecifiedTests — Runs only the tests that you specify with the --run-tests flag. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\n\n- RunLocalTests — All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\n\n- RunAllTestsInOrg — All tests in your org are run, including tests of managed packages.\n\n  If you don’t specify a test level, the default behavior depends on the contents of your deployment package and target org. For more information, see [Running Tests in a Deployment](https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_deploy_running_tests.htm) in the \"Metadata API Developer Guide\".",
        "multiple": false,
        "options": [
          "NoTestRun",
          "RunSpecifiedTests",
          "RunLocalTests",
          "RunAllTestsInOrg"
        ],
        "deprecateAliases": true
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Show verbose output of the deploy result.",
        "allowNo": false,
        "exclusive": [
          "concise"
        ],
        "deprecateAliases": true
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for command to complete and display results.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you and returns the job ID. To resume the deployment, run \"<%= config.bin %> project deploy resume\". To check the status of the deployment, run \"<%= config.bin %> project deploy report\".",
        "helpValue": "<minutes>",
        "multiple": false,
        "exclusive": [
          "async"
        ],
        "default": {
          "quantity": 33,
          "unit": 0
        },
        "deprecateAliases": true
      },
      "purge-on-delete": {
        "name": "purge-on-delete",
        "type": "boolean",
        "summary": "Specify that deleted components in the destructive changes manifest file are immediately eligible for deletion rather than being stored in the Recycle Bin.",
        "allowNo": false,
        "dependsOn": [
          "manifest"
        ],
        "relationships": [
          {
            "type": "some",
            "flags": [
              "pre-destructive-changes",
              "post-destructive-changes"
            ]
          }
        ],
        "deprecateAliases": true
      },
      "pre-destructive-changes": {
        "name": "pre-destructive-changes",
        "type": "option",
        "summary": "File path for a manifest (destructiveChangesPre.xml) of components to delete before the deploy",
        "multiple": false,
        "dependsOn": [
          "manifest"
        ],
        "deprecateAliases": true
      },
      "post-destructive-changes": {
        "name": "post-destructive-changes",
        "type": "option",
        "summary": "File path for a manifest (destructiveChangesPost.xml) of components to delete after the deploy.",
        "multiple": false,
        "dependsOn": [
          "manifest"
        ],
        "deprecateAliases": true
      },
      "coverage-formatters": {
        "name": "coverage-formatters",
        "type": "option",
        "summary": "Format of the code coverage results.",
        "description": "For multiple formatters, repeat the flag for each formatter.\n--coverage-formatters lcov --coverage-formatters clover",
        "multiple": true,
        "options": [
          "clover",
          "cobertura",
          "html-spa",
          "html",
          "json",
          "json-summary",
          "lcovonly",
          "none",
          "teamcity",
          "text",
          "text-summary"
        ],
        "deprecateAliases": true
      },
      "junit": {
        "name": "junit",
        "type": "boolean",
        "summary": "Output JUnit test results.",
        "allowNo": false,
        "dependsOn": [
          "coverage-formatters"
        ],
        "deprecateAliases": true
      },
      "results-dir": {
        "name": "results-dir",
        "type": "option",
        "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
        "multiple": false,
        "dependsOn": [
          "coverage-formatters"
        ],
        "deprecateAliases": true
      }
    },
    "args": {},
    "configurationVariablesSection": {
      "header": "CONFIGURATION VARIABLES",
      "body": [
        {
          "name": "target-org",
          "description": "Username or alias of the org that all commands run against by default. (sf only)"
        },
        {
          "name": "org-api-version",
          "description": "API version of your project. Default: API version of your Dev Hub org."
        }
      ]
    },
    "envVariablesSection": {
      "header": "ENVIRONMENT VARIABLES",
      "body": [
        {
          "name": "SF_TARGET_ORG",
          "description": "Username or alias of your default org. Overrides the target-org configuration variable."
        },
        {
          "name": "SF_USE_PROGRESS_BAR",
          "description": "Set to false to disable the progress bar when running the metadata deploy command."
        }
      ]
    },
    "errorCodes": {
      "header": "ERROR CODES",
      "body": [
        {
          "name": "Succeeded (0)",
          "description": "The deploy succeeded."
        },
        {
          "name": "Canceled (1)",
          "description": "The deploy was canceled."
        },
        {
          "name": "Failed (1)",
          "description": "The deploy failed."
        },
        {
          "name": "SucceededPartial (68)",
          "description": "The deploy partially succeeded."
        },
        {
          "name": "InProgress (69)",
          "description": "The deploy is in progress."
        },
        {
          "name": "Pending (69)",
          "description": "The deploy is pending."
        },
        {
          "name": "Canceling (69)",
          "description": "The deploy is being canceled."
        }
      ]
    },
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "project:deploy:cancel",
    "summary": "Cancel a deploy operation.",
    "description": "Use this command to cancel a deploy operation that hasn't yet completed in the org. Deploy operations include standard deploys, quick deploys, deploy validations, and deploy cancellations.\n\nRun this command by either passing it a job ID or specifying the --use-most-recent flag to use the job ID of the most recent deploy operation.",
    "strict": true,
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Cancel a deploy operation using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2",
      "Cancel the most recent deploy operation:\n<%= config.bin %> <%= command.id %> --use-most-recent"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "async": {
        "name": "async",
        "type": "boolean",
        "summary": "Run the command asynchronously.",
        "description": "The command immediately returns the control of the terminal to you. This way, you can continue to use the CLI. To resume watching the cancellation, run \"<%= config.bin %> project deploy resume\". To check the status of the cancellation, run \"<%= config.bin %> project deploy report\".",
        "allowNo": false,
        "exclusive": [
          "wait"
        ],
        "deprecateAliases": true
      },
      "job-id": {
        "name": "job-id",
        "type": "option",
        "char": "i",
        "summary": "Job ID of the deploy operation you want to cancel.",
        "description": "These commands return a job ID if they time out or you specified the --async flag:\n\n- <%= config.bin %> project deploy start\n- <%= config.bin %> project deploy validate\n- <%= config.bin %> project deploy quick\n- <%= config.bin %> project deploy cancel\n\nThe job ID is valid for 10 days from when you started the deploy operation.",
        "multiple": false,
        "deprecateAliases": true
      },
      "use-most-recent": {
        "name": "use-most-recent",
        "type": "boolean",
        "char": "r",
        "summary": "Use the job ID of the most recent deploy operation.",
        "description": "For performance reasons, this flag uses job IDs for deploy operations that started only in the past 3 days or less. If your most recent deploy operations was more than 3 days ago, this flag won't find a job ID.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete and display results.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you. To resume watching the cancellation, run \"<%= config.bin %> project deploy resume\". To check the status of the cancellation, run \"<%= config.bin %> project deploy report\".",
        "helpValue": "<minutes>",
        "multiple": false,
        "exclusive": [
          "async"
        ],
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "project:deploy:preview",
    "summary": "Preview a deployment to see what will deploy to the org, the potential conflicts, and the ignored files.",
    "description": "You must run this command from within a project.\n\nThe command outputs a table that describes what will happen if you run the \"<%= config.bin %> project deploy start\" command. The table lists the metadata components that will be deployed and deleted. The table also lists the current conflicts between files in your local project and components in the org. Finally, the table lists the files that won't be deployed because they're included in your .forceignore file.\n\nIf your org allows source tracking, then this command displays potential conflicts between the org and your local project. Some orgs, such as production org, never allow source tracking. Source tracking is enabled by default on scratch and sandbox orgs; you can disable source tracking when you create the orgs by specifying the --no-track-source flag on the \"<%= config.bin %> org create scratch|sandbox\" commands.\n\nTo preview the deployment of multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.",
    "strict": true,
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "NOTE: The commands to preview a deployment and actually deploy it use similar flags. We provide a few preview examples here, but see the help for \"<%= config.bin %> project deploy start\" for more examples that you can adapt for previewing.",
      "Preview the deployment of source files in a directory, such as force-app, to your default org:\n<%= config.bin %> <%= command.id %>  --source-dir force-app",
      "Preview the deployment of all Apex classes to an org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --metadata ApexClass --target-org my-scratch",
      "Preview deployment of a specific Apex class:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass",
      "Preview deployment of all components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "ignore-conflicts": {
        "name": "ignore-conflicts",
        "type": "boolean",
        "char": "c",
        "summary": "Don't display conflicts in preview of the deployment.",
        "description": "This flag applies only to orgs that allow source tracking. It has no effect on orgs that don't allow it, such as production orgs.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "manifest": {
        "name": "manifest",
        "type": "option",
        "char": "x",
        "summary": "Full file path for manifest (package.xml) of components to preview.",
        "description": "All child components are included. If you specify this flag, don’t specify --metadata or --source-dir.",
        "multiple": false,
        "exclusive": [
          "source-dir",
          "metadata"
        ],
        "deprecateAliases": true
      },
      "metadata": {
        "name": "metadata",
        "type": "option",
        "char": "m",
        "summary": "Metadata component names to preview.",
        "multiple": true,
        "exclusive": [
          "manifest",
          "source-dir"
        ],
        "deprecateAliases": true
      },
      "source-dir": {
        "name": "source-dir",
        "type": "option",
        "char": "d",
        "summary": "Path to the local source files to preview.",
        "description": "The supplied path can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its subdirectories).\n\nIf you specify this flag, don’t specify --metadata or --manifest.",
        "multiple": true,
        "exclusive": [
          "manifest",
          "metadata"
        ],
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Login username or alias for the target org.",
        "description": "Overrides your default org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "project:deploy:quick",
    "summary": "Quickly deploy a validated deployment to an org.",
    "description": "Before you run this command, first create a validated deployment with the \"<%= config.bin %> project deploy validate\" command, which returns a job ID. Validated deployments haven't been deployed to the org yet; you deploy them with this command. Either pass the job ID to this command or use the --use-most-recent flag to use the job ID of the most recently validated deployment. For the quick deploy to succeed, the associated validated deployment must also have succeeded.\n\nExecuting this quick deploy command takes less time than a standard deploy because it skips running Apex tests. These tests were previously run as part of the validation. Validating first and then running a quick deploy is useful if the deployment to your production org take several hours and you don’t want to risk a failed deploy.\n\nThis command doesn't support source-tracking. The source you deploy overwrites the corresponding metadata in your org. This command doesn’t attempt to merge your source with the versions in your org.",
    "strict": true,
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Run a quick deploy to your default org using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2",
      "Asynchronously run a quick deploy of the most recently validated deployment to an org with alias \"my-prod-org\":\n<%= config.bin %> <%= command.id %> --async --use-most-recent --target-org my-prod-org"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "async": {
        "name": "async",
        "type": "boolean",
        "summary": "Run the command asynchronously.",
        "description": "The command immediately returns the control of the terminal to you. This way, you can continue to use the CLI. To resume watching the deploy, run \"<%= config.bin %> project deploy resume\". To check the status of the deploy, run \"<%= config.bin %> project deploy report\".",
        "allowNo": false,
        "exclusive": [
          "wait"
        ],
        "deprecateAliases": true
      },
      "concise": {
        "name": "concise",
        "type": "boolean",
        "summary": "Show concise output of the deploy result.",
        "allowNo": false,
        "exclusive": [
          "verbose"
        ],
        "deprecateAliases": true
      },
      "job-id": {
        "name": "job-id",
        "type": "option",
        "char": "i",
        "summary": "Job ID of the deployment you want to quick deploy.",
        "description": "The job ID is valid for 10 days from when you started the validation.",
        "multiple": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Login username or alias for the target org.",
        "description": "Overrides your default org.",
        "multiple": false,
        "deprecateAliases": true
      },
      "use-most-recent": {
        "name": "use-most-recent",
        "type": "boolean",
        "char": "r",
        "summary": "Use the job ID of the most recently validated deployment.",
        "description": "For performance reasons, this flag uses only job IDs that were validated in the past 3 days or less. If your most recent deployment validation was more than 3 days ago, this flag won't find a job ID.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Show verbose output of the deploy result.",
        "allowNo": false,
        "exclusive": [
          "concise"
        ],
        "deprecateAliases": true
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete and display results.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you. To resume watching the deploy, run \"<%= config.bin %> project deploy resume\". To check the status of the deploy, run \"<%= config.bin %> project deploy report\".",
        "helpValue": "<minutes>",
        "multiple": false,
        "exclusive": [
          "async"
        ],
        "default": {
          "quantity": 33,
          "unit": 0
        },
        "deprecateAliases": true
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "char": "a",
        "summary": "Target API version for the deploy.",
        "description": "Use this flag to override the default API version with the API version of your package.xml file. The default API version is the latest version supported by the CLI.",
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "errorCodes": {
      "header": "ERROR CODES",
      "body": [
        {
          "name": "Succeeded (0)",
          "description": "The deploy succeeded."
        },
        {
          "name": "Canceled (1)",
          "description": "The deploy was canceled."
        },
        {
          "name": "Failed (1)",
          "description": "The deploy failed."
        },
        {
          "name": "SucceededPartial (68)",
          "description": "The deploy partially succeeded."
        },
        {
          "name": "InProgress (69)",
          "description": "The deploy is in progress."
        },
        {
          "name": "Pending (69)",
          "description": "The deploy is pending."
        },
        {
          "name": "Canceling (69)",
          "description": "The deploy is being canceled."
        }
      ]
    },
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "project:deploy:report",
    "summary": "Check the status of a deploy operation.",
    "description": "Deploy operations include standard deploys, quick deploys, deploy validations, and deploy cancellations.\n\nRun this command by either passing it a job ID or specifying the --use-most-recent flag to use the job ID of the most recent deploy operation.",
    "strict": true,
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Check the status using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2",
      "Check the status of the most recent deploy operation:\n<%= config.bin %> <%= command.id %> --use-most-recent"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "job-id": {
        "name": "job-id",
        "type": "option",
        "char": "i",
        "summary": "Job ID of the deploy operation you want to check the status of.",
        "description": "These commands return a job ID if they time out or you specified the --async flag:\n\n- <%= config.bin %> project deploy start\n- <%= config.bin %> project deploy validate\n- <%= config.bin %> project deploy quick\n- <%= config.bin %> project deploy cancel\n\nThe job ID is valid for 10 days from when you started the deploy operation.",
        "multiple": false,
        "deprecateAliases": true
      },
      "use-most-recent": {
        "name": "use-most-recent",
        "type": "boolean",
        "char": "r",
        "summary": "Use the job ID of the most recent deploy operation.",
        "description": "For performance reasons, this flag uses job IDs for deploy operations that started only in the past 3 days or less. If your most recent operation was more than 3 days ago, this flag won't find a job ID.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "coverage-formatters": {
        "name": "coverage-formatters",
        "type": "option",
        "summary": "Format of the code coverage results.",
        "description": "For multiple formatters, repeat the flag for each formatter.\n--coverage-formatters lcov --coverage-formatters clover",
        "multiple": true,
        "options": [
          "clover",
          "cobertura",
          "html-spa",
          "html",
          "json",
          "json-summary",
          "lcovonly",
          "none",
          "teamcity",
          "text",
          "text-summary"
        ],
        "deprecateAliases": true
      },
      "junit": {
        "name": "junit",
        "type": "boolean",
        "summary": "Output JUnit test results.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "results-dir": {
        "name": "results-dir",
        "type": "option",
        "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
        "multiple": false,
        "dependsOn": [
          "junit",
          "coverage-formatters"
        ],
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "project:deploy:resume",
    "summary": "Resume watching a deploy operation.",
    "description": "Use this command to resume watching a deploy operation if the original command times out or you specified the --async flag. Deploy operations include standard deploys, quick deploys, deploy validations, and deploy cancellations. This command doesn't resume the original operation itself, because the operation always continues after you've started it, regardless of whether you're watching it or not.\n\nRun this command by either passing it a job ID or specifying the --use-most-recent flag to use the job ID of the most recent deploy operation.",
    "strict": true,
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Resume watching a deploy operation using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2",
      "Resume watching the most recent deploy operation:\n<%= config.bin %> <%= command.id %> --use-most-recent"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "concise": {
        "name": "concise",
        "type": "boolean",
        "summary": "Show concise output of the deploy operation result.",
        "allowNo": false,
        "exclusive": [
          "verbose"
        ],
        "deprecateAliases": true
      },
      "job-id": {
        "name": "job-id",
        "type": "option",
        "char": "i",
        "summary": "Job ID of the deploy operation you want to resume.",
        "description": "These commands return a job ID if they time out or you specified the --async flag:\n\n- <%= config.bin %> project deploy start\n- <%= config.bin %> project deploy validate\n- <%= config.bin %> project deploy quick\n- <%= config.bin %> project deploy cancel\n\nThe job ID is valid for 10 days from when you started the deploy operation.",
        "multiple": false,
        "deprecateAliases": true
      },
      "use-most-recent": {
        "name": "use-most-recent",
        "type": "boolean",
        "char": "r",
        "summary": "Use the job ID of the most recent deploy operation.",
        "description": "For performance reasons, this flag uses job IDs for deploy operations that started only in the past 3 days or less. If your most recent operation was more than 3 days ago, this flag won't find a job ID.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Show verbose output of the deploy operation result.",
        "allowNo": false,
        "exclusive": [
          "concise"
        ],
        "deprecateAliases": true
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete and display results.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you. To resume watching the deploy operation, run this command again. To check the status of the deploy operation, run \"<%= config.bin %> project deploy report\".",
        "helpValue": "<minutes>",
        "multiple": false,
        "deprecateAliases": true
      },
      "coverage-formatters": {
        "name": "coverage-formatters",
        "type": "option",
        "summary": "Format of the code coverage results.",
        "description": "For multiple formatters, repeat the flag for each formatter.\n--coverage-formatters lcov --coverage-formatters clover",
        "multiple": true,
        "options": [
          "clover",
          "cobertura",
          "html-spa",
          "html",
          "json",
          "json-summary",
          "lcovonly",
          "none",
          "teamcity",
          "text",
          "text-summary"
        ],
        "deprecateAliases": true
      },
      "junit": {
        "name": "junit",
        "type": "boolean",
        "summary": "Output JUnit test results.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "results-dir": {
        "name": "results-dir",
        "type": "option",
        "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
        "multiple": false,
        "dependsOn": [
          "junit",
          "coverage-formatters"
        ],
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "envVariablesSection": {
      "header": "ENVIRONMENT VARIABLES",
      "body": [
        {
          "name": "SF_USE_PROGRESS_BAR",
          "description": "Set to false to disable the progress bar when running the metadata deploy command."
        }
      ]
    },
    "errorCodes": {
      "header": "ERROR CODES",
      "body": [
        {
          "name": "Succeeded (0)",
          "description": "The deploy succeeded."
        },
        {
          "name": "Canceled (1)",
          "description": "The deploy was canceled."
        },
        {
          "name": "Failed (1)",
          "description": "The deploy failed."
        },
        {
          "name": "SucceededPartial (68)",
          "description": "The deploy partially succeeded."
        },
        {
          "name": "InProgress (69)",
          "description": "The deploy is in progress."
        },
        {
          "name": "Pending (69)",
          "description": "The deploy is pending."
        },
        {
          "name": "Canceling (69)",
          "description": "The deploy is being canceled."
        }
      ]
    },
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "project:deploy:validate",
    "summary": "Validate a metadata deployment without actually executing it.",
    "description": "Use this command to verify whether a deployment will succeed without actually deploying the metadata to your org. This command is similar to \"<%= config.bin %> project deploy start\", except you're required to run Apex tests, and the command returns a job ID rather than executing the deployment. If the validation succeeds, then you pass this job ID to the \"<%= config.bin %> project deploy quick\" command to actually deploy the metadata. This quick deploy takes less time because it skips running Apex tests. The job ID is valid for 10 days from when you started the validation. Validating first is useful if the deployment to your production org take several hours and you don’t want to risk a failed deploy.\n\nYou must run this command from within a project.\n\nThis command doesn't support source-tracking. When you quick deploy with the resulting job ID, the source you deploy overwrites the corresponding metadata in your org.\n\nTo validate the deployment of multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.",
    "strict": true,
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "NOTE: These examples focus on validating large deployments. See the help for \"<%= config.bin %> project deploy start\" for examples of deploying smaller sets of metadata which you can also use to validate.",
      "Validate the deployment of all source files in a directory to the default org:\n<%= config.bin %> <%= command.id %> --source-dir path/to/source",
      "Asynchronously validate the deployment and run all tests in the org with alias \"my-prod-org\"; command immediately returns the job ID:\n<%= config.bin %> <%= command.id %> --source-dir path/to/source --async --test-level RunAllTestsInOrg --target-org my-prod-org",
      "Validate the deployment of all components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "char": "a",
        "summary": "Target API version for the validation.",
        "description": "Use this flag to override the default API version with the API version of your package.xml file. The default API version is the latest version supported by the CLI.",
        "multiple": false,
        "deprecateAliases": true
      },
      "async": {
        "name": "async",
        "type": "boolean",
        "summary": "Run the command asynchronously.",
        "description": "The command immediately returns the job ID and control of the terminal to you. This way, you can continue to use the CLI. To resume watching the validation, run \"<%= config.bin %> project deploy resume\". To check the status of the validation, run \"<%= config.bin %> project deploy report\".",
        "allowNo": false,
        "deprecateAliases": true
      },
      "concise": {
        "name": "concise",
        "type": "boolean",
        "summary": "Show concise output of the validation result.",
        "allowNo": false,
        "exclusive": [
          "verbose"
        ],
        "deprecateAliases": true
      },
      "manifest": {
        "name": "manifest",
        "type": "option",
        "char": "x",
        "summary": "Full file path for manifest (package.xml) of components to validate for deployment.",
        "description": "All child components are included. If you specify this flag, don’t specify --metadata or --source-dir.",
        "multiple": false,
        "deprecateAliases": true
      },
      "metadata": {
        "name": "metadata",
        "type": "option",
        "char": "m",
        "summary": "Metadata component names to validate for deployment.",
        "multiple": true,
        "deprecateAliases": true
      },
      "source-dir": {
        "name": "source-dir",
        "type": "option",
        "char": "d",
        "summary": "Path to the local source files to validate for deployment.",
        "description": "The supplied path can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its subdirectories).\n\nIf you specify this flag, don’t specify --metadata or --manifest.",
        "multiple": true,
        "deprecateAliases": true
      },
      "metadata-dir": {
        "name": "metadata-dir",
        "type": "option",
        "summary": "Root of directory or zip file of metadata formatted files to deploy.",
        "multiple": false,
        "deprecateAliases": true
      },
      "single-package": {
        "name": "single-package",
        "type": "boolean",
        "summary": "Indicates that the metadata zip file points to a directory structure for a single package.",
        "allowNo": false,
        "dependsOn": [
          "metadata-dir"
        ],
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Login username or alias for the target org.",
        "description": "Overrides your default org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "tests": {
        "name": "tests",
        "type": "option",
        "char": "t",
        "summary": "Apex tests to run when --test-level is RunSpecifiedTests.",
        "description": "If a test name contains a space, enclose it in double quotes.\nFor multiple test names, use one of the following formats:\n\n- Repeat the flag for multiple test names: --tests Test1 --tests Test2 --tests \"Test With Space\"\n- Separate the test names with spaces: --tests Test1 Test2 \"Test With Space\"",
        "multiple": true,
        "deprecateAliases": true
      },
      "test-level": {
        "name": "test-level",
        "type": "option",
        "char": "l",
        "summary": "Deployment Apex testing level.",
        "description": "Valid values are:\n\n- RunSpecifiedTests — Runs only the tests that you specify with the --run-tests flag. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\n\n- RunLocalTests — All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default.\n\n- RunAllTestsInOrg — All tests in your org are run, including tests of managed packages.",
        "multiple": false,
        "options": [
          "RunAllTestsInOrg",
          "RunLocalTests",
          "RunSpecifiedTests"
        ],
        "default": "RunLocalTests",
        "deprecateAliases": true
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Show verbose output of the validation result.",
        "allowNo": false,
        "exclusive": [
          "concise"
        ],
        "deprecateAliases": true
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete and display results.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you and returns the job ID. To resume watching the validation, run \"<%= config.bin %> project deploy resume\". To check the status of the validation, run \"<%= config.bin %> project deploy report\".",
        "helpValue": "<minutes>",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "configurationVariablesSection": {
      "header": "CONFIGURATION VARIABLES",
      "body": [
        {
          "name": "target-org",
          "description": "Username or alias of the org that all commands run against by default. (sf only)"
        },
        {
          "name": "org-api-version",
          "description": "API version of your project. Default: API version of your Dev Hub org."
        }
      ]
    },
    "envVariablesSection": {
      "header": "ENVIRONMENT VARIABLES",
      "body": [
        {
          "name": "SF_TARGET_ORG",
          "description": "Username or alias of your default org. Overrides the target-org configuration variable."
        },
        {
          "name": "SF_USE_PROGRESS_BAR",
          "description": "Set to false to disable the progress bar when running the metadata deploy command."
        }
      ]
    },
    "errorCodes": {
      "header": "ERROR CODES",
      "body": [
        {
          "name": "Succeeded (0)",
          "description": "The deploy succeeded."
        },
        {
          "name": "Canceled (1)",
          "description": "The deploy was canceled."
        },
        {
          "name": "Failed (1)",
          "description": "The deploy failed."
        },
        {
          "name": "SucceededPartial (68)",
          "description": "The deploy partially succeeded."
        },
        {
          "name": "InProgress (69)",
          "description": "The deploy is in progress."
        },
        {
          "name": "Pending (69)",
          "description": "The deploy is pending."
        },
        {
          "name": "Canceling (69)",
          "description": "The deploy is being canceled."
        }
      ]
    },
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "dev audit messages",
    "summary": "Audit messages in a plugin's messages directory to locate unused messages and missing messages that have references in source code.",
    "strict": true,
    "pluginName": "@salesforce/plugin-dev",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Audit messages using default directories:\n<%= config.bin %> <%= command.id %>",
      "Audit messages in the \"messages\" directory in the current working directory; the plugin's source directory is in \"src\":\n<%= config.bin %> <%= command.id %> --messages-dir ./messages --source-dir ./src"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "project-dir": {
        "name": "project-dir",
        "type": "option",
        "char": "p",
        "summary": "Location of the project where messages are to be audited.",
        "multiple": false,
        "default": ".",
        "aliases": [
          "projectdir"
        ]
      },
      "messages-dir": {
        "name": "messages-dir",
        "type": "option",
        "char": "m",
        "summary": "Directory that contains the plugin's message files.",
        "description": "The default is the \"messages\" directory in the current working directory.",
        "multiple": false,
        "default": "messages",
        "aliases": [
          "messagesdir"
        ]
      },
      "source-dir": {
        "name": "source-dir",
        "type": "option",
        "char": "s",
        "summary": "Directory that contains the plugin's source code.",
        "description": "The default is the \"src\" directory in the current working directory.",
        "multiple": false,
        "default": "src",
        "aliases": [
          "sourcedir"
        ]
      }
    },
    "args": {}
  },
  {
    "id": "dev configure repo",
    "summary": "Configure a GitHub repo for the GitHub Actions pipeline.",
    "description": "Sets up labels and exempts the CLI bot for branch protection and PR rules.",
    "strict": true,
    "pluginName": "@salesforce/plugin-dev",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Configure the repo \"testPackageRelease\", with owner \"salesforcecli\", for GitHub Actions.\n<%= config.bin %> <%= command.id %> --repository salesforcecli/testPackageRelease"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "repository": {
        "name": "repository",
        "type": "option",
        "char": "r",
        "summary": "GitHub owner/repo for which you want to configure GitHub Actions.",
        "required": true,
        "multiple": false
      },
      "dry-run": {
        "name": "dry-run",
        "type": "boolean",
        "char": "d",
        "summary": "Make no changes.",
        "allowNo": false,
        "aliases": [
          "dryrun"
        ]
      },
      "bot": {
        "name": "bot",
        "type": "option",
        "char": "b",
        "summary": "GitHub login/username for the bot.",
        "multiple": false,
        "default": "SF-CLI-BOT"
      }
    },
    "args": {}
  },
  {
    "id": "dev configure secrets",
    "summary": "Ensures a GitHub repo has correct access to secrets based on its workflows.",
    "description": "Inspects a repo's yaml files and verifies that secrets required are available for the repo (either set at the repo level or shared via organization-level secrets).\n\nThis command requires scope:admin permissions to inspect the org secrets and admin access to the repo to inspect the repo secrets.",
    "strict": true,
    "pluginName": "@salesforce/plugin-dev",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Ensure secrets access for the repo \"testPackageRelease\", with owner \"salesforcecli\":",
      "<%= config.bin %> <%= command.id %> --repository salesforcecli/testPackageRelease"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "repository": {
        "name": "repository",
        "type": "option",
        "char": "r",
        "summary": "Github owner/repo.",
        "required": true,
        "multiple": false
      },
      "dry-run": {
        "name": "dry-run",
        "type": "boolean",
        "char": "d",
        "summary": "Make no changes.",
        "allowNo": false,
        "aliases": [
          "dryrun"
        ]
      }
    },
    "args": {}
  },
  {
    "id": "dev convert messages",
    "summary": "Convert a .json messages file into Markdown.",
    "strict": true,
    "pluginName": "@salesforce/plugin-dev",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Convert the my-command.json message file into my-command.md with the standard messages headers:\n<%= config.bin %> <%= command.id %> --filename my-command.json",
      "Similar to previous example, but specify the plugin project directory:",
      "<%= config.bin %> <%= command.id %> --project-dir ./path/to/plugin --filename my-command.json"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "project-dir": {
        "name": "project-dir",
        "type": "option",
        "char": "p",
        "summary": "Location of the project whose messages are to be converted.",
        "multiple": false,
        "default": ".",
        "aliases": [
          "projectdir"
        ]
      },
      "file-name": {
        "name": "file-name",
        "type": "option",
        "char": "f",
        "summary": "Filename to convert.",
        "required": true,
        "multiple": true,
        "aliases": [
          "filename"
        ]
      }
    },
    "args": {}
  },
  {
    "id": "dev convert script",
    "summary": "Convert a script file that contains deprecated sfdx-style commands to use the new sf-style commands instead.",
    "description": "Important: Use this command only to get started on the sfdx->sf script migration. We don't guarantee that the new sf-style command replacements work correctly or as you expect. You must test, and probably update, the new script before putting it into production. We also don't guarantee that the JSON results are the same as before. \n\nThis command can convert a large part of your script, but possibly not all. There are some sfdx-style commands that don't have an obvious sf-style equivalent. In this case, this command doesn't replace the sfdx-style command but instead adds a comment to remind you that you must convert it manually. See the Salesforce CLI Command Reference for migration information about each deprecated sfdx-style command: https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference.htm.\n\nThis command is interactive; as it scans your script, it prompts you when it finds an sfdx-style command or flag and asks if you want to convert it to the displayed suggestion. The command doesn't update the script file directly; rather, it creates a new file whose name is the original name but with \"-converted\" appended to it. The script replaces all instances of \"sfdx\" with \"sf\". For each prompt you answer \"y\" to, the command replaces the sfdx-style names with their equivalent sf-style ones. For example, \"sfdx force:apex:execute --targetusername myscratch\" is replaced with \"sf apex run --target-org myscratch\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-dev",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Convert the YAML file called \"myScript.yml\" located in the current directory; the new file that contains the replacements is called \"myScript-converted.yml\":\n<%= config.bin %> <%= command.id %> --script ./myScript.yml"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "script": {
        "name": "script",
        "type": "option",
        "char": "s",
        "summary": "Filepath to the script you want to convert.",
        "required": true,
        "multiple": false
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "summary": "Don't prompt for suggested replacements.",
        "hidden": true,
        "allowNo": false
      }
    },
    "args": {}
  },
  {
    "id": "dev generate command",
    "summary": "Generate a new sf command.",
    "description": "You must run this command from within a plugin directory, such as the directory created with the \"sf dev generate plugin\" command.\n\nThe command generates basic source files, messages (\\*.md), and test files for your new command.  The Typescript files contain import statements for the minimum required Salesforce libraries, and scaffold some basic code. The new type names come from the value you passed to the --name flag.\n\nThe command updates the package.json file, so if it detects conflicts with the existing file, you're prompted whether you want to overwrite the file. There are a number of package.json updates required for a new command, so we recommend you answer \"y\" so the command takes care of them all. If you answer \"n\", you must update the package.json file manually.",
    "strict": true,
    "pluginName": "@salesforce/plugin-dev",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Generate the files for a new \"sf my exciting command\":\n<%= config.bin %> <%= command.id %> --name my:exciting:command"
    ],
    "flags": {
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the new command. Use colons to separate the topic and command names.",
        "required": true,
        "multiple": false
      },
      "force": {
        "name": "force",
        "type": "boolean",
        "summary": "Overwrite existing files.",
        "allowNo": false
      },
      "nuts": {
        "name": "nuts",
        "type": "boolean",
        "summary": "Generate a NUT test file for the command.",
        "allowNo": true
      },
      "unit": {
        "name": "unit",
        "type": "boolean",
        "summary": "Generate a unit test file for the command.",
        "allowNo": true
      }
    },
    "args": {}
  },
  {
    "id": "dev generate flag",
    "summary": "Generate a flag for an existing command.",
    "description": "You must run this command from within a plugin directory, such as the directory created with the \"sf dev generate plugin\" command.\n\nThis command is interactive. It first discovers all the commands currently implemented in the plugin, and asks you which you want to create a new flag for. It then prompts for other flag properties, such as its long name, optional short name, type, whether it's required, and so on. Long flag names must be kebab-case and not camelCase. The command doesn't let you use an existing long or short flag name. When the command completes, the Typescript file for the command is updated with the code for the new flag.\n\nUse the --dry-run flag to review new code for the command file without actually udpating it.",
    "strict": true,
    "pluginName": "@salesforce/plugin-dev",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Generate a new flag and update the command file:\n<%= config.bin %> <%= command.id %>",
      "Don't actually update the command file, just view the generated code:\n<%= config.bin %> <%= command.id %> --dry-run"
    ],
    "flags": {
      "dry-run": {
        "name": "dry-run",
        "type": "boolean",
        "char": "d",
        "summary": "Print new flag code instead of adding it to the command file.",
        "allowNo": false,
        "aliases": [
          "dryrun"
        ]
      }
    },
    "args": {}
  },
  {
    "id": "dev generate hook",
    "summary": "Generate a new sf hook.",
    "description": "You must run this command from within a plugin directory, such as the directory created with the \"sf dev generate plugin\" command.\n\nThe command generates a basic Typescript source file in the \"src/hooks\" directory to get you started. The source file's name is based on the event you're hooking into, such as envList.ts for the \"sf env list\" command.\n\nThe command updates the package.json file, so if it detects conflicts with the existing file, you're prompted whether you want to overwrite the file. There are a number of package.json updates required for a new hook, so we recommend you answer \"y\" so the command takes care of them all. If you answer \"n\", you must update the package.json file manually.",
    "strict": true,
    "pluginName": "@salesforce/plugin-dev",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Generate source file for a hook into the \"sf env display\" command:\n<%= config.bin %> <%= command.id %> --event sf:env:display"
    ],
    "flags": {
      "force": {
        "name": "force",
        "type": "boolean",
        "summary": "Overwrite existing files.",
        "allowNo": false
      },
      "event": {
        "name": "event",
        "type": "option",
        "summary": "Event to run hook on. Use colons to separate topic and command names of the event.",
        "required": true,
        "multiple": false,
        "options": [
          "sf:env:list",
          "sf:env:display",
          "sf:deploy",
          "sf:logout"
        ]
      }
    },
    "args": {}
  },
  {
    "id": "dev generate library",
    "summary": "Generate a new library.",
    "description": "This command is interactive. You're prompted for information to populate the new library, such as the npm scope (which must start with \"@\"), the name and description of the library, and its GitHub organization. The command clones the 'forcedotcom/library-template' GitHub repository, installs the library's npm package dependencies using yarn install, and updates the package properties.\n\nWhen the command completes, your new library contains a few sample source and test files to get you started.",
    "strict": true,
    "pluginName": "@salesforce/plugin-dev",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "<%= config.bin %> <%= command.id %>"
    ],
    "flags": {},
    "args": {}
  },
  {
    "id": "dev generate plugin",
    "summary": "Generate a new sf plugin.",
    "description": "This command is interactive. You're prompted for information to populate your new plugin, such as its name, description, author, and percentage of code coverage you want. The command clones the 'salesforcecli/plugin-template-sf' GitHub repository, installs the plug-in's npm package dependencies using yarn install, and updates the package properties.\n\nWhen the command completes, your new plugin contains the source, message, and test files for a sample \"sf hello world\" command.",
    "strict": true,
    "pluginName": "@salesforce/plugin-dev",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "aliases": [
      "plugins:generate"
    ],
    "examples": [
      "<%= config.bin %> <%= command.id %>"
    ],
    "deprecateAliases": true,
    "flags": {},
    "args": {}
  },
  {
    "id": "dev hook",
    "summary": "Run a hook. For testing purposes only.",
    "strict": true,
    "pluginName": "@salesforce/plugin-dev",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      {
        "description": "Execute a hook by name:",
        "command": "<%= config.bin %> <%= command.id %> sf:env:list"
      },
      {
        "description": "Execute a hook by name in a specific plugin:",
        "command": "<%= config.bin %> <%= command.id %> sf:env:list --plugin env"
      }
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "plugin": {
        "name": "plugin",
        "type": "option",
        "char": "p",
        "summary": "Specific plugin from which to execute hook",
        "multiple": false
      }
    },
    "args": {
      "hook": {
        "name": "hook",
        "description": "Name of hook to execute.",
        "required": true
      }
    }
  },
  {
    "id": "doctor",
    "summary": "Gather CLI configuration data and run diagnostic tests to discover and report potential problems in your environment.",
    "description": "When you run the doctor command without parameters, it first displays a diagnostic overview of your environment. It then writes a detailed diagnosis to a JSON file in the current directory. Use the --outputdir to specify a different directory. To run diagnostic tests on a specific plugin, use the --plugin parameter. If the plugin isn't listening to the doctor, then you get a warning.\n\nUse the --command parameter to run a specific command in debug mode; the doctor writes both stdout and stderr to \\*.log files that you can provide to Salesforce Customer Support or attach to a GitHub issue.\n\nPlugin providers can also implement their own doctor diagnostic tests by listening to the \"sf-doctor\" event and running plugin specific tests that are then included in the doctor diagnostics log.",
    "strict": true,
    "pluginName": "@salesforce/plugin-info",
    "pluginAlias": "@salesforce/plugin-info",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Run CLI doctor diagnostics:\n<%= config.bin %> doctor",
      "Run CLI doctor diagnostics and the specified command, and write the debug output to a file:\n<%= config.bin %> doctor --command \"force:org:list --all\"",
      "Run CLI doctor diagnostics for a specific plugin:\n<%= config.bin %> doctor --plugin @salesforce/plugin-source"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "command": {
        "name": "command",
        "type": "option",
        "char": "c",
        "summary": "Command to run in debug mode; results are written to a log file.",
        "multiple": false
      },
      "plugin": {
        "name": "plugin",
        "type": "option",
        "char": "p",
        "summary": "Specific plugin on which to run diagnostics.",
        "multiple": false
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory to save all created files rather than the current working directory.",
        "multiple": false,
        "aliases": [
          "outputdir",
          "o"
        ]
      },
      "create-issue": {
        "name": "create-issue",
        "type": "boolean",
        "char": "i",
        "summary": "Create a new issue on our GitHub repo and attach all diagnostic results.",
        "allowNo": false,
        "aliases": [
          "createissue"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "org:create:sandbox",
    "summary": "Create a sandbox org.",
    "description": "There are two ways to create a sandbox org: specify a definition file that contains the sandbox options or use the --name and --license-type flags to specify the two required options. If you want to set an option other than name or license type, such as apexClassId, you must use a definition file.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create a sandbox org using a definition file and give it the alias \"MyDevSandbox\". The production org that contains the sandbox license has the alias \"prodOrg\".\n<%= config.bin %> <%= command.id %> -f config/dev-sandbox-def.json --alias MyDevSandbox --target-org prodOrg",
      "Create a sandbox org by directly specifying its name and type of license (Developer) instead of using a definition file. Set the sandbox org as your default.\n<%= config.bin %> <%= command.id %> --name mysandbox --license-type Developer --alias MyDevSandbox --target-org prodOrg --set-default"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "definition-file": {
        "name": "definition-file",
        "type": "option",
        "char": "f",
        "summary": "Path to a sandbox definition file.",
        "description": "The sandbox definition file is a blueprint for the sandbox. You can create different definition files for each sandbox type that you use in the development process. See <https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_sandbox_definition.htm> for all the options you can specify in the defintion file.",
        "multiple": false,
        "exclusive": [
          "name",
          "license-type"
        ],
        "deprecateAliases": true
      },
      "set-default": {
        "name": "set-default",
        "type": "boolean",
        "char": "s",
        "summary": "Set the sandbox org as your default org.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "alias": {
        "name": "alias",
        "type": "option",
        "char": "a",
        "summary": "Alias for the sandbox org.",
        "description": "When you create a sandbox, the generated usernames are based on the usernames present in the production org. To ensure uniqueness, the new usernames are appended with the name of the sandbox. For example, the username \"user@example.com\" in the production org results in the username \"user@example.com.mysandbox\" in a sandbox named \"mysandbox\". When you set an alias for a sandbox org, it's assigned to the resulting username of the user running this command.",
        "multiple": false,
        "deprecateAliases": true
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the sandbox org to be ready.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal to you and displays the \"<%= config.bin %> org resume sandbox\" command you run to check the status of the create. The displayed command includes the job ID for the running sandbox creation.",
        "helpValue": "<minutes>",
        "multiple": false,
        "exclusive": [
          "async"
        ],
        "default": {
          "quantity": 30,
          "unit": 0
        },
        "deprecateAliases": true
      },
      "poll-interval": {
        "name": "poll-interval",
        "type": "option",
        "char": "i",
        "summary": "Number of seconds to wait between retries.",
        "helpValue": "<seconds>",
        "multiple": false,
        "exclusive": [
          "async"
        ],
        "default": {
          "quantity": 30,
          "unit": 2
        },
        "deprecateAliases": true
      },
      "async": {
        "name": "async",
        "type": "boolean",
        "summary": "Request the sandbox creation, but don't wait for it to complete.",
        "description": "The command immediately displays the job ID and returns control of the terminal to you. This way, you can continue to use the CLI. To check the status of the sandbox creation, run \"<%= config.bin %> org resume sandbox\".",
        "allowNo": false,
        "exclusive": [
          "wait",
          "poll-interval"
        ],
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the sandbox org.",
        "description": "The name must be a unique alphanumeric string (10 or fewer characters) to identify the sandbox. You can’t reuse a name while a sandbox is in the process of being deleted.",
        "multiple": false,
        "exclusive": [
          "definition-file"
        ],
        "deprecateAliases": true
      },
      "clone": {
        "name": "clone",
        "type": "option",
        "char": "c",
        "summary": "Name of the sandbox org to clone.",
        "description": "The value of clone must be an existing sandbox in the same target-org.",
        "multiple": false,
        "exclusive": [
          "license-type"
        ],
        "deprecateAliases": true
      },
      "license-type": {
        "name": "license-type",
        "type": "option",
        "char": "l",
        "summary": "Type of sandbox license.",
        "multiple": false,
        "options": [
          "Developer",
          "Developer_Pro",
          "Partial",
          "Full"
        ],
        "exclusive": [
          "definition-file",
          "clone"
        ],
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the production org that contains the sandbox license.",
        "description": "When it creates the sandbox org, Salesforce copies the metadata, and optionally data, from your production org to the new sandbox org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "summary": "Don't prompt for confirmation about the sandbox configuration.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "no-track-source": {
        "name": "no-track-source",
        "type": "boolean",
        "summary": "Do not use source tracking for this sandbox.",
        "description": "We recommend you enable source tracking in Developer and Developer Pro sandbox, which is why it's the default behavior. Source tracking allows you to track the changes you make to your metadata, both in your local project and in the sandbox, and to detect any conflicts between the two.\n\nTo disable source tracking in the new sandbox, specify the --no-track-source flag. The main reason to disable source tracking is for performance. For example, while you probably want to deploy metadata and run Apex tests in your CI/CD jobs, you probably don't want to incur the costs of source tracking (checking for conflicts, polling the SourceMember object, various file system operations.) This is a good use case for disabling source tracking in the sandbox.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:create:scratch",
    "summary": "Create a scratch org.",
    "description": "There are two ways to create a scratch org: either specify a definition file that contains the options or use the --edition flag to specify the one required option.\n\nFor either method, you can also use these flags; if you use them with --definition-file, they override their equivalent option in the scratch org definition file:\n\n    * --description\n    * --name  (equivalent to the \"orgName\" option)\n    * --username\n    * --release\n    * --edition\n    * --admin-email (equivalent to the \"adminEmail\" option)\n    * --source-org (equivalent to the \"sourceOrg\" option)\n\nIf you want to set options other than the preceding ones, such as org features or settings, you must use a definition file.\n\nYou must specify a Dev Hub to create a scratch org, either with the --target-dev-hub flag or by setting your default Dev Hub with the target-dev-hub configuration variable.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create a Developer edition scratch org using your default Dev Hub and give the scratch org an alias:\n<%= config.bin %> <%= command.id %> --edition=developer --alias my-scratch-org",
      "Create a scratch org with a definition file. Specify the Dev Hub using its alias, set the scratch org as your default, and specify that it expires in 3 days:\n<%= config.bin %> <%= command.id %> --target-dev-hub MyHub --definition-file config/project-scratch-def.json --set-default --duration-days 3",
      "Create a preview Enterprise edition scratch org; for use only during Salesforce release transition periods:\n<%= config.bin %> <%= command.id %> --edition=enterprise --alias my-scratch-org --target-dev-hub MyHub --release preview"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "alias": {
        "name": "alias",
        "type": "option",
        "char": "a",
        "summary": "Alias for the scratch org.",
        "description": "New scratch orgs include one administrator by default. The admin user's username is auto-generated and looks something like test-wvkpnfm5z113@example.com. When you set an alias for a new scratch org, it's assigned this username.",
        "multiple": false,
        "deprecateAliases": true
      },
      "async": {
        "name": "async",
        "type": "boolean",
        "summary": "Request the org, but don't wait for it to complete.",
        "description": "The command immediately displays the job ID and returns control of the terminal to you. This way, you can continue to use the CLI. To resume the scratch org creation, run \"<%= config.bin %> org resume scratch\".",
        "allowNo": false,
        "deprecateAliases": true
      },
      "set-default": {
        "name": "set-default",
        "type": "boolean",
        "char": "d",
        "summary": "Set the scratch org as your default org",
        "allowNo": false,
        "deprecateAliases": true
      },
      "definition-file": {
        "name": "definition-file",
        "type": "option",
        "char": "f",
        "summary": "Path to a scratch org definition file.",
        "description": "The scratch org definition file is a blueprint for the scratch org. It mimics the shape of an org that you use in the development life cycle, such as acceptance testing, packaging, or production. See <https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_def_file.htm> for all the option you can specify in the definition file.",
        "multiple": false,
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "description": "Overrides the value of the target-dev-hub configuration variable, if set.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "no-ancestors": {
        "name": "no-ancestors",
        "type": "boolean",
        "char": "c",
        "summary": "Don't include second-generation managed package (2GP) ancestors in the scratch org.",
        "helpGroup": "Packaging",
        "allowNo": false,
        "deprecateAliases": true
      },
      "edition": {
        "name": "edition",
        "type": "option",
        "char": "e",
        "summary": "Salesforce edition of the scratch org. Overrides the value of the \"edition\" option in the definition file, if set.",
        "description": "The editions that begin with \"partner-\" are available only if the Dev Hub org is a Partner Business Org.",
        "multiple": false,
        "options": [
          "developer",
          "enterprise",
          "group",
          "professional",
          "partner-developer",
          "partner-enterprise",
          "partner-group",
          "partner-professional"
        ],
        "deprecateAliases": true
      },
      "no-namespace": {
        "name": "no-namespace",
        "type": "boolean",
        "char": "m",
        "summary": "Create the scratch org with no namespace, even if the Dev Hub has a namespace.",
        "helpGroup": "Packaging",
        "allowNo": false,
        "deprecateAliases": true
      },
      "duration-days": {
        "name": "duration-days",
        "type": "option",
        "char": "y",
        "summary": "Number of days before the org expires.",
        "helpValue": "<days>",
        "multiple": false,
        "default": {
          "quantity": 7,
          "unit": 4
        },
        "deprecateAliases": true
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the scratch org to be ready.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal to you and displays the job ID. To resume the scratch org creation, run the org resume scratch command and pass it the job ID.",
        "helpValue": "<minutes>",
        "multiple": false,
        "default": {
          "quantity": 5,
          "unit": 0
        },
        "deprecateAliases": true
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true
      },
      "client-id": {
        "name": "client-id",
        "type": "option",
        "char": "i",
        "summary": "Consumer key of the Dev Hub connected app.",
        "multiple": false,
        "deprecateAliases": true
      },
      "track-source": {
        "name": "track-source",
        "type": "boolean",
        "char": "t",
        "summary": "Use source tracking for this scratch org. Set --no-track-source to disable source tracking.",
        "description": "We recommend you enable source tracking in scratch orgs, which is why it's the default behavior. Source tracking allows you to track the changes you make to your metadata, both in your local project and in the scratch org, and to detect any conflicts between the two.\n\nTo disable source tracking in the new scratch org, specify the --no-track-source flag. The main reason to disable source tracking is for performance. For example, while you probably want to deploy metadata and run Apex tests in your CI/CD jobs, you probably don't want to incur the costs of source tracking (checking for conflicts, polling the SourceMember object, various file system operations.) This is a good use case for disabling source tracking in the scratch org.",
        "allowNo": true,
        "deprecateAliases": true
      },
      "username": {
        "name": "username",
        "type": "option",
        "summary": "Username of the scratch org admin user. Overrides the value of the \"username\" option in the definition file, if set.",
        "description": "The username must be unique within the entire scratch org and sandbox universe. You must add your own logic to ensure uniqueness.\n\nOmit this flag to have Salesforce generate a unique username for your org.",
        "multiple": false,
        "deprecateAliases": true
      },
      "description": {
        "name": "description",
        "type": "option",
        "summary": "Description of the scratch org in the Dev Hub. Overrides the value of the \"description\" option in the definition file, if set.",
        "multiple": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "summary": "Name of the org, such as \"Acme Company\". Overrides the value of the \"orgName\" option in the definition file, if set.",
        "multiple": false,
        "deprecateAliases": true
      },
      "release": {
        "name": "release",
        "type": "option",
        "summary": "Release of the scratch org as compared to the Dev Hub release.",
        "description": "By default, scratch orgs are on the same release as the Dev Hub. During Salesforce release transition periods, you can override this default behavior and opt in or out of the new release.",
        "multiple": false,
        "options": [
          "preview",
          "previous"
        ],
        "deprecateAliases": true
      },
      "admin-email": {
        "name": "admin-email",
        "type": "option",
        "summary": "Email address that will be applied to the org's admin user. Overrides the value of the \"adminEmail\" option in the definition file, if set.",
        "multiple": false,
        "deprecateAliases": true
      },
      "source-org": {
        "name": "source-org",
        "type": "option",
        "char": "i",
        "summary": "15-character ID of the org whose shape the new scratch org will be based on. Overrides the value of the \"sourceOrg\" option in the definition file, if set.",
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:delete:sandbox",
    "summary": "Delete a sandbox.",
    "description": "Salesforce CLI marks the org for deletion in the production org that contains the sandbox licenses and then deletes all local references to the org from your computer.\nSpecify a sandbox with either the username you used when you logged into it, or the alias you gave the sandbox when you created it. Run \"<%= config.bin %> org list\" to view all your orgs, including sandboxes, and their aliases.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Delete a sandbox with alias my-sandbox:\n<%= config.bin %> <%= command.id %> --target-org=my-sandbox",
      "Specify a username instead of an alias:\n<%= config.bin %> <%= command.id %> --target-org=myusername@example.com.qa",
      "Delete the sandbox without prompting to confirm :\n<%= config.bin %> <%= command.id %> --target-org=my-sandbox --no-prompt"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Sandbox alias or login user.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "Don't prompt the user to confirm the deletion.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:delete:scratch",
    "summary": "Delete a scratch org.",
    "description": "Salesforce CLI marks the org for deletion in the Dev Hub org and then deletes all local references to the org from your computer.\nSpecify a scratch org with either the username or the alias you gave the scratch org when you created it. Run \"<%= config.bin %> org list\" to view all your orgs, including scratch orgs, and their aliases.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Delete a scratch org with alias my-scratch-org:\n<%= config.bin %> <%= command.id %> --target-org=my-scratch-org",
      "Specify a username instead of an alias:\n<%= config.bin %> <%= command.id %> --target-org=test-123456-abcdefg@example.com",
      "Delete the scratch org without prompting to confirm :\n<%= config.bin %> <%= command.id %> --target-org=my-scratch-org --no-prompt"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Scratch org alias or login user.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "Don't prompt the user to confirm the deletion.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:resume:sandbox",
    "summary": "Check the status of a sandbox creation, and log in to it if it's ready.",
    "description": "Sandbox creation can take a long time. If the original \"<%= config.bin %> org create sandbox\" command either times out, or you specified the --async flag, the command displays a job ID. Use this job ID to check whether the sandbox creation is complete, and if it is, the command then logs into it.\n\nYou can also use the sandbox name to check the status or the --use-most-recent flag to use the job ID of the most recent sandbox creation.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Check the status of a sandbox creation using its name and specify a production org with alias \"prodOrg\":\n<%= config.bin %> <%= command.id %> --name mysandbox --target-org prodOrg",
      "Check the status using the job ID:\n<%= config.bin %> <%= command.id %> --job-id 0GRxxxxxxxx",
      "Check the status of the most recent sandbox create request:\n<%= config.bin %> <%= command.id %> --use-most-recent"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the sandbox org to be ready.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you and returns the job ID. To resume checking the sandbox creation, rerun this command.",
        "helpValue": "<minutes>",
        "multiple": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the sandbox org.",
        "multiple": false,
        "exclusive": [
          "job-id"
        ],
        "deprecateAliases": true
      },
      "job-id": {
        "name": "job-id",
        "type": "option",
        "char": "i",
        "summary": "Job ID of the incomplete sandbox creation that you want to check the status of.",
        "description": "The job ID is valid for 24 hours after you start the sandbox creation.",
        "multiple": false,
        "exclusive": [
          "name"
        ],
        "deprecateAliases": true
      },
      "use-most-recent": {
        "name": "use-most-recent",
        "type": "boolean",
        "char": "l",
        "summary": "Use the most recent sandbox create request.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the production org that contains the sandbox license.",
        "description": "When it creates the sandbox org, Salesforce copies the metadata, and optionally data, from your production org to the new sandbox org.",
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:resume:scratch",
    "summary": "Resume the creation of an incomplete scratch org.",
    "description": "When the original \"<%= config.bin %> org create scratch\" command either times out or is run with the --async flag, it displays a job ID.\n\nRun this command by either passing it a job ID or using the --use-most-recent flag to specify the most recent incomplete scratch org.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Resume a scratch org create with a job ID:\n<%= config.bin %> <%= command.id %> --job-id 2SR3u0000008fBDGAY",
      "Resume your most recent incomplete scratch org:\n<%= config.bin %> <%= command.id %> --use-most-recent"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "job-id": {
        "name": "job-id",
        "type": "option",
        "char": "i",
        "summary": "Job ID of the incomplete scratch org create that you want to resume.",
        "description": "The job ID is the same as the record ID of the incomplete scratch org in the ScratchOrgInfo object of the Dev Hub.\n\nThe job ID is valid for 24 hours after you start the scratch org creation.",
        "multiple": false,
        "deprecateAliases": true
      },
      "use-most-recent": {
        "name": "use-most-recent",
        "type": "boolean",
        "char": "r",
        "summary": "Use the job ID of the most recent incomplete scratch org.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "force:data:bulk:delete",
    "summary": "Bulk delete records from an org using a CSV file. Uses Bulk API 1.0.",
    "description": "The CSV file must have only one column (\"Id\") and then the list of record IDs you want to delete, one ID per line.\n\nWhen you execute this command, it starts a job and one or more batches, displays their IDs, and then immediately returns control of the terminal to you by default. If you prefer to wait, set the --wait flag to the number of minutes; if it times out, the command outputs the IDs. Use the job and batch IDs to check the status of the job with the \"<%= config.bin %> force data bulk status\" command. A single job can contain many batches, depending on the length of the CSV file.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Bulk delete Account records from your default org using the list of IDs in the \"files/delete.csv\" file:\n<%= config.bin %> <%= command.id %> --sobject Account --file files/delete.csv",
      "Bulk delete records from a custom object in an org with alias my-scratch and wait 5 minutes for the command to complete:\n<%= config.bin %> <%= command.id %> --sobject MyObject__c --file files/delete.csv --wait 5 --target-org my-scratch"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Org alias or username to use for the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "summary": "CSV file that contains the IDs of the records to delete.",
        "required": true,
        "multiple": false,
        "aliases": [
          "csvfile"
        ]
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the Salesforce object, either standard or custom, that you want to delete records from.",
        "required": true,
        "multiple": false,
        "aliases": [
          "sobjecttype"
        ]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete before displaying the results.",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        }
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "force:data:bulk:status",
    "summary": "View the status of a bulk data load job or batch. Uses Bulk API 1.0.",
    "description": "Run this command using the job ID or batch ID returned from the \"<%= config.bin %> force data bulk delete\" or \"<%= config.bin %> force data bulk upsert\" commands.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "View the status of a bulk load job in your default org:\n<%= config.bin %> <%= command.id %> --job-id 750xx000000005sAAA",
      "View the status of a bulk load job and a specific batches in an org with alias my-scratch:\n<%= config.bin %> <%= command.id %> --job-id 750xx000000005sAAA --batch-id 751xx000000005nAAA --target-org my-scratch"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Org alias or username to use for the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "batch-id": {
        "name": "batch-id",
        "type": "option",
        "char": "b",
        "summary": "ID of the batch whose status you want to view; you must also specify the job ID.",
        "multiple": false,
        "aliases": [
          "batchid"
        ]
      },
      "job-id": {
        "name": "job-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the job whose status you want to view.",
        "required": true,
        "multiple": false,
        "aliases": [
          "jobid"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "force:data:bulk:upsert",
    "summary": "Bulk upsert records to an org from a CSV file. Uses Bulk API 1.0.",
    "description": "An upsert refers to inserting a record into a Salesforce object if the record doesn't already exist, or updating it if it does exist.\n\nWhen you execute this command, it starts a job and one or more batches, displays their IDs, and then immediately returns control of the terminal to you by default. If you prefer to wait, set the --wait flag to the number of minutes; if it times out, the command outputs the IDs. Use the job and batch IDs to check the status of the job with the \"<%= config.bin %> force data bulk status\" command. A single job can contain many batches, depending on the length of the CSV file.\n\nSee \"Prepare CSV Files\" in the Bulk API Developer Guide for details on formatting your CSV file. (https://developer.salesforce.com/docs/atlas.en-us.api_asynch.meta/api_asynch/datafiles_csv_preparing.htm)\n\nBy default, the job runs the batches in parallel, which we recommend. You can run jobs serially by specifying the --serial flag. But don't process data in serial mode unless you know this would otherwise result in lock timeouts and you can't reorganize your batches to avoid the locks.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Bulk upsert records to the Contact object in your default org:\n<%= config.bin %> --sobject Contact --file files/contacts.csv --external-id Id",
      "Bulk upsert records to a custom object in an org with alias my-scratch and wait 5 minutes for the command to complete:\n<%= config.bin %> <%= command.id %> --sobject MyObject__c --file files/file.csv --external-id MyField__c --wait 5 --target-org my-scratch"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Org alias or username to use for the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "external-id": {
        "name": "external-id",
        "type": "option",
        "char": "i",
        "summary": "Name of the external ID field, or the Id field.",
        "required": true,
        "multiple": false,
        "aliases": [
          "externalid"
        ]
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "summary": "CSV file that contains the records to upsert.",
        "required": true,
        "multiple": false,
        "aliases": [
          "csvfile"
        ]
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the Salesforce object, either standard or custom, that you want to upsert records to.",
        "required": true,
        "multiple": false,
        "aliases": [
          "sobjecttype"
        ]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete before displaying the results.",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        }
      },
      "serial": {
        "name": "serial",
        "type": "boolean",
        "char": "r",
        "summary": "Run batches in serial mode.",
        "allowNo": false
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "lightning:generate:app",
    "summary": "Generate a Lightning App.",
    "description": "Generates a Lightning App bundle in the specified directory or the current working directory. The bundle consists of multiple files in a folder with the designated name.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata files for a Lightning app bundle called \"myapp\" in the current directory:\n<%= config.bin %> <%= command.id %> --name myapp",
      "Similar to the previous example, but generate the files in the \"force-app/main/default/aura\" directory:\n<%= config.bin %> <%= command.id %> --name myapp --output-dir force-app/main/default/aura"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Lightning App.",
        "description": "The name can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "appname"
        ]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "multiple": false,
        "options": [
          "DefaultLightningApp"
        ],
        "default": "DefaultLightningApp",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": [
          "outputdir"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "internal": {
        "name": "internal",
        "type": "boolean",
        "char": "i",
        "summary": "Generate lightning bundles without creating a -meta.xml file.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "lightning:generate:component",
    "summary": "Generate a bundle for an Aura component or a Lightning web component.",
    "description": "Generates the bundle in the specified directory or the current working directory. The bundle consists of multiple files in a directory with the designated name.  Lightning web components are contained in the directory with name \"lwc\", Aura components in \"aura\".\n\nTo generate a Lightning web component, pass \"--type lwc\" to the command. If you don’t specify --type, Salesforce CLI generates an Aura component by default.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata files for an Aura component bundle in the current directory:\n<%= config.bin %> <%= command.id %> --name mycomponent",
      "Generate a Lightning web component bundle in the current directory:\n<%= config.bin %> <%= command.id %> --name mycomponent --type lwc",
      "Generate an Aura component bundle in the \"force-app/main/default/aura\" directory:\n<%= config.bin %> <%= command.id %> --name mycomponent --output-dir force-app/main/default/aura",
      "Generate a Lightning web component bundle in the \"force-app/main/default/lwc\" directory:\n<%= config.bin %> <%= command.id %> --name mycomponent --type lwc --output-dir force-app/main/default/lwc"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Lightning Component.",
        "description": "The name can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "componentname"
        ]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "multiple": false,
        "options": [
          "default",
          "analyticsDashboard",
          "analyticsDashboardWithStep"
        ],
        "default": "default",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": [
          "outputdir"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "type": {
        "name": "type",
        "type": "option",
        "summary": "Type of the component bundle.",
        "multiple": false,
        "options": [
          "aura",
          "lwc"
        ],
        "default": "aura",
        "deprecateAliases": true
      },
      "internal": {
        "name": "internal",
        "type": "boolean",
        "char": "i",
        "summary": "Generate lightning bundles without creating a -meta.xml file.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "lightning:generate:event",
    "summary": "Generate a Lightning Event.",
    "description": "Generates a Lightning Event bundle in the specified directory or the current working directory. The bundle consists of multiple files in a folder with the designated name.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata files for a Lightning event bundle called \"myevent\" in the current directory:\n<%= config.bin %> <%= command.id %> --name myevent",
      "Similar to previous example, but generate the files in the \"force-app/main/default/aura\" directory:\n<%= config.bin %> <%= command.id %> --name myevent --output-dir force-app/main/default/aura"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Lightning Event.",
        "description": "The name can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "eventname"
        ]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "multiple": false,
        "options": [
          "DefaultLightningEvt"
        ],
        "default": "DefaultLightningEvt",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": [
          "outputdir"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "internal": {
        "name": "internal",
        "type": "boolean",
        "char": "i",
        "summary": "Generate lightning bundles without creating a -meta.xml file.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "lightning:generate:interface",
    "summary": "Generate a Lightning Interface.",
    "description": "Generates a Lightning Interface bundle in the specified directory or the current working directory. The bundle consists of multiple files in a folder with the designated name.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata files for a Lightning interface bundle called \"myinterface\" in the current directory:\n<%= config.bin %> <%= command.id %> --name myinterface",
      "Similar to the previous example but generate the files in the \"force-app/main/default/aura\" directory:\n<%= config.bin %> <%= command.id %> --name myinterface --output-dir force-app/main/default/aura"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Lightning Interface.",
        "description": "The name can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "interfacename"
        ]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "multiple": false,
        "options": [
          "DefaultLightningIntf"
        ],
        "default": "DefaultLightningIntf",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": [
          "outputdir"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "internal": {
        "name": "internal",
        "type": "boolean",
        "char": "i",
        "summary": "Generate lightning bundles without creating a -meta.xml file.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "force lightning lwc test create",
    "description": "creates a Lightning web component test file with boilerplate code inside a __tests__ directory.",
    "strict": true,
    "usage": "force:lightning:lwc:test:create -f <string> [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/sfdx-plugin-lwc-test",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "$ sfdx force:lightning:lwc:test:create -f force-app/main/default/lwc/myButton/myButton.js"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "filepath": {
        "name": "filepath",
        "type": "option",
        "char": "f",
        "description": "path to Lightning web component .js file to create a test for",
        "required": true,
        "multiple": false
      }
    },
    "args": {},
    "longDescription": "Creates a __tests__ directory in the specified directory. Creates a yourComponentName.test.js file with boilerplate code in the __tests__ directory.",
    "requiresProject": true,
    "flagsConfig": {
      "filepath": {
        "kind": "string",
        "char": "f",
        "description": "path to Lightning web component .js file to create a test for",
        "longDescription": "Path to Lightning web component .js file to create a test for.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    }
  },
  {
    "id": "force lightning lwc test run",
    "description": "invokes Lightning Web Components Jest unit tests.",
    "strict": true,
    "usage": "force:lightning:lwc:test:run [-d | --watch] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/sfdx-plugin-lwc-test",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "$ sfdx force:lightning:lwc:test:run",
      "$ sfdx force:lightning:lwc:test:run -w"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "debug": {
        "name": "debug",
        "type": "boolean",
        "char": "d",
        "description": "run tests in debug mode",
        "allowNo": false,
        "exclusive": [
          "watch"
        ]
      },
      "watch": {
        "name": "watch",
        "type": "boolean",
        "description": "run tests in watch mode",
        "allowNo": false,
        "exclusive": [
          "debug"
        ]
      }
    },
    "args": {
      "passthrough": {
        "name": "passthrough"
      }
    },
    "longDescription": "Invokes Lightning Web Components Jest unit tests.",
    "requiresProject": true,
    "flagsConfig": {
      "debug": {
        "kind": "boolean",
        "char": "d",
        "description": "run tests in debug mode",
        "longDescription": "Runs tests in a Node process that an external debugger can connect to. The run pauses until the debugger is connected. For more information, see: https://jestjs.io/docs/en/troubleshooting",
        "exclusive": [
          "watch"
        ],
        "allowNo": false,
        "type": "boolean"
      },
      "watch": {
        "kind": "boolean",
        "description": "run tests in watch mode",
        "longDescription": "Runs tests when a watched file changes. Watched files include the component under test and any files it references.",
        "exclusive": [
          "debug"
        ],
        "allowNo": false,
        "type": "boolean"
      }
    }
  },
  {
    "id": "force lightning lwc test setup",
    "description": "install Jest unit testing tools for Lightning Web Components.",
    "strict": true,
    "usage": "force:lightning:lwc:test:setup [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/sfdx-plugin-lwc-test",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "$ sfdx force:lightning:lwc:test:setup"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      }
    },
    "args": {},
    "longDescription": "Installs Jest unit testing tools for Lightning Web Components. For more information, see the Lightning Web Components Dev Guide: https://developer.salesforce.com/docs/component-library/documentation/lwc/lwc.testing",
    "requiresProject": true
  },
  {
    "id": "lightning:generate:test",
    "summary": "Generate a Lightning test.",
    "description": "Generates the test in the specified directory or the current working directory. The .resource file and associated metadata file are generated.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata files for the Lightning test called MyLightningTest in the current directory:\n<%= config.bin %> <%= command.id %> --name MyLightningTest",
      "Similar to the previous example but generate the files in the \"force-app/main/default/lightningTests\" directory:\n<%= config.bin %> <%= command.id %> --name MyLightningTest --output-dir force-app/main/default/lightningTests"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Lightning Test.",
        "description": "Name of the new Lightning test; can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "testname"
        ]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "multiple": false,
        "options": [
          "DefaultLightningTest"
        ],
        "default": "DefaultLightningTest",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": [
          "outputdir"
        ]
      },
      "internal": {
        "name": "internal",
        "type": "boolean",
        "char": "i",
        "summary": "Generate lightning bundles without creating a -meta.xml file.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "limits:api:display",
    "summary": "Display information about limits in your org.",
    "description": "For each limit, this command returns the maximum allocation and the remaining allocation based on usage. See this topic for a description of each limit: https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_limits.htm.",
    "strict": true,
    "pluginName": "@salesforce/plugin-limits",
    "pluginAlias": "@salesforce/plugin-limits",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display limits in your default org:\n<%= config.bin %> <%= command.id %>",
      "Display limits in the org with alias \"my-scratch-org\":\n<%= config.bin %> <%= command.id %> --target-org my-scratch-org"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "limits:recordcounts:display",
    "summary": "Display record counts for the specified standard or custom objects.",
    "description": "Use this command to get an approximate count of the records in standard or custom objects in your org. These record counts are the same as the counts listed in the Storage Usage page in the Setup UI. The record counts are approximate because they're calculated asynchronously and your org's storage usage isn't updated immediately. To display all available record counts, run the command without the --sobject flag.",
    "strict": true,
    "pluginName": "@salesforce/plugin-limits",
    "pluginAlias": "@salesforce/plugin-limits",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display all available record counts in your default org:\n<%= config.bin %> <%= command.id %>",
      "Display record counts for the Account, Contact, Lead, and Opportunity objects in your default org:\n<%= config.bin %> <%= command.id %> --sobject Account --sobject Contact --sobject Lead --sobject Opportunity",
      "Display record counts for the Account and Lead objects for the org with alias \"my-scratch-org\":\n<%= config.bin %> <%= command.id %> --sobject Account --sobject Lead --target-org my-scratch-org"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the standard or custom object for which to display record counts.",
        "multiple": true,
        "default": [],
        "aliases": [
          "sobjecttype"
        ],
        "delimiter": ","
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "project:convert:mdapi",
    "summary": "Convert metadata retrieved via Metadata API into the source format used in Salesforce DX projects.",
    "description": "To use Salesforce CLI to work with components that you retrieved via Metadata API, first convert your files from the metadata format to the source format using this command.\n\nTo convert files from the source format back to the metadata format, run \"<%= config.bin %> project convert source\".\n\nTo convert multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.",
    "strict": true,
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Convert metadata formatted files in the specified directory into source formatted files; writes converted files to your default package directory:\n$ <%= config.bin %> <%= command.id %> --root-dir path/to/metadata",
      "Similar to previous example, but writes converted files to the specified output directory:\n$ <%= config.bin %> <%= command.id %> --root-dir path/to/metadata --output-dir path/to/outputdir"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "root-dir": {
        "name": "root-dir",
        "type": "option",
        "char": "r",
        "summary": "Root directory that contains the Metadata API–formatted metadata.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "rootdir"
        ]
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory to store your files in after they’re converted to source format; can be an absolute or relative path.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "outputdir"
        ]
      },
      "manifest": {
        "name": "manifest",
        "type": "option",
        "char": "x",
        "summary": "File path to manifest (package.xml) of metadata types to convert.",
        "description": "If you specify this parameter, don’t specify --metadata or --source-dir.",
        "multiple": false,
        "deprecateAliases": true
      },
      "metadata-dir": {
        "name": "metadata-dir",
        "type": "option",
        "char": "p",
        "summary": "Root of directory or zip file of metadata formatted files to convert.",
        "description": "The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\n\nIf you specify this flag, don’t specify --manifest or --metadata. If the comma-separated list you’re supplying contains spaces, enclose the entire comma-separated list in one set of double quotes.",
        "multiple": true,
        "exclusive": [
          "manifest",
          "metadata"
        ],
        "deprecateAliases": true,
        "aliases": [
          "metadatapath"
        ],
        "delimiter": ","
      },
      "metadata": {
        "name": "metadata",
        "type": "option",
        "char": "m",
        "summary": "Metadata component names to convert.",
        "multiple": true,
        "exclusive": [
          "manifest",
          "metadatapath"
        ],
        "deprecateAliases": true,
        "delimiter": ","
      }
    },
    "args": {},
    "requiresProject": true,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "force:mdapi:deploy",
    "summary": "Deploy metadata to an org using Metadata API.",
    "strict": true,
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "Return a job ID you can use to check the deploy status:\n<%= config.bin %> <%= command.id %> --deploydir some/path",
      "Deploy and poll for 1000 minutes:\n<%= config.bin %> <%= command.id %> --deploydir some/path --wait 1000",
      "Deploy a ZIP file:\n<%= config.bin %> <%= command.id %> --zipfile stuff.zip",
      "Validate a deployment so the ID can be used for a quick deploy:\n<%= config.bin %> <%= command.id %> --deploydir some/path --wait 1000 --checkonly --testlevel RunAllTestsInOrg",
      "Quick deploy using a previously validated deployment:\n<%= config.bin %> <%= command.id %> --validateddeployrequestid MyValidatedId"
    ],
    "deprecationOptions": {
      "to": "project deploy start",
      "message": "We plan to deprecate this command in the future. Try using the \"project deploy start\" command instead."
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "u",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "checkonly": {
        "name": "checkonly",
        "type": "boolean",
        "char": "c",
        "summary": "Validates the deployed metadata and runs all Apex tests, but prevents the deployment from being saved to the org.",
        "description": "IMPORTANT: Where possible, we changed noninclusive terms to align with our company value of Equality. We maintained certain terms to avoid any effect on customer implementations.\n\nIf you change a field type from Master-Detail to Lookup or vice versa, that change isn’t supported when using the --checkonly parameter to test a deployment (validation). This kind of change isn’t supported for test deployments to avoid the risk of data loss or corruption. If a change that isn’t supported for test deployments is included in a deployment package, the test deployment fails and issues an error.\n\nIf your deployment package changes a field type from Master-Detail to Lookup or vice versa, you can still validate the changes prior to deploying to Production by performing a full deployment to another test Sandbox. A full deployment includes a validation of the changes as part of the deployment process.\n\nNote: A Metadata API deployment that includes Master-Detail relationships deletes all detail records in the Recycle Bin in the following cases.\n\n    1. For a deployment with a new Master-Detail field, soft delete (send to the Recycle Bin) all detail records before proceeding to deploy the Master-Detail field, or the deployment fails. During the deployment, detail records are permanently deleted from the Recycle Bin and cannot be recovered.\n    2. For a deployment that converts a Lookup field relationship to a Master-Detail relationship, detail records must reference a master record or be soft-deleted (sent to the Recycle Bin) for the deployment to succeed. However, a successful deployment permanently deletes any detail records in the Recycle Bin.",
        "allowNo": false
      },
      "deploydir": {
        "name": "deploydir",
        "type": "option",
        "char": "d",
        "summary": "Root of directory tree that contains the files you want to deploy.",
        "description": "The root must contain a valid package.xml file describing the entities in the directory structure. Required to initiate a deployment if you don’t use --zipfile. If you specify both --zipfile and --deploydir, a zip file of the contents of the --deploydir directory is written to the location specified by --zipfile.",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to finish; specify -1 to wait indefinitely.",
        "description": "The default is 0 (returns immediately).",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        }
      },
      "testlevel": {
        "name": "testlevel",
        "type": "option",
        "char": "l",
        "summary": "Level of deployment tests to run.",
        "description": "Valid values are:\n\n    * NoTestRun—No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\n    * RunSpecifiedTests—Runs only the tests that you specify in the --runtests option. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\n    * RunLocalTests—All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\n    * RunAllTestsInOrg—All tests in your org are run, including tests of managed packages.\n\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see “Running Tests in a Deployment” in the Metadata API Developer Guide.",
        "multiple": false,
        "options": [
          "NoTestRun",
          "RunSpecifiedTests",
          "RunLocalTests",
          "RunAllTestsInOrg"
        ]
      },
      "runtests": {
        "name": "runtests",
        "type": "option",
        "char": "r",
        "summary": "Apex test classes to run if --testlevel is RunSpecifiedTests.",
        "multiple": true,
        "delimiter": ","
      },
      "ignoreerrors": {
        "name": "ignoreerrors",
        "type": "boolean",
        "char": "o",
        "summary": "Ignore any errors and don't roll back the deployment.",
        "description": "The default is false. Keep this parameter set to false when deploying to a production org. If set to true, components without errors are deployed, and components with errors are skipped.",
        "allowNo": false
      },
      "ignorewarnings": {
        "name": "ignorewarnings",
        "type": "boolean",
        "char": "g",
        "summary": "Ignore any warnings and don't roll back the deployment.",
        "description": "If a warning occurs and ignoreWarnings is set to true, the success field in DeployMessage is true. When ignoreWarnings is set to false, success is set to false, and the warning is treated like an error.\nThis field is available in API version 18.0 and later. Prior to version 18.0, there was no distinction between warnings and errors. All problems were treated as errors and prevented a successful deployment.",
        "allowNo": false
      },
      "validateddeployrequestid": {
        "name": "validateddeployrequestid",
        "type": "option",
        "char": "q",
        "summary": "Request ID of the validated deployment to run a Quick Deploy.",
        "description": "Deploying a validation helps you shorten your deployment time because tests aren’t rerun. If you have a recent successful validation, you can deploy the validated components without running tests. A validation doesn’t save any components in the org. You use a validation only to check the success or failure messages that you would receive with an actual deployment. To validate your components, add the -c | --checkonly flag when you run 'force mdapi deploy'. This flag sets the checkOnly='true' parameter for your deployment. Before deploying a recent validation, ensure that the following requirements are met:\n\n    1. The components have been validated successfully for the target environment within the last 10 days.\n    2. As part of the validation, Apex tests in the target org have passed.\n    3. Code coverage requirements are met.\n       - If all tests in the org or all local tests are run, overall code coverage is at least 75%, and Apex triggers have some coverage.\n       - If specific tests are run with the RunSpecifiedTests test level, each class and trigger that was deployed is covered by at least 75% individually.",
        "multiple": false,
        "exclusive": [
          "testlevel",
          "runtests",
          "checkonly"
        ]
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Display verbose output of the deploy results.",
        "description": "Indicates that you want verbose output from the deploy operation.",
        "allowNo": false
      },
      "zipfile": {
        "name": "zipfile",
        "type": "option",
        "char": "f",
        "summary": "Path to .zip file of metadata to deploy.",
        "description": "You must indicate this option or --deploydir. If you specify both --zipfile and --deploydir, a .zip file of the contents of the deploy directory is created at the path specified for the .zip file.",
        "multiple": false
      },
      "singlepackage": {
        "name": "singlepackage",
        "type": "boolean",
        "char": "s",
        "summary": "Indicates that the zip file points to a directory structure for a single package.",
        "description": "By default, the CLI assumes the directory is structured for a set of packages.",
        "allowNo": false
      },
      "soapdeploy": {
        "name": "soapdeploy",
        "type": "boolean",
        "summary": "Deploy metadata with SOAP API instead of REST API.",
        "description": "Because SOAP API has a lower .ZIP file size limit (400 MB uncompressed, 39 MB compressed), Salesforce recommends REST API deployment. This flag provides backwards compatibility with API version 50.0 and earlier when deploy used SOAP API by default.",
        "allowNo": false
      },
      "purgeondelete": {
        "name": "purgeondelete",
        "type": "boolean",
        "summary": "Specify that deleted components in the destructive changes manifest file are immediately eligible for deletion rather than being stored in the Recycle Bin.",
        "allowNo": false
      },
      "concise": {
        "name": "concise",
        "type": "boolean",
        "summary": "Omit success messages for smaller JSON output.",
        "allowNo": false
      },
      "resultsdir": {
        "name": "resultsdir",
        "type": "option",
        "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
        "multiple": false
      },
      "coverageformatters": {
        "name": "coverageformatters",
        "type": "option",
        "summary": "Format of the code coverage results.",
        "helpValue": "clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary",
        "multiple": true,
        "options": [
          "clover",
          "cobertura",
          "html-spa",
          "html",
          "json",
          "json-summary",
          "lcovonly",
          "none",
          "teamcity",
          "text",
          "text-summary"
        ],
        "delimiter": ","
      },
      "junit": {
        "name": "junit",
        "type": "boolean",
        "summary": "Output JUnit test results.",
        "allowNo": false
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "force:mdapi:deploy:cancel",
    "summary": "Cancel a metadata deployment.",
    "description": "Use this command to cancel a specified asynchronous metadata deployment. You can also specify a wait time (in minutes) to check for updates to the canceled deploy status.\n\nCancels an asynchronous metadata deployment.",
    "strict": true,
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "Cancel a deployment and wait two minutes:\n<%= config.bin %> <%= command.id %> --wait 2",
      "If you have multiple deployments in progress and want to cancel a specific one, specify the job ID:\n<%= config.bin %> <%= command.id %> --jobid <jobid>"
    ],
    "deprecationOptions": {
      "to": "project deploy cancel",
      "message": "We plan to deprecate this command in the future. Try using the \"project deploy cancel\" command instead."
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes for the command to complete and display results to the terminal window.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        }
      },
      "jobid": {
        "name": "jobid",
        "type": "option",
        "char": "i",
        "summary": "Job ID of the deployment you want to cancel; defaults to your most recent CLI deployment.",
        "multiple": false
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "force:mdapi:deploy:report",
    "summary": "Check the status of a metadata deployment.",
    "description": "Specify the job ID for the deploy you want to check. The job ID is returned by the \"force mdapi deploy\" command when run without the --wait parameter. You can also specify a wait time (minutes) to check for updates to the deploy status.",
    "strict": true,
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "Check the status of the most recent deployment\n<%= config.bin %> <%= command.id %>",
      "Check the status of a deploy with job ID 1234 and wait for 10 minutes for the result:\n<%= config.bin %> <%= command.id %> --jobid 1234 --wait 10"
    ],
    "deprecationOptions": {
      "to": "project deploy report",
      "message": "We plan to deprecate this command in the future. Try using the \"project deploy start\" and \"project deploy report\" pair instead."
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to finish; use -1 to poll indefinitely.",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        }
      },
      "jobid": {
        "name": "jobid",
        "type": "option",
        "char": "i",
        "summary": "Job ID of the deployment to check; required if you’ve never deployed using Salesforce CLI; defaults to your most recent CLI deployment.",
        "description": "The job ID (id field value for AsyncResult) of the deployment you want to check. The job ID is required if you haven’t previously deployed using Salesforce CLI. If you deploy using Salesforce CLI and don’t specify a job ID, we use the ID of the most recent metadata deployment.",
        "multiple": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Verbose output of deploy results.",
        "allowNo": false
      },
      "concise": {
        "name": "concise",
        "type": "boolean",
        "summary": "Omit success messages for smaller JSON output.",
        "allowNo": false
      },
      "resultsdir": {
        "name": "resultsdir",
        "type": "option",
        "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
        "multiple": false
      },
      "coverageformatters": {
        "name": "coverageformatters",
        "type": "option",
        "summary": "Format of the code coverage results.",
        "helpValue": "clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary",
        "multiple": true,
        "options": [
          "clover",
          "cobertura",
          "html-spa",
          "html",
          "json",
          "json-summary",
          "lcovonly",
          "none",
          "teamcity",
          "text",
          "text-summary"
        ],
        "delimiter": ","
      },
      "junit": {
        "name": "junit",
        "type": "boolean",
        "summary": "Output JUnit test results.",
        "allowNo": false
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:list:metadata-types",
    "summary": "Display details about the metadata types that are enabled for your org.",
    "description": "The information includes Apex classes and triggers, custom objects, custom fields on standard objects, tab sets that define an app, and many other metadata types. Use this information to identify the syntax needed for a <name> element in a manifest file (package.xml).\n\nThe username that you use to connect to the org must have the Modify All Data or Modify Metadata Through Metadata API Functions permission.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display information about all known and enabled metadata types in the org with alias \"my-dev-org\" using API version 57.0:\n$ <%= config.bin %> <%= command.id %> --api-version 57.0 --target-org my-dev-org",
      "Display only the metadata types that aren't yet supported by Salesforce CLI in your default org and write the results to the specified file:\n$ <%= config.bin %> <%= command.id %> --output-file /path/to/outputfilename.txt --filter-known"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "summary": "API version to use; default is the most recent API version.",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion",
          "a"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "output-file": {
        "name": "output-file",
        "type": "option",
        "char": "f",
        "summary": "Pathname of the file in which to write the results.",
        "description": "Directing the output to a file makes it easier to extract relevant information for your package.xml manifest file. The default output destination is the terminal or command window console.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "resultfile"
        ]
      },
      "filter-known": {
        "name": "filter-known",
        "type": "boolean",
        "char": "k",
        "summary": "Filter the known metadata types from the result to display only the types not yet fully supported by Salesforce CLI.\n\nfilter metadata known by the CLI",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "filterknown"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:list:metadata",
    "summary": "List the metadata components and properties of a specified type.",
    "description": "Use this command to identify individual components in your manifest file or if you want a high-level view of particular metadata types in your org. For example, you can use this command to return a list of names of all the CustomObject or Layout components in your org, then use this information in a retrieve command that returns a subset of these components.\n\nThe username that you use to connect to the org must have the Modify All Data or Modify Metadata Through Metadata API Functions permission.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List the CustomObject components, and their properties, in the org with alias \"my-dev-org\":\n$ <%= config.bin %> <%= command.id %> --metadata-type CustomObject --target-org my-dev-org",
      "List the CustomObject components in your default org, write the output to the specified file, and use API version 57.0:\n$ <%= config.bin %> <%= command.id %> --metadata-type CustomObject --api-version 57.0 --output-file /path/to/outputfilename.txt",
      "List the Dashboard components in your default org that are contained in the \"folderSales\" folder, write the output to the specified file, and use API version 57.0:\n$ <%= config.bin %> <%= command.id %> --metadata-type Dashboard --folder folderSales --api-version 57.0 --output-file /path/to/outputfilename.txt"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "summary": "API version to use; default is the most recent API version.",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion",
          "a"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "output-file": {
        "name": "output-file",
        "type": "option",
        "char": "f",
        "summary": "Pathname of the file in which to write the results.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "resultfile"
        ]
      },
      "metadata-type": {
        "name": "metadata-type",
        "type": "option",
        "char": "m",
        "summary": "Metadata type to be retrieved, such as CustomObject; metadata type names are case-sensitive.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "metadatatype"
        ]
      },
      "folder": {
        "name": "folder",
        "type": "option",
        "summary": "Folder associated with the component; required for components that use folders; folder names are case-sensitive.",
        "description": "Examples of metadata types that use folders are Dashboard, Document, EmailTemplate, and Report.",
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "force:mdapi:retrieve",
    "summary": "Retrieve metadata from an org using Metadata API.",
    "description": "This command uses Metadata API to retrieve a .zip of XML files that represent metadata from the targeted org. You can retrieve and deploy up to 10,000 files or 400 MB (39 MB compressed) at one time.",
    "strict": true,
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "Retrieve metadata in the default project directory into the target directory:\n<%= config.bin %> <%= command.id %> --retrievetargetdir path/to/retrieve/dir",
      "Retrieve metadata defined in the specified manifest into the target directory:\n<%= config.bin %> <%= command.id %> --retrievetargetdir path/to/retrieve/dir --unpackaged package.xml",
      "Retrieve metadata defined by the specified directory, name the retrieved zipfile and extract all contents\n<%= config.bin %> <%= command.id %> --sourcedir path/to/apexClasses --retrievetargetdir path/to/retrieve/dir --unzip --zipfilename apexClasses.zip",
      "Enqueue a retrieve request but do not wait for the metadata to be retrieved:\n<%= config.bin %> <%= command.id %> --retrievetargetdir path/to/retrieve/dir --wait 0"
    ],
    "deprecationOptions": {
      "to": "project retrieve start",
      "message": "We plan to deprecate this command in the future. Try using the \"project retrieve start\" command instead."
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "retrievetargetdir": {
        "name": "retrievetargetdir",
        "type": "option",
        "char": "r",
        "summary": "Root of the directory structure where the retrieved .zip or metadata files are retrieved.",
        "required": true,
        "multiple": false
      },
      "unpackaged": {
        "name": "unpackaged",
        "type": "option",
        "char": "k",
        "summary": "Complete path for the manifest file that specifies the components to retrieve.",
        "multiple": false,
        "exclusive": [
          "sourcedir",
          "packagenames"
        ]
      },
      "sourcedir": {
        "name": "sourcedir",
        "type": "option",
        "char": "d",
        "summary": "Source directory to use instead of the default package directory specified in sfdx-project.json.",
        "multiple": false,
        "exclusive": [
          "unpackaged",
          "packagenames"
        ]
      },
      "packagenames": {
        "name": "packagenames",
        "type": "option",
        "char": "p",
        "summary": "Comma-separated list of packages to retrieve.",
        "multiple": true,
        "exclusive": [
          "sourcedir",
          "unpackaged"
        ],
        "delimiter": ","
      },
      "singlepackage": {
        "name": "singlepackage",
        "type": "boolean",
        "char": "s",
        "summary": "Specify that the zip file points to a directory structure for a single package.",
        "description": "By default, the CLI assumes the directory is structured for a set of packages.",
        "allowNo": false
      },
      "zipfilename": {
        "name": "zipfilename",
        "type": "option",
        "char": "n",
        "summary": "File name to use for the retrieved zip file.",
        "multiple": false
      },
      "unzip": {
        "name": "unzip",
        "type": "boolean",
        "char": "z",
        "summary": "Extract all files from the retrieved zip file.",
        "allowNo": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete.",
        "multiple": false,
        "default": {
          "quantity": 1440,
          "unit": 0
        }
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "char": "a",
        "summary": "Target API version for the retrieve.",
        "description": "Use to override the default, which is the latest version supported by your CLI plug-in, with the version in your package.xml file.",
        "multiple": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Display verbose output of retrieve result.",
        "allowNo": false
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "force:mdapi:retrieve:report",
    "summary": "Check the status of a metadata retrieval.",
    "description": "Specify the job ID and a target directory for the retrieve you want to check. You can also specify a wait time (minutes) to check for updates to the retrieve status. If the retrieve was successful, the resulting zip file will be saved to the location passed in with the retrieve target parameter.",
    "strict": true,
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "Poll until the metadata is retrieved (or timeout is reached) using data from the last force:mdapi:retrieve command:\n<%= config.bin %> <%= command.id %>",
      "Report the current status of the last retrieve command. If the retrieve is complete the zip file of metadata is written to the target directoy:\n<%= config.bin %> <%= command.id %> --retrievetargetdir path/to/retrieve/dir --wait 0",
      "Poll until the metadata is retrieved (or timeout is reached) using the provided RetrieveID, naming the zip file and extracting all contents:\n<%= config.bin %> <%= command.id %> -i retrieveId --retrievetargetdir path/to/retrieve/dir --unzip --zipfilename apexClasses.zip"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "retrievetargetdir": {
        "name": "retrievetargetdir",
        "type": "option",
        "char": "r",
        "summary": "Root of the directory structure where the retrieved .zip or metadata files are retrieved.",
        "multiple": false
      },
      "jobid": {
        "name": "jobid",
        "type": "option",
        "char": "i",
        "summary": "Job ID of the retrieve you want to check; defaults to your most recent CLI retrieval.",
        "description": "You must specify a --retrievetargetdir. Use with --wait to resume waiting.",
        "multiple": false
      },
      "zipfilename": {
        "name": "zipfilename",
        "type": "option",
        "char": "n",
        "summary": "File name to use for the retrieved zip file.",
        "multiple": false
      },
      "unzip": {
        "name": "unzip",
        "type": "boolean",
        "char": "z",
        "summary": "Extract all files from the retrieved zip file.",
        "allowNo": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete.",
        "multiple": false,
        "default": {
          "quantity": 1440,
          "unit": 0
        }
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Display verbose output of retrieve result.",
        "allowNo": false
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "force:org:clone",
    "summary": "Clone a sandbox org.",
    "description": "There are two ways to clone a sandbox: either specify a sandbox definition file or provide key=value pairs at the command line. Key-value pairs at the command-line override their equivalent sandbox definition file values. In either case, you must specify both the \"SandboxName\" and \"SourceSandboxName\" options to set the names of the new sandbox and the one being cloned, respectively.\n\nSet the --targetusername (-u) parameter to a production org with sandbox licenses. The --type (-t) parameter is required and must be set to \"sandbox\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "$ <%= config.bin %> <%= command.id %> -t sandbox -f config/dev-sandbox-def.json -u prodOrg -a MyDevSandbox",
      "$ <%= config.bin %> <%= command.id %> -t sandbox SandboxName=NewClonedSandbox SourceSandboxName=ExistingSandbox -u prodOrg -a MyDevSandbox"
    ],
    "deprecationOptions": {
      "to": "org:create:sandbox",
      "version": "60.0"
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "type": {
        "name": "type",
        "type": "option",
        "char": "t",
        "summary": "Type of org to create.",
        "required": true,
        "multiple": false,
        "options": [
          "sandbox"
        ]
      },
      "definitionfile": {
        "name": "definitionfile",
        "type": "option",
        "char": "f",
        "summary": "Path to the sandbox definition file.",
        "multiple": false
      },
      "setdefaultusername": {
        "name": "setdefaultusername",
        "type": "boolean",
        "char": "s",
        "summary": "Set the cloned org as your default.",
        "allowNo": false
      },
      "setalias": {
        "name": "setalias",
        "type": "option",
        "char": "a",
        "summary": "Alias for the cloned org.",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait while polling for status.",
        "description": "Sets the streaming client socket timeout, in minutes. If the streaming client socket has no contact from the server for a number of minutes, the client exits. Specify a longer wait time if timeouts occur frequently.",
        "multiple": false,
        "default": {
          "quantity": 6,
          "unit": 0
        }
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "SANDBOXDEF_SRC_SANDBOXNAME": "SourceSandboxName",
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "force:org:create",
    "summary": "Create a scratch org or sandbox.",
    "description": "Creates a scratch org or a sandbox org using the values specified in a configuration file or key=value pairs that you specify on the command line. Values specified on the command line override values in the configuration file. Specify a configuration file or provide key=value pairs while creating a scratch org or a sandbox. When creating scratch orgs, —targetdevhubusername (-v) must be a Dev Hub org. When creating sandboxes, the --targetusername (-u) must be a production org with sandbox licenses. The —type (-t) is required if creating a sandbox.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "$ <%= config.bin %> <%= command.id %> -f config/enterprise-scratch-def.json -a MyScratchOrg",
      "$ <%= config.bin %> <%= command.id %> edition=Developer -a MyScratchOrg -s -v devHub",
      "$ <%= config.bin %> <%= command.id %> -f config/enterprise-scratch-def.json -a ScratchOrgWithOverrides username=testuser1@mycompany.org",
      "$ <%= config.bin %> <%= command.id %> -t sandbox -f config/dev-sandbox-def.json -a MyDevSandbox -u prodOrg"
    ],
    "deprecationOptions": {
      "message": "The force:org:create command has been replaced. Try org:create:scratch or org:create:sandbox."
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the production org that contains the sandbox license.",
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": false,
        "multiple": false,
        "aliases": [
          "targetdevhubusername"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "type": {
        "name": "type",
        "type": "option",
        "char": "t",
        "summary": "Type of org to create.",
        "multiple": false,
        "options": [
          "scratch",
          "sandbox"
        ],
        "default": "scratch"
      },
      "definitionfile": {
        "name": "definitionfile",
        "type": "option",
        "char": "f",
        "summary": "Path to an org definition file.",
        "multiple": false
      },
      "nonamespace": {
        "name": "nonamespace",
        "type": "boolean",
        "char": "n",
        "summary": "Create the scratch org with no namespace.",
        "allowNo": false
      },
      "noancestors": {
        "name": "noancestors",
        "type": "boolean",
        "char": "c",
        "summary": "Do not include second-generation package ancestors in the scratch org.",
        "allowNo": false
      },
      "clientid": {
        "name": "clientid",
        "type": "option",
        "char": "i",
        "summary": "Connected app consumer key; not supported for sandbox org creation.",
        "multiple": false
      },
      "setdefaultusername": {
        "name": "setdefaultusername",
        "type": "boolean",
        "char": "s",
        "summary": "Set the created org as the default username.",
        "allowNo": false
      },
      "setalias": {
        "name": "setalias",
        "type": "option",
        "char": "a",
        "summary": "Alias for the created org.",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Streaming client socket timeout (in minutes).",
        "multiple": false,
        "default": {
          "quantity": 6,
          "unit": 0
        }
      },
      "durationdays": {
        "name": "durationdays",
        "type": "option",
        "char": "d",
        "summary": "Duration of the scratch org (in days) (default:7, min:1, max:30).",
        "multiple": false,
        "default": 7
      },
      "retry": {
        "name": "retry",
        "type": "option",
        "summary": "Number of scratch org auth retries after scratch org is successfully signed up.",
        "hidden": true,
        "multiple": false,
        "default": 0
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "force:org:delete",
    "summary": "Delete a scratch or sandbox org.",
    "description": "Salesforce CLI marks the org for deletion in either the Dev Hub org (for scratch orgs) or production org (for sandboxes)\nand then deletes all local references to the org from your computer.\n\nTo mark the org for deletion without being prompted to confirm, specify --noprompt.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "$ <%= config.bin %> <%= command.id %> -u me@my.org",
      "$ <%= config.bin %> <%= command.id %> -u MyOrgAlias -p"
    ],
    "deprecationOptions": {
      "message": "The force:org:delete command is deprecated. Use org:delete:scratch or org:delete:sandbox."
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "summary": "The targetdevhubusername flag exists only for backwards compatibility. It is not necessary and has no effect.",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "version": "58.0",
          "message": "The targetdevhubusername flag exists only for backwards compatibility. It is not necessary and has no effect."
        }
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "No prompt to confirm deletion.",
        "allowNo": false,
        "aliases": [
          "noprompt"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:display",
    "summary": "Display information about an org.",
    "description": "Output includes your access token, client Id, connected status, org ID, instance URL, username, and alias, if applicable.\n\nUse --verbose to include the SFDX auth URL. WARNING: The SFDX auth URL contains sensitive information, such as a refresh token that can be used to access an org. Don't share or distribute this URL or token.\n\nIncluding --verbose displays the sfdxAuthUrl property only if you authenticated to the org using auth:web:login (not auth:jwt:grant).",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display information about your default org:\n$ <%= config.bin %> <%= command.id %>",
      "Display information, including the sfdxAuthUrl property, about the org with alias TestOrg1:\n$ <%= config.bin %> <%= command.id %> --target-org TestOrg1 --verbose"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Display the sfdxAuthUrl property.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:list",
    "summary": "List all orgs you’ve created or authenticated to.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List all orgs you've created or authenticated to:\n$ <%= config.bin %> <%= command.id %>",
      "List all orgs, including expired, deleted, and unknown-status orgs; don't include the connection status:\n$ <%= config.bin %> <%= command.id %> --skip-connection-status --all",
      "List orgs and remove local org authorization info about non-active scratch orgs:\n$ <%= config.bin %> <%= command.id %> --clean"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "List more information about each org.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "all": {
        "name": "all",
        "type": "boolean",
        "summary": "Include expired, deleted, and unknown-status scratch orgs.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "clean": {
        "name": "clean",
        "type": "boolean",
        "summary": "Remove all local org authorizations for non-active scratch orgs. Use auth:logout to remove non-scratch orgs.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "Don't prompt for confirmation.",
        "allowNo": false,
        "dependsOn": [
          "clean"
        ],
        "deprecateAliases": true,
        "aliases": [
          "noprompt"
        ]
      },
      "skip-connection-status": {
        "name": "skip-connection-status",
        "type": "boolean",
        "summary": "Skip retrieving the connection status of non-scratch orgs.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "skipconnectionstatus"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "org:open",
    "summary": "Open your default scratch org, or another specified org, in a browser.",
    "description": "To open a specific page, specify the portion of the URL after \"https://MyDomainName.my.salesforce.com/\" as the value for the --path flag. For example, specify \"--path lightning\" to open Lightning Experience, or specify \"--path /apex/YourPage\" to open a Visualforce page.\n\nUse the --source-file to open a Lightning Page from your local project in Lightning App Builder. Lightning page files have the suffix .flexipage-meta.xml, and are stored in the \"flexipages\" directory.\n\nTo generate a URL but not launch it in your browser, specify --url-only.\n\nTo open in a specific browser, use the --browser flag. Supported browsers are \"chrome\", \"edge\", and \"firefox\". If you don't specify --browser, the org opens in your default browser.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Open your default org in your default browser:\n$ <%= config.bin %> <%= command.id %>",
      "Open the org with alias MyTestOrg1 in the Firefox browser:\n$ <%= config.bin %> <%= command.id %> --target-org MyTestOrg1 --browser firefox",
      "Display the navigation URL for the Lightning Experience page for your default org, but don't open the page in a browser:\n$ <%= config.bin %> <%= command.id %> --url-only --path lightning",
      "Open a local Lightning page in your default org's Lightning App Builder:\n$ <%= config.bin %> <%= command.id %> --source-path force-app/main/default/flexipages/Hello.flexipage-meta.xml"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "browser": {
        "name": "browser",
        "type": "option",
        "char": "b",
        "summary": "Browser where the org opens.",
        "multiple": false,
        "options": [
          "chrome",
          "edge",
          "firefox"
        ],
        "exclusive": [
          "url-only"
        ],
        "deprecateAliases": true
      },
      "path": {
        "name": "path",
        "type": "option",
        "char": "p",
        "summary": "Navigation URL path to open a specific page.",
        "multiple": false,
        "exclusive": [
          "source-file"
        ],
        "deprecateAliases": true
      },
      "url-only": {
        "name": "url-only",
        "type": "boolean",
        "char": "r",
        "summary": "Display navigation URL, but don’t launch browser.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "urlonly"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "source-file": {
        "name": "source-file",
        "type": "option",
        "char": "f",
        "summary": "Path to an ApexPage or FlexiPage to open in Lightning App Builder.",
        "multiple": false,
        "exclusive": [
          "path"
        ],
        "deprecateAliases": true,
        "aliases": [
          "sourcefile"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:create:shape",
    "summary": "Create a scratch org configuration (shape) based on the specified source org.",
    "description": "Scratch org shapes mimic the baseline setup (features, limits, edition, and Metadata API settings) of a source org without the extraneous data and metadata.\n\nRun \"<%= config.bin %> org list shape\" to view the available org shapes and their IDs.\n\nTo create a scratch org from an org shape, include the \"sourceOrg\" property in the scratch org definition file and set it to the org ID of the source org. Then create a scratch org with the \"<%= config.bin %> force:org:create\" command.",
    "strict": true,
    "pluginName": "@salesforce/plugin-signups",
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create an org shape for the source org with alias SourceOrg:\n<%= config.bin %> <%= command.id %> --target-org SourceOrg"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:delete:shape",
    "summary": "Delete all org shapes for a target org.",
    "description": "A source org can have only one active org shape. If you try to create an org shape for a source org that already has one, the previous shape is marked inactive and replaced by a new active shape. If you don’t want to create scratch orgs based on this shape, you can delete the org shape.",
    "strict": true,
    "pluginName": "@salesforce/plugin-signups",
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Delete all org shapes for the source org with alias SourceOrg:\n<%= config.bin %> <%= command.id %> --target-org SourceOrg",
      "Delete all org shapes without prompting:\n<%= config.bin %> <%= command.id %> --target-org SourceOrg --no-prompt"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "Don't prompt for confirmation.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "noprompt"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:list:shape",
    "summary": "List all org shapes you’ve created.",
    "description": "The output includes the alias, username, and ID of the source org, the status of the org shape creation, and more. Use the org ID to update your scratch org configuration file so you can create a scratch org based on this org shape.",
    "strict": true,
    "pluginName": "@salesforce/plugin-signups",
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List all org shapes you've created:\n<%= config.bin %> <%= command.id %>",
      "List all org shapes in JSON format and write the output to a file:\n<%= config.bin %> <%= command.id %> --json > tmp/MyOrgShapeList.json"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "List more information about each org shape.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "org:create:snapshot",
    "summary": "Create a snapshot of a scratch org.",
    "description": "A snapshot is a point-in-time copy of a scratch org. The copy is referenced by its unique name in a scratch org definition file.\n\nUse \"<%= config.bin %> org get snapshot\" to get details, including status, about a snapshot creation request.\n\nTo create a scratch org from a snapshot, include the \"snapshot\" option (instead of \"edition\") in the scratch org definition file and set it to the name of the snapshot. Then use \"<%= config.bin %> force:org:create\" to create the scratch org.",
    "strict": true,
    "pluginName": "@salesforce/plugin-signups",
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create a snapshot called \"Dependencies\" using the source scratch org ID and your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --source-org 00Dxx0000000000 --name Dependencies --description 'Contains PackageA v1.1.0'",
      "Create a snapshot called \"NightlyBranch\" using the source scratch org username and a Dev Hub org with alias NightlyDevHub:\n<%= config.bin %> <%= command.id %> --source-org myuser@myorg --name NightlyBranch --description 'Contains PkgA v2.1.0 and PkgB 3.3.0' --target-dev-hub NightlyDevHub"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "source-org": {
        "name": "source-org",
        "type": "option",
        "char": "o",
        "summary": "ID or locally authenticated username or alias of scratch org to snapshot.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "sourceorg"
        ]
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Unique name of snapshot.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "snapshotname"
        ]
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "summary": "Description of snapshot.",
        "description": "Use this description to document the contents of the snapshot. We suggest that you include a reference point, such as a version control system tag or commit ID.",
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:delete:snapshot",
    "summary": "Delete a scratch org snapshot.",
    "description": "Dev Hub admins can delete any snapshot, while users can delete only their own unless a Dev Hub admin gives the user Modify All permissions.",
    "strict": true,
    "pluginName": "@salesforce/plugin-signups",
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Delete a snapshot from the default Dev Hub using the snapshot ID:\n<%= config.bin %> <%= command.id %> --snapshot 0Oo...",
      "Delete a snapshot from the specified Dev Hub using the snapshot name:\n<%= config.bin %> <%= command.id %> --snapshot BaseSnapshot --target-dev-hub SnapshotDevHub"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "snapshot": {
        "name": "snapshot",
        "type": "option",
        "char": "s",
        "summary": "Name or ID of snapshot to delete.",
        "description": "The IDs of scratch org snapshots start with 0Oo.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:get:snapshot",
    "summary": "Get details about a scratch org snapshot.",
    "description": "Snapshot creation can take a while. Use this command with the snapshot name or ID to check its creation status. After the status changes to Active, you can use the snapshot to create scratch orgs.\n\nTo create a snapshot, use the \"<%= config.bin %> org create snapshot\" command. To retrieve a list of all snapshots, use \"<%= config.bin %> org list snapshot\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-signups",
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Get snapshot details using its ID and the default Dev Hub org:\n<%= config.bin %> <%= command.id %> --snapshot 0Oo...",
      "Get snapshot details using its name from a Dev Hub org with alias SnapshotDevHub:\n<%= config.bin %> <%= command.id %> --snapshot Dependencies --target-dev-hub SnapshotDevHub"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "snapshot": {
        "name": "snapshot",
        "type": "option",
        "char": "s",
        "summary": "Name or ID of snapshot to retrieve.",
        "description": "The IDs of scratch org snapshots start with 0Oo.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:list:snapshot",
    "summary": "List scratch org snapshots.",
    "description": "You can view all the snapshots in a Dev Hub that you have access to. If you’re an admin, you can see all snapshots associated with the Dev Hub org. If you’re a user, you can see only your snapshots unless a Dev Hub admin gives you View All permissions.\n\nTo create a snapshot, use the \"<%= config.bin %> org create snapshot\" command. To get details about a snapshot request, use \"<%= config.bin %> org get snapshot\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-signups",
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List snapshots in the default Dev Hub:\n<%= config.bin %> <%= command.id %>",
      "List snapshots in the Dev Hub with alias SnapshotDevHub:\n<%= config.bin %> <%= command.id %> --target-dev-hub SnapshotDevHub"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "force:org:status",
    "summary": "Check the status of a sandbox, and if complete, authenticate to it.",
    "description": "Use this command to check the status of your sandbox creation or clone and, if the sandbox is ready, authenticate to it.\n\nUse the --wait (-w) parameter to specify the number of minutes that the command waits for the sandbox creation or clone to complete before returning control of the terminal to you.\n\nSet the --target-org (-o) parameter to the username or alias of the production org that contains the sandbox license.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "$ <%= config.bin %> <%= command.id %> --sandboxname DevSbx1 --setalias MySandbox -u prodOrg",
      "$ <%= config.bin %> <%= command.id %> --sandboxname DevSbx1 --wait 45 --setdefaultusername -u prodOrg"
    ],
    "deprecationOptions": {
      "to": "org:resume:sandbox",
      "version": "60.0"
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "sandboxname": {
        "name": "sandboxname",
        "type": "option",
        "char": "n",
        "summary": "Name of the sandbox org to check status for.",
        "required": true,
        "multiple": false
      },
      "setdefaultusername": {
        "name": "setdefaultusername",
        "type": "boolean",
        "char": "s",
        "summary": "Set the created or cloned org as your default.",
        "allowNo": false
      },
      "setalias": {
        "name": "setalias",
        "type": "option",
        "char": "a",
        "summary": "Alias for the created or cloned org.",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait while polling for status.",
        "multiple": false,
        "default": {
          "quantity": 6,
          "unit": 0
        }
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package1:version:create",
    "summary": "Create a first-generation package version in the release org.",
    "description": "The package version is based on the contents of the specified metadata package. Omit --managed-released if you want to create an unmanaged package version.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create a first-generation package version from the package with the specified ID and name the package version \"example\"; use your default org:\n<%= config.bin %> <%= command.id %> --package-id 033... --name example",
      "Same as previous example, but provide a description and wait for 30 minutes for the package version to be created; use the specified org:\n<%= config.bin %> <%= command.id %> --package-id 033... --name example --description \"example description\" --wait 30 --target-org myorg@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "package-id": {
        "name": "package-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the metadata package (starts with 033) of which you’re creating a new version.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "packageid"
        ]
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Package version name.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "summary": "Package version description.",
        "multiple": false,
        "deprecateAliases": true
      },
      "version": {
        "name": "version",
        "type": "option",
        "char": "v",
        "summary": "Package version in major.minor format, for example, 3.2.",
        "multiple": false,
        "deprecateAliases": true
      },
      "managed-released": {
        "name": "managed-released",
        "type": "boolean",
        "char": "m",
        "summary": "Create a managed package version.",
        "description": "To create a beta version, don’t include this parameter.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "managedrelease"
        ]
      },
      "release-notes-url": {
        "name": "release-notes-url",
        "type": "option",
        "char": "r",
        "summary": "Release notes URL.",
        "description": "This link is displayed in the package installation UI to provide release notes for this package version to subscribers.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "releasenotesurl"
        ]
      },
      "post-install-url": {
        "name": "post-install-url",
        "type": "option",
        "char": "p",
        "summary": "Post install URL.",
        "description": "The contents of the post-installation instructions URL are displayed in the UI after installation of the package version.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "postinstallurl"
        ]
      },
      "installation-key": {
        "name": "installation-key",
        "type": "option",
        "char": "k",
        "summary": "Installation key for key-protected package (default: null).",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "installationkey"
        ]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Minutes to wait for the package version to be created (default: 2 minutes).",
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package1:version:create:get",
    "summary": "Retrieve the status of a package version creation request.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Get the status of the creation request for the package version with the specified ID in your default org:\n<%= config.bin %> <%= command.id %> --request-id 0HD...",
      "Same as previous example, but use the specified org:\n<%= config.bin %> <%= command.id %> --request-id 0HD... --target-org myorg@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "request-id": {
        "name": "request-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the PackageUploadRequest (starts with 0HD).",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "requestid"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package1:version:display",
    "summary": "Display details about a first-generation package version.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display details about the first-generation package version with the specified ID in your default org:\n<%= config.bin %> <%= command.id %> --package-version-id 04t...",
      "Same as previous example, but use the specified org:\n<%= config.bin %> <%= command.id %> --package-version-id 04t... --target-org myorg@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "package-version-id": {
        "name": "package-version-id",
        "type": "option",
        "char": "i",
        "summary": "ID (starts with 04t) of the metadata package version whose details you want to display.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "packageversionid"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package1:version:list",
    "summary": "List package versions for the specified first-generation package or for the org.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List all first-generation package versions in your default org:\n<%= config.bin %> <%= command.id %>",
      "List package versions for the specified first-generation package in the specifief org:\n<%= config.bin %> <%= command.id %> --package-id 033... --target-org myorg@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "package-id": {
        "name": "package-id",
        "type": "option",
        "char": "i",
        "summary": "Metadata package ID (starts with 033) whose package versions you want to list.",
        "description": "If not specified, shows all versions for all packages (managed and unmanaged) in the org.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "packageid"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:create",
    "summary": "Create a package.",
    "description": "First, use this command to create a package. Then create a package version.\n\nIf you don’t have a namespace defined in your sfdx-project.json file, use --no-namespace.\n\nYour --name value must be unique within your namespace.\n\nRun '<%= config.bin %> package list to list all packages in the Dev Hub org.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create an unlocked package from the files in the \"force-app\" directory; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --name MyUnlockedPackage --package-type Unlocked --path force-app",
      "Create a managed packaged from the \"force-app\" directory files, give the package a description, and use the specified Dev Hub org:\n<%= config.bin %> <%= command.id %> --name MyManagedPackage --description \"Your Package Descripton\" --package-type Managed --path force-app --target-dev-hub devhub@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the package to create.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "package-type": {
        "name": "package-type",
        "type": "option",
        "char": "t",
        "summary": "Type of package.",
        "description": "The options for package type are Managed and Unlocked (Managed=DeveloperManagedSubscriberManaged, Unlocked=DeveloperControlledSubscriberEditable). These options determine upgrade and editability rules.",
        "required": true,
        "multiple": false,
        "options": [
          "Managed",
          "Unlocked"
        ],
        "deprecateAliases": true,
        "aliases": [
          "packagetype"
        ]
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "summary": "Description of the package.",
        "multiple": false,
        "deprecateAliases": true
      },
      "no-namespace": {
        "name": "no-namespace",
        "type": "boolean",
        "char": "e",
        "summary": "Create the package with no namespace; available only for unlocked packages.",
        "description": "This flag is useful when you’re migrating an existing org to packages. But use a namespaced package for new metadata.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "nonamespace"
        ]
      },
      "path": {
        "name": "path",
        "type": "option",
        "char": "r",
        "summary": "Path to directory that contains the contents of the package.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "org-dependent": {
        "name": "org-dependent",
        "type": "boolean",
        "summary": "Depends on unpackaged metadata in the installation org; applies to unlocked packages only.",
        "description": "Use Source Tracking in Sandboxes to develop your org-dependent unlocked package. For more information, see \"Create Org-Dependent Unlocked Packages\" in the Salesforce DX Developer Guide.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "orgdependent"
        ]
      },
      "error-notification-username": {
        "name": "error-notification-username",
        "type": "option",
        "char": "o",
        "summary": "Active Dev Hub user designated to receive email notifications for package errors.",
        "description": "Email notifications include information about unhandled Apex exceptions, and install, upgrade, or uninstall failures associated with your package.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "errornotificationusername"
        ]
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:delete",
    "summary": "Delete a package.",
    "description": "Specify the ID or alias of the package you want to delete.\n\nDelete unlocked and second-generation managed packages. Before you delete a package, first delete all associated package versions.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Delete a package using its alias from your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\"",
      "Delete a package using its ID from the specified Dev Hub org:\n<%= config.bin %> <%= command.id %> --package 0Ho... --target-dev-hub devhub@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "n",
        "summary": "Don’t prompt before deleting the package.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "noprompt"
        ]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 0Ho) or alias of the package to delete.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "undelete": {
        "name": "undelete",
        "type": "boolean",
        "summary": "Undelete a deleted package.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:install",
    "summary": "Install a version of a package in the target org.",
    "description": "To install a package, specify a specific version of the package using the 04t package ID. The package and the version you specified installs in your default target org unless you supply the username for a different target org.\n\nFor package upgrades, to specify options for component deprecation or deletion of removed components, include an --upgrade-type value. To delete components that can be safely deleted and deprecate the others, specify --upgrade-type Mixed (the default). To deprecate all removed components, specify --upgrade-type DeprecateOnly. To delete all removed components, except for custom objects and custom fields, that don't have dependencies, specify --upgrade-type Delete. (Note: This option can result in the loss of data that is associated with the deleted components.) The default is Mixed.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Install a package version with the specified ID in the org with username \"me@example.com\":\n<%= config.bin %> <%= command.id %> --package 04t... --target-org me@example.com",
      "Install a package version with the specified alias into your default org:\n<%= config.bin %> <%= command.id %> --package awesome_package_alias",
      "Install a package version with an alias that includes spaces into your default org:\n<%= config.bin %> <%= command.id %> --package \"Awesome Package Alias\"",
      "Install an unlocked package version with the specified ID and deprecate all removed components:\n<%= config.bin %> <%= command.id %> --package 04t... --upgrade-type DeprecateOnly"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for installation status.",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        },
        "deprecateAliases": true
      },
      "installation-key": {
        "name": "installation-key",
        "type": "option",
        "char": "k",
        "summary": "Installation key for key-protected package (default: null).",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "installationkey"
        ]
      },
      "publish-wait": {
        "name": "publish-wait",
        "type": "option",
        "char": "b",
        "summary": "Maximum number of minutes to wait for the Subscriber Package Version ID to become available in the target org before canceling the install request.",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        },
        "deprecateAliases": true,
        "aliases": [
          "publishwait"
        ]
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "r",
        "summary": "Don't prompt for confirmation.",
        "description": "Allows the following without an explicit confirmation response: 1) Remote Site Settings and Content Security Policy websites to send or receive data, and 2) --upgrade-type Delete to proceed.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "noprompt"
        ]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 04t) or alias of the package version to install.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "apex-compile": {
        "name": "apex-compile",
        "type": "option",
        "char": "a",
        "summary": "Compile all Apex in the org and package, or only Apex in the package; unlocked packages only.",
        "description": "Applies to unlocked packages only. Specifies whether to compile all Apex in the org and package, or only the Apex in the package.\n\nFor package installs into production orgs, or any org that has Apex Compile on Deploy enabled, the platform compiles all Apex in the org after the package install or upgrade operation completes.\n\nThis approach assures that package installs and upgrades don’t impact the performance of an org, and is done even if --apex-compile package is specified.",
        "multiple": false,
        "options": [
          "all",
          "package"
        ],
        "default": "all",
        "deprecateAliases": true,
        "aliases": [
          "apexcompile"
        ]
      },
      "security-type": {
        "name": "security-type",
        "type": "option",
        "char": "s",
        "summary": "Security access type for the installed package. (deprecation notice: The default --security-type value will change from AllUsers to AdminsOnly in v47.0 or later.)",
        "multiple": false,
        "options": [
          "AllUsers",
          "AdminsOnly"
        ],
        "default": "AdminsOnly",
        "deprecateAliases": true,
        "aliases": [
          "securitytype"
        ]
      },
      "upgrade-type": {
        "name": "upgrade-type",
        "type": "option",
        "char": "t",
        "summary": "Upgrade type for the package installation; available only for unlocked packages.",
        "description": "For package upgrades, specifies whether to mark all removed components as deprecated (DeprecateOnly), to delete removed components that can be safely deleted and deprecate the others (Mixed), or to delete all removed components, except for custom objects and custom fields, that don't have dependencies (Delete). The default is Mixed. Can specify DeprecateOnly or Delete only for unlocked package upgrades.",
        "multiple": false,
        "options": [
          "DeprecateOnly",
          "Mixed",
          "Delete"
        ],
        "default": "Mixed",
        "deprecateAliases": true,
        "aliases": [
          "upgradetype"
        ]
      },
      "skip-handlers": {
        "name": "skip-handlers",
        "type": "option",
        "char": "l",
        "summary": "Skip install handlers (available handlers: FeatureEnforcement).",
        "description": "Allows the installer of a package to optionally skip install handlers in order to decrease overall installation time (available handlers: FeatureEnforcement).",
        "hidden": true,
        "multiple": true,
        "options": [
          "FeatureEnforcement"
        ],
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:install:report",
    "summary": "Retrieve the status of a package installation request.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Retrieve the status of a package installation request with the specified ID on your default org:\n<%= config.bin %> <%= command.id %> --request-id 0Hf...",
      "Similar to previous example, except use the org with username me@example.com:\n<%= config.bin %> <%= command.id %> --request-id 0Hf... --target-org me@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "request-id": {
        "name": "request-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the package install request you want to check; starts with 0Hf.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "requestid"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:installed:list",
    "summary": "List the org’s installed packages.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List the installed packages in your default org:\n<%= config.bin %> <%= command.id %>",
      "List the installed packages in the org with username me@example.com:\n<%= config.bin %> <%= command.id %> --target-org me@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:list",
    "summary": "List all packages in the Dev Hub org.",
    "description": "Description",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List all packages in the specified Dev Hub org:\n<%= config.bin %> <%= command.id %> --target-dev-hub devhub@example.com",
      "List all packages details in the specified Dev Hub org, and show extended details about each package:\n<%= config.bin %> <%= command.id %> --target-dev-hub devhub@example.com --verbose"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Display extended package detail.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:uninstall",
    "summary": "Uninstall a second-generation package from the target org.",
    "description": "Specify the package ID for a second-generation package.\n\nTo list the org’s installed packages, run \"<%= config.bin %> package installed list\".\n\nTo uninstall a first-generation package, from Setup, enter Installed Packages in the Quick Find box, then select Installed Packages.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Uninstall a package with specified ID from an org with username me@example.com:\n<%= config.bin %> <%= command.id %> --package 04t... --target-org me@example.com",
      "Uninstall a package with the specified alias from your default org:\n<%= config.bin %> <%= command.id %> --package undesirable_package_alias",
      "Uninstall a package with an alias that contains spaces from your default org:\n<%= config.bin %> <%= command.id %> --package \"Undesirable Package Alias\""
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for uninstall status.",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        },
        "deprecateAliases": true
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 04t) or alias of the package version to uninstall.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:uninstall:report",
    "summary": "Retrieve the status of a package uninstall request.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Retrieve the status of a package uninstall in your default org using the specified request ID:\n<%= config.bin %> <%= command.id %> --request-id 06y...",
      "Similar to previous example, but use the org with username me@example.com:\n<%= config.bin %> <%= command.id %> --request-id 06y... --target-org me@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "request-id": {
        "name": "request-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the package uninstall request you want to check; starts with 06y.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "requestid"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:update",
    "summary": "Update package details.",
    "description": "Specify a new value for each option you want to update.\n\nRun \"<%= config.bin %> package list\" to list all packages in the Dev Hub org.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Update the name of the package with the specified alias; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\" --name \"New Package Name\"",
      "Update the description of the package with the specified ID; uses the specified Dev Hub org:\n<%= config.bin %> <%= command.id %> --package 0Ho... --description \"New Package Description\" --target-dev-hub devhub@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 0Ho) or alias of the package to update.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "New name of the package.",
        "multiple": false,
        "deprecateAliases": true
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "summary": "New description of the package.",
        "multiple": false,
        "deprecateAliases": true
      },
      "error-notification-username": {
        "name": "error-notification-username",
        "type": "option",
        "char": "o",
        "summary": "Active Dev Hub user designated to receive email notifications for package errors.",
        "description": "Email notifications include information about unhandled Apex exceptions, and install, upgrade, or uninstall failures associated with your package.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "errornotificationusername"
        ]
      },
      "enable-app-analytics": {
        "name": "enable-app-analytics",
        "type": "boolean",
        "summary": "Enable AppExchange App Analytics usage data collection on this managed package and its components.",
        "hidden": true,
        "allowNo": true,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:version:create",
    "summary": "Create a package version in the Dev Hub org.",
    "description": "The package version is based on the package contents in the specified directory.\n\nTo retrieve details about a package version create request, including status and package version ID (04t), run \"<%= config.bin %> package version create report -i 08c...\".\n\nWe recommend that you specify the --installation-key parameter to protect the contents of your package and to prevent unauthorized installation of your package.\n\nTo list package version creation requests in the org, run \"<%= config.bin %> package version create list\".\nTo promote a package version to released, you must use the --code-coverage parameter. The package must also meet the code coverage requirements. This requirement applies to both managed and unlocked packages.\n\nWe don’t calculate code coverage for org-dependent unlocked packages, or for package versions that specify --skip-validation.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create a package version from the contents of the \"common\" directory and give it an installation key of \"password123\"; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --path common --installation-key password123",
      "Create a package version from a package with the specified alias; uses the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\" --installation-key password123 --target-dev-hub devhub@example.com",
      "Create a package version from a package with the specified ID:\n<%= config.bin %> <%= command.id %> --package 0Ho... --installation-key password123",
      "Create a package version and skip the validation step:\n<%= config.bin %> <%= command.id %> --path common --installation-key password123 --skip-validation"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "branch": {
        "name": "branch",
        "type": "option",
        "char": "b",
        "summary": "Name of the branch in your source control system that the package version is based on.",
        "multiple": false,
        "deprecateAliases": true
      },
      "build-instance": {
        "name": "build-instance",
        "type": "option",
        "char": "s",
        "summary": "Instance where the package version will be created, such as NA50.",
        "hidden": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "buildinstance"
        ]
      },
      "code-coverage": {
        "name": "code-coverage",
        "type": "boolean",
        "char": "c",
        "summary": "Calculate and store the code coverage percentage by running the packaged Apex tests included in this package version.",
        "description": "Before you can promote and release a managed or unlocked package version, the Apex code must meet a minimum 75% code coverage requirement. We don’t calculate code coverage for org-dependent unlocked packages or for package versions that specify --skip-validation.",
        "allowNo": false,
        "exclusive": [
          "skip-validation"
        ],
        "deprecateAliases": true,
        "aliases": [
          "codecoverage"
        ]
      },
      "definition-file": {
        "name": "definition-file",
        "type": "option",
        "char": "f",
        "summary": "Path to a definition file similar to scratch org definition file that contains the list of features and org preferences that the metadata of the package version depends on.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "definitionfile"
        ]
      },
      "installation-key": {
        "name": "installation-key",
        "type": "option",
        "char": "k",
        "summary": "Installation key for key-protected package. (either --installation-key or --installation-key-bypass is required)",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "installationkey"
        ]
      },
      "installation-key-bypass": {
        "name": "installation-key-bypass",
        "type": "boolean",
        "char": "x",
        "summary": "Bypass the installation key requirement. (either --installation-key or --installation-key-bypass is required)",
        "description": "If you bypass this requirement, anyone can install your package.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "installationkeybypass"
        ]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 0Ho) or alias of the package to create a version of.",
        "multiple": false,
        "deprecateAliases": true
      },
      "path": {
        "name": "path",
        "type": "option",
        "char": "d",
        "summary": "Path to the directory that contains the contents of the package.",
        "multiple": false,
        "deprecateAliases": true
      },
      "post-install-script": {
        "name": "post-install-script",
        "type": "option",
        "summary": "Name of the post-install script; applies to managed packages only.",
        "description": "The post-install script is an Apex class within this package that is run in the installing org after installations or upgrades of this package version.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "postinstallscript"
        ]
      },
      "post-install-url": {
        "name": "post-install-url",
        "type": "option",
        "summary": "Post-install instructions URL.",
        "description": "The contents of the post-installation instructions URL are displayed in the UI after installation of the package version.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "postinstallurl"
        ]
      },
      "preserve": {
        "name": "preserve",
        "type": "boolean",
        "char": "r",
        "summary": "Preserve temp files that would otherwise be deleted.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      },
      "releasenotes-url": {
        "name": "releasenotes-url",
        "type": "option",
        "summary": "Release notes URL.",
        "description": "This link is displayed in the package installation UI to provide release notes for this package version to subscribers.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "releasenotesurl"
        ]
      },
      "skip-ancestor-check": {
        "name": "skip-ancestor-check",
        "type": "boolean",
        "summary": "Overrides ancestry requirements, which allows you to specify a package ancestor that isn’t the highest released package version.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "skipancestorcheck"
        ]
      },
      "skip-validation": {
        "name": "skip-validation",
        "type": "boolean",
        "summary": "Skip validation during package version creation; you can’t promote unvalidated package versions.",
        "description": "Skips validation of dependencies, package ancestors, and metadata during package version creation. Skipping validation reduces the time it takes to create a new package version, but you can promote only validated package versions. Skipping validation can suppress important errors that can surface at a later stage. You can specify skip validation or code coverage, but not both. Code coverage is calculated during validation.",
        "allowNo": false,
        "exclusive": [
          "code-coverage"
        ],
        "deprecateAliases": true,
        "aliases": [
          "skipvalidation"
        ]
      },
      "tag": {
        "name": "tag",
        "type": "option",
        "char": "t",
        "summary": "Package version’s tag.",
        "multiple": false,
        "deprecateAliases": true
      },
      "uninstall-script": {
        "name": "uninstall-script",
        "type": "option",
        "summary": "Uninstall script name; applies to managed packages only.",
        "description": "The uninstall script is an Apex class within this package that is run in the installing org after uninstallations of this package.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "uninstallscript"
        ]
      },
      "validate-schema": {
        "name": "validate-schema",
        "type": "boolean",
        "char": "j",
        "summary": "Validate the sfdx-project.json file against the JSON schema.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "validateschema"
        ]
      },
      "version-description": {
        "name": "version-description",
        "type": "option",
        "char": "e",
        "summary": "Description of the package version to be created; overrides the sfdx-project.json value.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "versiondescription"
        ]
      },
      "version-name": {
        "name": "version-name",
        "type": "option",
        "char": "a",
        "summary": "Name of the package version to be created; overrides the sfdx-project.json value.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "versionname"
        ]
      },
      "version-number": {
        "name": "version-number",
        "type": "option",
        "char": "n",
        "summary": "Version number of the package version to be created; overrides the sfdx-project.json value.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "versionnumber"
        ]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the package version to be created.",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        },
        "deprecateAliases": true
      },
      "language": {
        "name": "language",
        "type": "option",
        "summary": "Language for the package.",
        "description": "Specify the language using a language code listed under \"Supported Languages\" in Salesforce Help. If no language is specified, the language defaults to the language of the Dev Hub user who created the package.",
        "multiple": false,
        "deprecateAliases": true
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Display verbose command output.",
        "description": "Display verbose command output. When polling for the status of the creation, this will output status and timeout data on a separate line for each poll request, which is useful in CI systems where timeouts can occur with long periods of no output from commands.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:version:create:list",
    "summary": "List package version creation requests.",
    "description": "Shows the details of each request to create a package version in the Dev Hub org.\n\nAll filter parameters are applied using the AND logical operator (not OR).\n\nTo get information about a specific request, run \"<%= config.bin %> package version create report\" and supply the request ID.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List all package version creation requests in your default Dev Hub org:\n<%= config.bin %> <%= command.id %>",
      "List package version creation requests from the last 3 days in the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --created-last-days 3 --target-dev-hub",
      "List package version creation requests with status Error:\n<%= config.bin %> <%= command.id %> --status Error",
      "List package version creation requests with status InProgress:\n<%= config.bin %> <%= command.id %> --status InProgress",
      "List package version creation requests with status Success that were created today:\n<%= config.bin %> <%= command.id %> --created-last-days 0 --status Success"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "created-last-days": {
        "name": "created-last-days",
        "type": "option",
        "char": "c",
        "summary": "Number of days since the request was created, starting at 00:00:00 of first day to now. Use 0 for today.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "createdlastdays"
        ]
      },
      "status": {
        "name": "status",
        "type": "option",
        "char": "s",
        "summary": "Status of the version creation request, used to filter the list.",
        "multiple": false,
        "options": [
          "Queued",
          "InProgress",
          "Success",
          "Error"
        ],
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:version:create:report",
    "summary": "Retrieve details about a package version creation request.",
    "description": "Specify the request ID for which you want to view details. If applicable, the command displays errors related to the request.\n\nTo show all requests in the org, run \"<%= config.bin %> package version create list\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Retrieve details about the package version creation request with the specified ID; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package-create-request-id 08c...",
      "Retrieve details about the specified package version creation request in the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package-create-request-id 08c... --target-dev-hub devhub@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "package-create-request-id": {
        "name": "package-create-request-id",
        "type": "option",
        "char": "i",
        "summary": "ID (starts with 08c) of the package version creation request you want to display.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "packagecreaterequestid"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:version:delete",
    "summary": "Delete a package version.",
    "description": "Specify the ID or alias of the package version you want to delete.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Delete a package version with the specified alias using your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\"",
      "Delete a package version with the specified ID using the Dev Hub org with username \"devhub@example.com\":\n<%= config.bin %> <%= command.id %> --package 04t... --target-org devhub@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "n",
        "summary": "Don’t prompt before deleting the package version.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "noprompt"
        ]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 04t) or alias of the package version to delete.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "undelete": {
        "name": "undelete",
        "type": "boolean",
        "summary": "Undelete a deleted package version.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:version:displayancestry",
    "summary": "Display the ancestry tree for a 2GP managed package version.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display the ancestry tree for a package version with the specified alias, using your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package package_version_alias",
      "Similar to previous example, but display the output in DOT code:\n<%= config.bin %> <%= command.id %> --package package_version_alias --dot-code",
      "Display the ancestry tree for a package with the specified ID, using the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package OHo... --target-dev-hub devhub@example.com",
      "Display the ancestry tree of a package version with the specified ID, using your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package 04t..."
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID or alias of the package (starts with 0Ho) or package version (starts with 04t) to display ancestry for.",
        "description": "If you specify a package ID (starts with 0Ho) or alias, the ancestor tree for every package version associated with the package ID is displayed. If you specify a package version (starts with 04t) or alias, the ancestry tree of the specified package version is displayed.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "dot-code": {
        "name": "dot-code",
        "type": "boolean",
        "summary": "Display the ancestry tree in DOT code.",
        "description": "You can use the DOT code output in graph visualization software to create tree visualizations.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "dotcode"
        ]
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Display both the package version ID (starts with 04t) and the version number (major.minor.patch.build) in the ancestry tree.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:version:list",
    "summary": "List all package versions in the Dev Hub org.",
    "description": "Description",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List package versions in your default Dev Hub org that were created in the last 3 days; show only the released versions and order the list using the PatchVersion field. Display extended details about each package version:\n<%= config.bin %> <%= command.id %> --verbose --created-last-days 3 --released --order-by PatchVersion",
      "List the released package versions for the two specified packages that were modified today; use the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --packages 0Ho000000000000,0Ho000000000001 --released --modified-last-days 0 --target-dev-hub devhub@example.com",
      "List all released package versions in your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --released",
      "List package versions that were modified today in your default Dev Hub org; show limited details about each one:\n<%= config.bin %> <%= command.id %> --concise --modified-last-days 0",
      "List released package versions that were created in the last 3 days in your default Dev Hub org; show limited details:\n<%= config.bin %> <%= command.id %> --concise --created-last-days 3 --released",
      "List released package versions that were modified today for the two packages with specified aliases in your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --packages exp-mgr,exp-mgr-util --released --modified-last-days 0"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "created-last-days": {
        "name": "created-last-days",
        "type": "option",
        "char": "c",
        "summary": "Number of days since the request was created, starting at 00:00:00 of first day to now. Use 0 for today.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "createdlastdays"
        ]
      },
      "concise": {
        "name": "concise",
        "type": "boolean",
        "summary": "Display limited package version details.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "modified-last-days": {
        "name": "modified-last-days",
        "type": "option",
        "char": "m",
        "summary": "Number of days since the items were modified, starting at 00:00:00 of first day to now. Use 0 for today.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "modifiedlastdays"
        ]
      },
      "packages": {
        "name": "packages",
        "type": "option",
        "char": "p",
        "summary": "Comma-delimited list of packages (aliases or 0Ho IDs) to list.",
        "multiple": false,
        "deprecateAliases": true
      },
      "released": {
        "name": "released",
        "type": "boolean",
        "char": "r",
        "summary": "Display released versions only (IsReleased=true).",
        "allowNo": false,
        "deprecateAliases": true
      },
      "order-by": {
        "name": "order-by",
        "type": "option",
        "char": "o",
        "summary": "Package version fields used to order the list.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "orderby"
        ]
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Display extended package version details.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:version:promote",
    "summary": "Promote a package version to released.",
    "description": "Supply the ID or alias of the package version you want to promote. Promotes the package version to released status.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Promote the package version with the specified ID to released; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package 04t...",
      "Promote the package version with the specified alias to released; uses the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package awesome_package_alias --target-dev-hub devhub@example.com",
      "Promote the package version with an alias that has spaces to released:\n<%= config.bin %> <%= command.id %> --package \"Awesome Package Alias\""
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 04t) or alias of the package version to promote.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "n",
        "summary": "Don't prompt to confirm setting the package version as released.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "noprompt"
        ]
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:version:report",
    "summary": "Retrieve details about a package version in the Dev Hub org.",
    "description": "To update package version values, run \"<%= config.bin %> package version update\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Retrieve details about the package version with the specified ID from your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package 04t...",
      "Retrieve details about the package version with the specified alias (that contains spaces) from the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\" --target-dev-hub devhub@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 04t) or alias of the package to retrieve details for.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Display extended package version details.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "package:version:update",
    "summary": "Update a package version.",
    "description": "Specify a new value for each option you want to update.\n\nTo display details about a package version, run \"<%= config.bin %> package version display\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Update the package version that has the specified alias (that contains spaces) with a new installation key \"password123\"; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\" --installation-key password123",
      "Update the package version that has the specified ID with a new branch and tag; use the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package 04t... --branch main --tag 'Release 1.0.7' --target-dev-hub devhub@example.com",
      "Update the package version that has the specified ID with a new description:\n<%= config.bin %> <%= command.id %> --package 04t... --version-description \"New Package Version Description\""
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 04t) or alias of the package to update a version of.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "version-name": {
        "name": "version-name",
        "type": "option",
        "char": "a",
        "summary": "New package version name.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "versionname"
        ]
      },
      "version-description": {
        "name": "version-description",
        "type": "option",
        "char": "e",
        "summary": "New package version description.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "versiondescription"
        ]
      },
      "branch": {
        "name": "branch",
        "type": "option",
        "char": "b",
        "summary": "New package version branch.",
        "multiple": false,
        "deprecateAliases": true
      },
      "tag": {
        "name": "tag",
        "type": "option",
        "char": "t",
        "summary": "New package version tag.",
        "multiple": false,
        "deprecateAliases": true
      },
      "installation-key": {
        "name": "installation-key",
        "type": "option",
        "char": "k",
        "summary": "New installation key for key-protected package (default: null)",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "installationkey"
        ]
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "project:generate",
    "summary": "Generate a Salesforce DX project.",
    "description": "A Salesforce DX project has a specific structure and a configuration file (sfdx-project.json) that identifies the directory as a Salesforce DX project. This command generates the necessary configuration files and directories to get you started.\n\nBy default, the generated sfdx-project.json file sets the sourceApiVersion property to the default API version currently used by Salesforce CLI. To specify a different version, set the apiVersion configuration variable. For example: \"sf config set apiVersion=57.0 --global\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate a project called \"mywork\":\n<%= config.bin %> <%= command.id %> --name mywork",
      "Similar to previous example, but generate the files in a directory called \"myapp\":\n<%= config.bin %> <%= command.id %> --name mywork --default-package-dir myapp",
      "Similar to prevoius example, but also generate a default package.xml manifest file:\n<%= config.bin %> <%= command.id %> --name mywork --default-package-dir myapp --manifest",
      "Generate a project with the minimum files and directories:\n<%= config.bin %> <%= command.id %> --name mywork --template empty"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated project.",
        "description": "Generates a project directory with this name; any valid directory name is accepted. Also sets the \"name\" property in the sfdx-project.json file to this name.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "projectname"
        ]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for project creation.",
        "description": "The template determines the sample configuration files and directories that this command generates. For example, the empty template provides these files and directory to get you started.\n\n- .forceignore\n- config/project-scratch-def.json\n- sfdx-project.json\n- package.json\n- force-app (basic source directory structure)\n\nThe standard template provides a complete force-app directory structure so you know where to put your source. It also provides additional files and scripts, especially useful when using Salesforce Extensions for VS Code. For example:\n\n- .gitignore: Use Git for version control.\n- .prettierrc and .prettierignore: Use Prettier to format your Aura components.\n- .vscode/extensions.json: When launched, Visual Studio Code, prompts you to install the recommended extensions for your project.\n- .vscode/launch.json: Configures Replay Debugger.\n- .vscode/settings.json: Additional configuration settings.\n\nThe analytics template provides similar files and the force-app/main/default/waveTemplates directory.",
        "multiple": false,
        "options": [
          "standard",
          "empty",
          "analytics"
        ],
        "default": "standard",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": [
          "outputdir"
        ]
      },
      "namespace": {
        "name": "namespace",
        "type": "option",
        "char": "s",
        "summary": "Namespace associated with this project and any connected scratch orgs.",
        "multiple": false,
        "default": "",
        "deprecateAliases": true
      },
      "default-package-dir": {
        "name": "default-package-dir",
        "type": "option",
        "char": "p",
        "summary": "Default package directory name.",
        "description": "Metadata items such as classes and Lightning bundles are placed inside this folder.",
        "multiple": false,
        "default": "force-app",
        "deprecateAliases": true,
        "aliases": [
          "defaultpackagedir"
        ]
      },
      "manifest": {
        "name": "manifest",
        "type": "boolean",
        "char": "x",
        "summary": "Generate a manifest (package.xml) for change-set based development.",
        "description": "Generates a default manifest (package.xml) for fetching Apex, Visualforce, Lightning components, and static resources.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "login-url": {
        "name": "login-url",
        "type": "option",
        "char": "l",
        "summary": "Salesforce instance login URL.",
        "description": "Normally defaults to https://login.salesforce.com.",
        "hidden": true,
        "multiple": false,
        "default": "https://login.salesforce.com",
        "deprecateAliases": true,
        "aliases": [
          "loginurl"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "sobject:describe",
    "summary": "Display the metadata for a standard or custom object or a Tooling API object.",
    "description": "The metadata is displayed in JSON format. See this topic for a description of each property: https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_calls_describesobjects_describesobjectresult.htm.\n\nThis command displays metadata for Salesforce objects by default. Use the --use-tooling-api flag to view metadata for a Tooling API object.",
    "strict": true,
    "pluginName": "@salesforce/plugin-schema",
    "pluginAlias": "@salesforce/plugin-schema",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display the metadata of the \"Account\" standard object in your default org:\n<%= config.bin %> <%= command.id %> --sobject Account",
      "Display the metadata of the \"MyObject__c\" custom object in the org with alias \"my-scratch-org\":\n<%= config.bin %> <%= command.id %> --sobject MyObject__c --target-org my-scratch-org",
      "Display the metadata of the ApexCodeCoverage Tooling API object in your default org:\n<%= config.bin %> <%= command.id %> --sobject ApexCodeCoverage --use-tooling-api"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the object to describe.",
        "required": true,
        "multiple": false,
        "aliases": [
          "sobjecttype"
        ]
      },
      "use-tooling-api": {
        "name": "use-tooling-api",
        "type": "boolean",
        "char": "t",
        "summary": "Use Tooling API to display metadata for Tooling API objects.",
        "allowNo": false,
        "aliases": [
          "usetoolingapi"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "sobject:list",
    "summary": "List all Salesforce objects of a specified category.",
    "description": "You can list the standard objects, custom objects, or all. The lists include only Salesforce objects, not Tooling API objects.",
    "strict": true,
    "pluginName": "@salesforce/plugin-schema",
    "pluginAlias": "@salesforce/plugin-schema",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List all objects in your default org:\n<%= config.bin %> <%= command.id %> --sobject all",
      "List only custom objects in the org with alias \"my-scratch-org\":\n<%= config.bin %> <%= command.id %> --sobject custom --target-org my-scratch-org"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "Category of objects to list.",
        "multiple": false,
        "default": "ALL",
        "aliases": [
          "sobjecttypecategory",
          "c"
        ]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "project:convert:source",
    "summary": "Convert source-formatted files into metadata that you can deploy using Metadata API.",
    "description": "To convert source-formatted files into the metadata format, so that you can deploy them using Metadata API, run this command. Then deploy the metadata using \"<%= config.bin %> project deploy\".\n\nTo convert Metadata API–formatted files into the source format, run \"<%= config.bin %> project convert mdapi\".\n\nTo specify a package name that includes spaces, enclose the name in single quotes.\n\nTo convert multiple components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.",
    "strict": true,
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Convert source-formatted files in the specified directory into metadata-formatted files; writes converted files into a new directory:\n$ <%= config.bin %> <%= command.id %> --root-dir path/to/source",
      "Similar to previous example, but writes converted files to the specified output directory and associates the files with the specified package:\n$ <%= config.bin %> <%= command.id %> --root-dir path/to/source --output-dir path/to/outputdir --package-name 'My Package'"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "summary": "API Version to use in the generated project's manifest. By default, will use the version from sfdx-project.json",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "root-dir": {
        "name": "root-dir",
        "type": "option",
        "char": "r",
        "summary": "Source directory other than the default package to convert.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "rootdir"
        ]
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Output directory to store the Metadata API–formatted files in.",
        "multiple": false,
        "default": "metadataPackage_1684336854808",
        "deprecateAliases": true,
        "aliases": [
          "outputdir"
        ]
      },
      "package-name": {
        "name": "package-name",
        "type": "option",
        "char": "n",
        "summary": "Name of the package to associate with the metadata-formatted files.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "packagename"
        ]
      },
      "manifest": {
        "name": "manifest",
        "type": "option",
        "char": "x",
        "summary": "Path to the manifest (package.xml) file that specifies the metadata types to convert.",
        "description": "If you specify this parameter, don’t specify --metadata or --source-dir.",
        "multiple": false,
        "deprecateAliases": true
      },
      "source-dir": {
        "name": "source-dir",
        "type": "option",
        "char": "p",
        "summary": "Paths to the local source files to convert.",
        "description": "The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\n\nIf you specify this parameter, don’t specify --manifest or --metadata.",
        "multiple": true,
        "exclusive": [
          "manifest",
          "metadata"
        ],
        "deprecateAliases": true,
        "aliases": [
          "sourcepath"
        ],
        "delimiter": ","
      },
      "metadata": {
        "name": "metadata",
        "type": "option",
        "char": "m",
        "summary": "Metadata component names to convert.",
        "multiple": true,
        "exclusive": [
          "manifest",
          "sourcepath"
        ],
        "deprecateAliases": true,
        "delimiter": ","
      }
    },
    "args": {},
    "requiresProject": true,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "project:delete:source",
    "summary": "Delete source from your project and from a non-source-tracked org.",
    "description": "Use this command to delete components from orgs that don’t have source tracking. To remove deleted items from orgs that have source tracking enabled, \"<%= config.bin %> project deploy start\".\n\nWhen you run this command, both the local source file and the metadata component in the org are deleted.\n\nTo delete multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.",
    "strict": true,
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Delete all local Apex source files and all Apex classes from the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --metadata ApexClass --target-org my-scratch",
      "Delete a specific Apex class and a Profile that has a space in it from your default org; don't prompt for confirmation:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyFabulousApexClass --metadata \"Profile: My Profile\" --no-prompt",
      "Run the tests that aren’t in any managed packages as part of the deletion; if the delete succeeds, and the org has source-tracking enabled, update the source tracking information:\n<%= config.bin %> <%= command.id %> --metadata ApexClass --test-level RunLocalTests --track-source",
      "Delete the Apex source files in a directory and the corresponding components from your default org:\n<%= config.bin %> <%= command.id %> --source-dir force-app/main/default/classes"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "check-only": {
        "name": "check-only",
        "type": "boolean",
        "char": "c",
        "summary": "Validate delete command but don't delete anything from the org or the local project.",
        "description": "IMPORTANT: Where possible, we changed noninclusive terms to align with our company value of Equality. We maintained certain terms to avoid any effect on customer implementations.\n\nValidates the deleted metadata and runs all Apex tests, but prevents the deletion from being saved to the org.\n\nIf you change a field type from Master-Detail to Lookup or vice versa, that change isn’t supported when using the --chec-konly parameter to test a deletion (validation). This kind of change isn’t supported for test deletions to avoid the risk of data loss or corruption. If a change that isn’t supported for test deletions is included in a deletion package, the test deletion fails and issues an error.\n\nIf your deletion package changes a field type from Master-Detail to Lookup or vice versa, you can still validate the changes prior to deploying to Production by performing a full deletion to another test Sandbox. A full deletion includes a validation of the changes as part of the deletion process.\n\nNote: A Metadata API deletion that includes Master-Detail relationships deletes all detail records in the Recycle Bin in the following cases.\n\n    1. For a deletion with a new Master-Detail field, soft delete (send to the Recycle Bin) all detail records before proceeding to delete the Master-Detail field, or the deletion fails. During the deletion, detail records are permanently deleted from the Recycle Bin and cannot be recovered.\n\n    2. For a deletion that converts a Lookup field relationship to a Master-Detail relationship, detail records must reference a master record or be soft-deleted (sent to the Recycle Bin) for the deletion to succeed. However, a successful deletion permanently deletes any detail records in the Recycle Bin.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "checkonly"
        ]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to finish.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        },
        "deprecateAliases": true
      },
      "test-level": {
        "name": "test-level",
        "type": "option",
        "char": "l",
        "summary": "Deployment Apex testing level.",
        "description": "Valid values are:\n\n- NoTestRun — No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\n- RunLocalTests — All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\n- RunAllTestsInOrg — All tests in your org are run, including tests of managed packages.\n\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package and target org. For more information, see “Running Tests in a Deployment” in the Metadata API Developer Guide.",
        "multiple": false,
        "options": [
          "NoTestRun",
          "RunLocalTests",
          "RunAllTestsInOrg"
        ],
        "deprecateAliases": true,
        "aliases": [
          "testlevel"
        ]
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "r",
        "summary": "Don't prompt for delete confirmation.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "noprompt"
        ]
      },
      "metadata": {
        "name": "metadata",
        "type": "option",
        "char": "m",
        "summary": "Metadata components to delete.",
        "description": "If you specify this parameter, don’t specify --source-dir.",
        "multiple": true,
        "deprecateAliases": true,
        "delimiter": ","
      },
      "source-dir": {
        "name": "source-dir",
        "type": "option",
        "char": "p",
        "summary": "Source file paths to delete.",
        "description": "The supplied paths can be a single file (in which case the operation is applied to only one file) or a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\n\nIf you specify this parameter, don’t specify --metadata.",
        "multiple": true,
        "deprecateAliases": true,
        "aliases": [
          "sourcepath"
        ],
        "delimiter": ","
      },
      "track-source": {
        "name": "track-source",
        "type": "boolean",
        "char": "t",
        "summary": "If the delete succeeds, update the source tracking information.",
        "allowNo": false,
        "exclusive": [
          "check-only"
        ],
        "deprecateAliases": true,
        "aliases": [
          "tracksource"
        ]
      },
      "force-overwrite": {
        "name": "force-overwrite",
        "type": "boolean",
        "char": "f",
        "summary": "Ignore conflict warnings and overwrite changes to the org.",
        "allowNo": false,
        "dependsOn": [
          "track-source"
        ],
        "deprecateAliases": true,
        "aliases": [
          "forceoverwrite"
        ]
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Verbose output of the delete result.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "force:source:deploy",
    "summary": "Deploy source to an org.",
    "description": "Use this command to deploy source (metadata that’s in source format) to an org. To take advantage of change tracking with scratch orgs, use \"force source push\". To deploy metadata that’s in metadata format, use \"force mdapi deploy\".\n\nThe source you deploy overwrites the corresponding metadata in your org. This command does not attempt to merge your source with the versions in your org.\n\nTo run the command asynchronously, set --wait to 0, which immediately returns the job ID. This way, you can continue to use the CLI. To check the status of the job, use \"force source deploy report\".\n\nIf the comma-separated list you’re supplying contains spaces, enclose the entire comma-separated list in one set of double quotes. On Windows, if the list contains commas, also enclose the entire list in one set of double quotes.\n\nIf you use the --manifest, --predestructivechanges, or --postdestructivechanges parameters, run the \"force source manifest create\" command to easily generate the different types of manifest files.",
    "strict": true,
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "Deploy the source files in a directory:\n<%= config.bin %> <%= command.id %> --sourcepath path/to/source",
      "Deploy a specific Apex class and the objects whose source is in a directory:\n<%= config.bin %> <%= command.id %> --sourcepath \"path/to/apex/classes/MyClass.cls,path/to/source/objects\"",
      "Deploy source files in a comma-separated list that contains spaces:\n<%= config.bin %> <%= command.id %> --sourcepath \"path/to/objects/MyCustomObject/fields/MyField.field-meta.xml, path/to/apex/classes\"",
      "Deploy all Apex classes:\n<%= config.bin %> <%= command.id %> --metadata ApexClass",
      "Deploy a specific Apex class:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass",
      "Deploy a specific Apex class and update source tracking files :\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass --tracksource",
      "Deploy all custom objects and Apex classes:\n<%= config.bin %> <%= command.id %> --metadata \"CustomObject,ApexClass\"",
      "Deploy all Apex classes and two specific profiles (one of which has a space in its name):\n<%= config.bin %> <%= command.id %> --metadata \"ApexClass, Profile:My Profile, Profile: AnotherProfile\"",
      "Deploy all components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml",
      "Run the tests that aren’t in any managed packages as part of a deployment:\n<%= config.bin %> <%= command.id %> --metadata ApexClass --testlevel RunLocalTests",
      "Check whether a deployment would succeed (to prepare for Quick Deploy):\n<%= config.bin %> <%= command.id %> --metadata ApexClass --testlevel RunAllTestsInOrg -c",
      "Deploy an already validated deployment (Quick Deploy):\n<%= config.bin %> <%= command.id %> --validateddeployrequestid 0Af9A00000FTM6pSAH`",
      "Run a destructive operation before the deploy occurs:\n<%= config.bin %> <%= command.id %> --manifest package.xml --predestructivechanges destructiveChangesPre.xml",
      "Run a destructive operation after the deploy occurs:\n<%= config.bin %> <%= command.id %> --manifest package.xml --postdestructivechanges destructiveChangesPost.xml"
    ],
    "deprecationOptions": {
      "to": "project deploy start",
      "message": "We plan to deprecate this command in the future. Try using the \"project deploy start\" command instead."
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "u",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "checkonly": {
        "name": "checkonly",
        "type": "boolean",
        "char": "c",
        "summary": "Validate the deployed metadata and run all Apex tests, but don't save to the org.",
        "description": "IMPORTANT: Where possible, we changed noninclusive terms to align with our company value of Equality. We maintained certain terms to avoid any effect on customer implementations.\n\nIf you change a field type from Master-Detail to Lookup or vice versa, that change isn’t supported when using the --checkonly parameter to test a deployment (validation). This kind of change isn’t supported for test deployments to avoid the risk of data loss or corruption. If a change that isn’t supported for test deployments is included in a deployment package, the test deployment fails and issues an error.\n\nIf your deployment package changes a field type from Master-Detail to Lookup or vice versa, you can still validate the changes prior to deploying to Production by performing a full deployment to another test Sandbox. A full deployment includes a validation of the changes as part of the deployment process.\n\nNote: A Metadata API deployment that includes Master-Detail relationships deletes all detail records in the Recycle Bin in the following cases.\n\n    1. For a deployment with a new Master-Detail field, soft delete (send to the Recycle Bin) all detail records before proceeding to deploy the Master-Detail field, or the deployment fails. During the deployment, detail records are permanently deleted from the Recycle Bin and cannot be recovered.\n\n    2. For a deployment that converts a Lookup field relationship to a Master-Detail relationship, detail records must reference a master record or be soft-deleted (sent to the Recycle Bin) for the deployment to succeed. However, a successful deployment permanently deletes any detail records in the Recycle Bin.",
        "allowNo": false
      },
      "soapdeploy": {
        "name": "soapdeploy",
        "type": "boolean",
        "summary": "Deploy metadata with SOAP API instead of REST API.",
        "allowNo": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Wait time for command to finish in minutes.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        }
      },
      "testlevel": {
        "name": "testlevel",
        "type": "option",
        "char": "l",
        "summary": "Deployment testing level.",
        "description": "Valid values are:\n\n    - NoTestRun—No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\n\n    - RunSpecifiedTests—Runs only the tests that you specify in the --runtests option. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\n\n    - RunLocalTests—All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\n\n    - RunAllTestsInOrg—All tests in your org are run, including tests of managed packages.\n\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see “Running Tests in a Deployment” in the Metadata API Developer Guide.",
        "multiple": false,
        "options": [
          "NoTestRun",
          "RunSpecifiedTests",
          "RunLocalTests",
          "RunAllTestsInOrg"
        ]
      },
      "runtests": {
        "name": "runtests",
        "type": "option",
        "char": "r",
        "summary": "Apex test classes to run if --testlevel RunSpecifiedTests.",
        "multiple": true,
        "delimiter": ","
      },
      "ignoreerrors": {
        "name": "ignoreerrors",
        "type": "boolean",
        "char": "o",
        "summary": "Ignore any errors and don't roll back deployment.",
        "description": "Keep this parameter set to false when deploying to a production org. If set to true, components without errors are deployed, and components with errors are skipped.",
        "allowNo": false
      },
      "ignorewarnings": {
        "name": "ignorewarnings",
        "type": "boolean",
        "char": "g",
        "summary": "Allow a deployment to complete successfully even if there are warnings.",
        "description": "If a warning occurs and ignoreWarnings is set to true, the success field in DeployMessage is true. When ignoreWarnings is set to false, success is set to false, and the warning is treated like an error.",
        "allowNo": false
      },
      "purgeondelete": {
        "name": "purgeondelete",
        "type": "boolean",
        "summary": "Specify that deleted components in the destructive changes manifest file are immediately eligible for deletion rather than being stored in the Recycle Bin.",
        "allowNo": false,
        "dependsOn": [
          "manifest"
        ]
      },
      "validateddeployrequestid": {
        "name": "validateddeployrequestid",
        "type": "option",
        "char": "q",
        "summary": "Deploy request ID of the validated deployment to run a Quick Deploy.",
        "description": "Deploying a validation helps you shorten your deployment time because tests aren’t rerun. If you have a recent successful validation, you can deploy the validated components without running tests. A validation doesn’t save any components in the org. You use a validation only to check the success or failure messages that you would receive with an actual deployment. To validate your components, add the -c | --checkonly flag when you run \"force mdapi deploy\". This flag sets the checkOnly=\"true\" parameter for your deployment. Before deploying a recent validation, ensure that the following requirements are met:\n\n    1. The components have been validated successfully for the target environment within the last 10 days.\n\n    2. As part of the validation, Apex tests in the target org have passed.\n\n    3. Code coverage requirements are met.\n\n        * If all tests in the org or all local tests are run, overall code coverage is at least 75%, and Apex triggers have some coverage.\n\n        * If specific tests are run with the RunSpecifiedTests test level, each class and trigger that was deployed is covered by at least 75% individually.",
        "multiple": false,
        "exclusive": [
          "checkonly",
          "testlevel",
          "runtests",
          "tracksource"
        ]
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Specify verbose output about the deploy result.",
        "allowNo": false
      },
      "metadata": {
        "name": "metadata",
        "type": "option",
        "char": "m",
        "summary": "Comma-separated list of metadata component names.",
        "description": "If you specify this parameter, don’t specify --manifest or --sourcepath.",
        "multiple": true,
        "delimiter": ","
      },
      "sourcepath": {
        "name": "sourcepath",
        "type": "option",
        "char": "p",
        "summary": "Comma-separated list of source file paths to deploy.",
        "description": "The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\n\nIf you specify this parameter, don’t specify --manifest or --metadata.",
        "multiple": true,
        "delimiter": ","
      },
      "manifest": {
        "name": "manifest",
        "type": "option",
        "char": "x",
        "summary": "Complete path for the manifest (package.xml) file that specifies the components to deploy.",
        "description": "All child components are included.\n\nIf you specify this parameter, don’t specify --metadata or --sourcepath.",
        "multiple": false
      },
      "predestructivechanges": {
        "name": "predestructivechanges",
        "type": "option",
        "summary": "File path for a manifest (destructiveChangesPre.xml) of components to delete before the deploy.",
        "multiple": false,
        "dependsOn": [
          "manifest"
        ]
      },
      "postdestructivechanges": {
        "name": "postdestructivechanges",
        "type": "option",
        "summary": "File path for a manifest (destructiveChangesPost.xml) of components to delete after the deploy.",
        "multiple": false,
        "dependsOn": [
          "manifest"
        ]
      },
      "tracksource": {
        "name": "tracksource",
        "type": "boolean",
        "char": "t",
        "summary": "If the deploy succeeds, update source tracking information.",
        "description": "Doesn't delete locally deleted files from org unless you also specify --predestructivechanges or --postdestructivechanges.",
        "allowNo": false,
        "exclusive": [
          "checkonly",
          "validateddeployrequestid"
        ]
      },
      "forceoverwrite": {
        "name": "forceoverwrite",
        "type": "boolean",
        "char": "f",
        "summary": "Ignore conflict warnings and overwrite changes to the org.",
        "allowNo": false,
        "dependsOn": [
          "tracksource"
        ]
      },
      "resultsdir": {
        "name": "resultsdir",
        "type": "option",
        "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
        "multiple": false
      },
      "coverageformatters": {
        "name": "coverageformatters",
        "type": "option",
        "summary": "Format of the code coverage results.",
        "helpValue": "clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary",
        "multiple": true,
        "options": [
          "clover",
          "cobertura",
          "html-spa",
          "html",
          "json",
          "json-summary",
          "lcovonly",
          "none",
          "teamcity",
          "text",
          "text-summary"
        ],
        "delimiter": ","
      },
      "junit": {
        "name": "junit",
        "type": "boolean",
        "summary": "Output JUnit test results.",
        "allowNo": false
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "force:source:deploy:cancel",
    "summary": "Cancel a source deployment.",
    "description": "Use this command to cancel a specified asynchronous source deployment. You can also specify a wait time (in minutes) to check for updates to the canceled deploy status.\n\nTo run the command asynchronously, set --wait to 0, which immediately returns the job ID. This way, you can continue to use the CLI. To check the status of the job, use \"force source deploy report\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "Cancel a deployment and wait two minutes:\n<%= config.bin %> <%= command.id %> --wait 2",
      "If you have multiple deployments in progress and want to cancel a specific one, specify the job ID:\n<%= config.bin %> <%= command.id %> --jobid <jobid>"
    ],
    "deprecationOptions": {
      "to": "project deploy cancel",
      "message": "We plan to deprecate this command in the future. Try using the \"project deploy cancel\" command instead."
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete and display results.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        }
      },
      "jobid": {
        "name": "jobid",
        "type": "option",
        "char": "i",
        "summary": "Job ID of the deployment you want to cancel; defaults to your most recent CLI deployment if not specified.",
        "multiple": false
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "force:source:deploy:report",
    "summary": "Check the status of a metadata deployment.",
    "description": "Specify the job ID for the deploy you want to check. You can also specify a wait time (minutes) to check for updates to the deploy status.",
    "strict": true,
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "Check the status of the most recent deployment on your default org:\n<%= config.bin %> <%= command.id %>",
      "Check the status using the job ID; output JUnit test results and format code coverage results in the specified format:\n<%= config.bin %> <%= command.id %> --jobid <id> --junit --coverageformatters cobertura"
    ],
    "deprecationOptions": {
      "to": "project deploy report",
      "message": "We plan to deprecate this command in the future. Try using the \"project deploy start\" and \"project deploy report\" pair instead."
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete and display results to the terminal window.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        }
      },
      "jobid": {
        "name": "jobid",
        "type": "option",
        "char": "i",
        "summary": "Job ID of the deployment you want to check; defaults to your most recent CLI deployment.",
        "multiple": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Verbose output of deploy result.",
        "allowNo": false
      },
      "resultsdir": {
        "name": "resultsdir",
        "type": "option",
        "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
        "multiple": false
      },
      "coverageformatters": {
        "name": "coverageformatters",
        "type": "option",
        "summary": "Format of the code coverage results.",
        "helpValue": "clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary",
        "multiple": true,
        "options": [
          "clover",
          "cobertura",
          "html-spa",
          "html",
          "json",
          "json-summary",
          "lcovonly",
          "none",
          "teamcity",
          "text",
          "text-summary"
        ],
        "delimiter": ","
      },
      "junit": {
        "name": "junit",
        "type": "boolean",
        "summary": "Output JUnit test results.",
        "allowNo": false
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "project:list:ignored",
    "summary": "Check your local project package directories for forceignored files.",
    "description": "When deploying or retrieving metadata between your local project and an org, you can specify the source files you want to exclude with a .forceignore file. The .forceignore file structure mimics the .gitignore structure. Each line in .forceignore specifies a pattern that corresponds to one or more files. The files typically represent metadata components, but can be any files you want to exclude, such as LWC configuration JSON files or tests.",
    "strict": true,
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List all the files in all package directories that are ignored:\n<%= config.bin %> <%= command.id %>",
      "List all the files in a specific directory that are ignored:\n<%= config.bin %> <%= command.id %> --source-dir force-app",
      "Check if a particular file is ignored:\n<%= config.bin %> <%= command.id %> --source-dir package.xml"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "source-dir": {
        "name": "source-dir",
        "type": "option",
        "char": "p",
        "summary": "File or directory of files that the command checks for foreceignored files.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "sourcepath"
        ]
      }
    },
    "args": {},
    "requiresProject": true,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "project:generate:manifest",
    "summary": "Create a project manifest that lists the metadata components you want to deploy or retrieve.",
    "description": "Create a manifest from a list of metadata components (--metadata) or from one or more local directories that contain source files (--source-dir). You can specify either of these parameters, not both.\n\nUse --type to specify the type of manifest you want to create. The resulting manifest files have specific names, such as the standard package.xml or destructiveChanges.xml to delete metadata. Valid values for this parameter, and their respective file names, are:\n\n    * package : package.xml (default)\n    * pre : destructiveChangesPre.xml\n    * post : destructiveChangesPost.xml\n    * destroy : destructiveChanges.xml\n\nSee https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_deploy_deleting_files.htm for information about these destructive manifest files.\n\nUse --name to specify a custom name for the generated manifest if the pre-defined ones don’t suit your needs. You can specify either --type or --name, but not both.\n\nTo include multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --include-packages and --source-dir.",
    "strict": true,
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create a manifest for deploying or retrieving all Apex classes and custom objects:\n$ <%= config.bin %> <%= command.id %> --metadata ApexClass --metadata CustomObject",
      "Create a manifest for deleting the specified Apex class:\n$ <%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass --type destroy",
      "Create a manifest for deploying or retrieving all the metadata components in the specified local directory; name the file myNewManifest.xml:\n$ <%= config.bin %> <%= command.id %> --source-dir force-app --name myNewManifest",
      "Create a manifest from the metadata components in the specified org and include metadata in any unlocked packages:\n$ <%= config.bin %> <%= command.id %> --from-org test@myorg.com --include-packages unlocked"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "metadata": {
        "name": "metadata",
        "type": "option",
        "char": "m",
        "summary": "Names of metadata components to include in the manifest.",
        "multiple": true,
        "deprecateAliases": true,
        "delimiter": ","
      },
      "source-dir": {
        "name": "source-dir",
        "type": "option",
        "char": "p",
        "summary": "Paths to the local source files to include in the manifest.",
        "multiple": true,
        "deprecateAliases": true,
        "aliases": [
          "sourcepath"
        ],
        "delimiter": ","
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of a custom manifest file to create.",
        "multiple": false,
        "exclusive": [
          "type"
        ],
        "deprecateAliases": true,
        "aliases": [
          "manifestname"
        ]
      },
      "type": {
        "name": "type",
        "type": "option",
        "char": "t",
        "summary": "Type of manifest to create; the type determines the name of the created file.",
        "multiple": false,
        "options": [
          "pre",
          "post",
          "destroy",
          "package"
        ],
        "exclusive": [
          "name"
        ],
        "deprecateAliases": true,
        "aliases": [
          "manifesttype"
        ]
      },
      "include-packages": {
        "name": "include-packages",
        "type": "option",
        "char": "c",
        "summary": "Package types (managed, unlocked) whose metadata is included in the manifest; by default, metadata in packages is ignored.",
        "multiple": true,
        "options": [
          "managed",
          "unlocked"
        ],
        "dependsOn": [
          "from-org"
        ],
        "deprecateAliases": true,
        "aliases": [
          "includepackages"
        ],
        "delimiter": ","
      },
      "from-org": {
        "name": "from-org",
        "type": "option",
        "summary": "Username or alias of the org that contains the metadata components from which to build a manifest.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "fromorg"
        ]
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory to save the created manifest.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "outputdir",
          "o"
        ]
      }
    },
    "args": {},
    "requiresProject": true,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "force:source:pull",
    "summary": "Pull changed source from the org to your project to keep them in sync.",
    "description": "If the command detects a conflict, it displays the conflicts but does not complete the process. After reviewing the conflict, rerun the command with the --forceoverwrite parameter.",
    "strict": true,
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "Pull source from your default org:\n<%= config.bin %> <%= command.id %>",
      "Pull source from the org with alias \"myscratch\"; ignore any conflicts and overwrite the local project files with org changes; wait for only 5 minutes:\n<%= config.bin %> <%= command.id %> --target-org myscratch --wait 5 --forceoverwrite"
    ],
    "deprecationOptions": {
      "to": "project retrieve start",
      "message": "We plan to deprecate this command in the future. Try using the \"project retrieve start\" command instead."
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Display additional details about the command results.",
        "allowNo": false
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "forceoverwrite": {
        "name": "forceoverwrite",
        "type": "boolean",
        "char": "f",
        "summary": "Ignore conflict warnings; changes in the org overwrite changes in the project.",
        "allowNo": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete and display results to the terminal window.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        }
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "force:source:push",
    "summary": "Push changed source from your project to an org to keep them in sync.",
    "description": "If the command detects a conflict, it displays the conflicts but does not complete the process. After reviewing the conflict, rerun the command with the --forceoverwrite parameter.",
    "strict": true,
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "Push source to your default org:\n<%= config.bin %> <%= command.id %>",
      "Push source to the org with alias \"myscratch\"; ignore any conflicts and overwrite with org with the local project changes; wait for only 5 minutes:\n<%= config.bin %> <%= command.id %> --target-org myscratch --wait 5 --forceoverwrite"
    ],
    "deprecationOptions": {
      "to": "project deploy start",
      "message": "We plan to deprecate this command in the future. Try using the \"project deploy start\" command instead."
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "forceoverwrite": {
        "name": "forceoverwrite",
        "type": "boolean",
        "char": "f",
        "summary": "Ignore conflict warnings and push source anyway; changes in the project overwrite changes in the org.",
        "allowNo": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete and display results to the terminal window.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        }
      },
      "ignorewarnings": {
        "name": "ignorewarnings",
        "type": "boolean",
        "char": "g",
        "summary": "Deploy changes even if warnings are generated.",
        "allowNo": false
      },
      "quiet": {
        "name": "quiet",
        "type": "boolean",
        "summary": "Minimize JSON and sdtout output on success.",
        "allowNo": false
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "force:source:retrieve",
    "summary": "Retrieve source from an org.",
    "description": "Use this command to retrieve source (metadata that’s in source format) from an org. To take advantage of change tracking with scratch orgs, use \"force source pull\". To retrieve metadata that’s in metadata format, use \"force mdapi retrieve\".\n\nThe source you retrieve overwrites the corresponding source files in your local project. This command does not attempt to merge the source from your org with your local source files.\n\nIf the comma-separated list you’re supplying contains spaces, enclose the entire comma-separated list in one set of double quotes. On Windows, if the list contains commas, also enclose it in one set of double quotes.",
    "strict": true,
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "Retrieve the source files in a directory from your default org:\n<%= config.bin %> <%= command.id %> --sourcepath path/to/source",
      "Retrieve a specific Apex class and the objects whose source is in a directory from an org with alias \"myscratch\":\n<%= config.bin %> <%= command.id %> --sourcepath \"path/to/apex/classes/MyClass.cls,path/to/source/objects\" --target-org myscratch",
      "Retrieve source files in a comma-separated list that contains spaces:\n<%= config.bin %> <%= command.id %> --sourcepath \"path/to/objects/MyCustomObject/fields/MyField.field-meta.xml, path/to/apex/classes\"",
      "Retrieve all Apex classes:\n<%= config.bin %> <%= command.id %> --metadata ApexClass",
      "Retrieve a specific Apex class:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass",
      "Retrieve a specific Apex class and update source tracking files:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass --tracksource",
      "Retrieve all custom objects and Apex classes:\n<%= config.bin %> <%= command.id %> --metadata \"CustomObject,ApexClass\"",
      "Retrieve all Apex classes and two specific profiles (one of which has a space in its name):\n<%= config.bin %> <%= command.id %> --metadata \"ApexClass, Profile:My Profile, Profile: AnotherProfile\"",
      "Retrieve all metadata components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml",
      "Retrieve metadata from a package or multiple packages:\n<%= config.bin %> <%= command.id %> --packagenames MyPackageName\n<%= config.bin %> <%= command.id %> --packagenames \"Package1, PackageName With Spaces, Package3\"",
      "Retrieve all metadata from a package and specific components that aren’t in the package, specify both -n | --packagenames and one other scoping parameter:\n<%= config.bin %> <%= command.id %> --packagenames MyPackageName --sourcepath path/to/apex/classes\n<%= config.bin %> <%= command.id %> --packagenames MyPackageName --metadata ApexClass:MyApexClass\n<%= config.bin %> <%= command.id %> --packagenames MyPackageName --manifest path/to/package.xml",
      "Retrieve source files to a given directory instead of the default package directory specified in sfdx-project.json:\n<%= config.bin %> <%= command.id %> --metadata \"StandardValueSet:TaskStatus\" --retrievetargetdir path/to/unpackaged"
    ],
    "deprecationOptions": {
      "to": "project retrieve start",
      "message": "We plan to deprecate this command in the future. Try using the \"project retrieve start\" command instead."
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "retrievetargetdir": {
        "name": "retrievetargetdir",
        "type": "option",
        "char": "r",
        "summary": "Root of the directory structure into which the source files are retrieved.",
        "description": "If the target directory matches one of the package directories in your sfdx-project.json file, the command fails.\n\nRunning the command multiple times with the same target adds new files and overwrites existing files.",
        "multiple": false,
        "exclusive": [
          "packagenames",
          "sourcepath"
        ]
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "char": "a",
        "multiple": false
      },
      "sourcepath": {
        "name": "sourcepath",
        "type": "option",
        "char": "p",
        "summary": "Comma-separated list of file paths for source to retrieve from the org.",
        "description": "The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all source files in the directory and its sub-directories).\n\nIf you specify this parameter, don’t specify --manifest or --metadata.",
        "multiple": true,
        "exclusive": [
          "manifest",
          "metadata"
        ],
        "delimiter": ","
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete and display results to the terminal window.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        }
      },
      "manifest": {
        "name": "manifest",
        "type": "option",
        "char": "x",
        "summary": "Complete path for the manifest (package.xml) file that specifies the components to retrieve.",
        "description": "If you specify this parameter, don’t specify --metadata or --sourcepath.",
        "multiple": false,
        "exclusive": [
          "metadata",
          "sourcepath"
        ]
      },
      "metadata": {
        "name": "metadata",
        "type": "option",
        "char": "m",
        "summary": "Comma-separated list of names of metadata components to retrieve from the org.",
        "description": "If you specify this parameter, don’t specify --manifest or --sourcepath.",
        "multiple": true,
        "exclusive": [
          "manifest",
          "sourcepath"
        ],
        "delimiter": ","
      },
      "packagenames": {
        "name": "packagenames",
        "type": "option",
        "char": "n",
        "summary": "Comma-separated list of packages to retrieve.",
        "multiple": true,
        "delimiter": ","
      },
      "tracksource": {
        "name": "tracksource",
        "type": "boolean",
        "char": "t",
        "summary": "If the retrieve succeeds, update source tracking information; doesn't delete local files that were deleted in the org.",
        "allowNo": false
      },
      "forceoverwrite": {
        "name": "forceoverwrite",
        "type": "boolean",
        "char": "f",
        "summary": "Ignore conflict warnings and overwrite changes to the project.",
        "allowNo": false,
        "dependsOn": [
          "tracksource"
        ]
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Verbose output of retrieve result.",
        "allowNo": false
      }
    },
    "args": {},
    "requiresProject": true,
    "requiresUsername": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "force:source:status",
    "summary": "List changes that have been made locally, in an org, or both.",
    "strict": true,
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "List changes that have been made locally but not in the org with alias \"myscratch\":\n<%= config.bin %> <%= command.id %> --local --target-org myscratch",
      "List changes that have been made in your default org but aren't reflected in your local project:\n<%= config.bin %> <%= command.id %> --remote"
    ],
    "deprecationOptions": {
      "to": "project retrieve/deploy preview",
      "message": "We plan to deprecate this command in the future. Try using the \"project retrieve/deploy preview\" command instead."
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "local": {
        "name": "local",
        "type": "boolean",
        "char": "l",
        "summary": "List the changes that have been made locally.",
        "allowNo": false,
        "exclusive": [
          "remote"
        ]
      },
      "remote": {
        "name": "remote",
        "type": "boolean",
        "char": "r",
        "summary": "List the changes that have been made in the org.",
        "allowNo": false,
        "exclusive": [
          "local"
        ]
      },
      "concise": {
        "name": "concise",
        "type": "boolean",
        "summary": "Show only the changes that will be pushed or pulled; omits files that are forceignored.",
        "allowNo": false
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "project:delete:tracking",
    "summary": "Delete all local source tracking information.",
    "description": "WARNING: This command deletes or overwrites all existing source tracking files. Use with extreme caution.\n\nDeletes all local source tracking information. When you next run 'project deploy preview', Salesforce CLI displays all local and remote files as changed, and any files with the same name are listed as conflicts.",
    "strict": true,
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliases": [],
    "examples": [],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "Don't prompt for source tracking override confirmation.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "noprompt"
        ]
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "project:reset:tracking",
    "summary": "Reset local and remote source tracking.",
    "description": "WARNING: This command deletes or overwrites all existing source tracking files. Use with extreme caution.\n\nResets local and remote source tracking so that Salesforce CLI no longer registers differences between your local files and those in the org. When you next run 'project deploy preview', Salesforce CLI returns no results, even though conflicts might actually exist. Salesforce CLI then resumes tracking new source changes as usual.\n\nUse the --revision parameter to reset source tracking to a specific revision number of an org source member. To get the revision number, query the SourceMember Tooling API object with the 'data soql' command. For example:\n\n<%= config.bin %> data query --query \"SELECT MemberName, MemberType, RevisionCounter FROM SourceMember\" --use-tooling-api",
    "strict": true,
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliases": [],
    "examples": [],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "revision": {
        "name": "revision",
        "type": "option",
        "char": "r",
        "summary": "SourceMember revision counter number to reset to.",
        "multiple": false,
        "deprecateAliases": true
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "Don't prompt for source tracking override confirmation.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "noprompt"
        ]
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "static-resource:generate",
    "summary": "Generate a static resource.",
    "description": "Generates the metadata resource file in the specified directory or the current working directory. Static resource files must be contained in a parent directory called \"staticresources\" in your package directory. Either run this command from an existing directory of this name, or use the --output-dir flag to create one or point to an existing one.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata file for a static resource called MyResource in the current directory:\n<%= config.bin %> <%= command.id %> --name MyResource",
      "Similar to previous example, but specifies a MIME type of application/json:\n<%= config.bin %> <%= command.id %> --name MyResource --type application/json",
      "Generate the resource file in the \"force-app/main/default/staticresources\" directory:\n<%= config.bin %> <%= command.id %> --name MyResource --output-dir force-app/main/default/staticresources"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated static resource.",
        "description": "This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "resourcename"
        ]
      },
      "type": {
        "name": "type",
        "type": "option",
        "summary": "Content type (mime type) of the generated static resource.",
        "description": "Must be a valid MIME type such as application/json, application/javascript, application/zip, text/plain, text/css, etc.",
        "multiple": false,
        "default": "application/zip",
        "deprecateAliases": true,
        "aliases": [
          "contenttype"
        ]
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": [
          "outputdir"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "org:create:user",
    "summary": "Create a user for a scratch org.",
    "description": "A scratch org includes one administrator user by default. For testing purposes, however, you sometimes need to create additional users.\n\nThe easiest way to create a user is to let this command assign default or generated characteristics to the new user. If you want to customize your new user, create a definition file and specify it with the --definition-file flag. In the file, you can include all the User sObject (SSalesforce object) fields and Salesforce DX-specific options, as described in \"User Definition File for Customizing a Scratch Org User\" (https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_users_def_file.htm). You can also specify these options on the command line.\n\nIf you don't customize your new user, this command creates a user with the following default characteristics:\n\n    * The username is the existing administrator’s username prepended with a timestamp, such as 1505759162830_test-wvkpnfm5z113@example.com.\n    * The user’s profile is Standard User.\n    * The values of the required fields of the User sObject are the corresponding values of the administrator user.\n    * The user has no password.\n\nUse the --set-alias flag to assign a simple name to the user that you can reference in later CLI commands. This alias is local and different from the Alias field of the User sObject record of the new user, which you set in the Setup UI.\n\nWhen this command completes, it displays the new username and user ID. Run the \"org display user\" command to get more information about the new user.\n\nFor more information about user limits, defaults, and other considerations when creating a new scratch org user, see https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_users.htm.",
    "strict": true,
    "pluginName": "@salesforce/plugin-user",
    "pluginAlias": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create a user for your default scratch org and let this command generate a username, user ID, and other characteristics:\n<%= config.bin %> <%= command.id %>",
      "Create a user with alias \"testuser1\" using a user definition file. Set the \"profileName\" option to \"Chatter Free User\", which overrides the value in the defintion file if it also exists there. Create the user for the scratch org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --set-alias testuser1 --definition-file config/project-user-def.json profileName='Chatter Free User' --target-org my-scratch",
      "Create a user by specifying the username, email, and perm set assignment at the command line; command fails if the username already exists in Salesforce:\n<%= config.bin %> <%= command.id %> username=testuser1@my.org email=me@my.org permsets=DreamHouse",
      "Create a user with a definition file, set the email value as specified (overriding any value in the definition file), and generate a password for the user. If the username in the definition file isn't unique, the command appends the org ID to make it unique:\n<%= config.bin %> <%= command.id %> --definition-file config/project-user-def.json email=me@my.org generatepassword=true --set-unique-username"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "set-alias": {
        "name": "set-alias",
        "type": "option",
        "char": "a",
        "summary": "Set an alias for the created username to reference in other CLI commands.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "setalias"
        ]
      },
      "definition-file": {
        "name": "definition-file",
        "type": "option",
        "char": "f",
        "summary": "File path to a user definition file for customizing the new user.",
        "description": "The user definition file uses JSON format and can include any Salesforce User sObject field and Salesforce DX-specific options. See https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_users_def_file.htm for more information.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "definitionfile"
        ]
      },
      "set-unique-username": {
        "name": "set-unique-username",
        "type": "boolean",
        "char": "s",
        "summary": "Force the username, if specified in the definition file or at the command line, to be unique by appending the org ID.",
        "description": "The new user’s username must be unique across all Salesforce orgs and in the form of an email address. If you let this command generate a username for you, it's guaranteed to be unique. If you specify an existing username in a definition file, the command fails. Set this flag to force the username to be unique; as a result, the username might be different than what you specify in the definition file.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": [
          "setuniqueusername"
        ]
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "hidden": true,
        "required": false,
        "multiple": false,
        "deprecated": {
          "message": "The --target-dev-hub flag is deprecated and is no longer used by this command. The flag will be removed in API version 57.0 or later."
        },
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername"
        ]
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:display:user",
    "summary": "Display information about a Salesforce user.",
    "description": "Output includes the profile name, org ID, access token, instance URL, login URL, and alias if applicable. The displayed alias is local and different from the Alias field of the User sObject record of the new user, which you set in the Setup UI.",
    "strict": true,
    "pluginName": "@salesforce/plugin-user",
    "pluginAlias": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display information about the admin user of your default scratch org:\n<%= config.bin %> <%= command.id %>",
      "Display information about the specified user and output in JSON format:\n<%= config.bin %> <%= command.id %> --target-org me@my.org --json"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "hidden": true,
        "required": false,
        "multiple": false,
        "deprecated": {
          "message": "The --target-dev-hub flag is deprecated and is no longer used by this command. The flag will be removed in API version\n57.0 or later."
        },
        "deprecateAliases": true,
        "aliases": [
          "targetdevhubusername"
        ]
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:list:users",
    "summary": "List all locally-authenticated users of an org.",
    "description": "For scratch orgs, the list includes any users you've created with the \"org create user\" command; the original scratch org admin user is marked with \"(A)\". For other orgs, the list includes the users you used to authenticate to the org.",
    "strict": true,
    "pluginName": "@salesforce/plugin-user",
    "pluginAlias": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List the locally-authenticated users of your default org:\n<%= config.bin %> <%= command.id %>",
      "List the locally-authenticated users of the specified org:\n<%= config.bin %> <%= command.id %> --target-org me@my.org"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The --target-dev-hub flag is deprecated and is no longer used by this command. The flag will be removed in API version 57.0 or later."
        }
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername",
          "u"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "force:user:password:generate",
    "summary": "Generate a random password for scratch org users.",
    "description": "By default, new scratch orgs contain one admin user with no password. Use this command to generate or change a password for any scratch org user. After it's set, you can’t unset a password, you can only change it.\n\nTo change the password strength, set the --complexity flag to a value between 0 and 5. Each value specifies the types of characters used in the generated password:\n\n0 - lower case letters only\n1 - lower case letters and numbers only\n2 - lower case letters and symbols only\n3 - lower and upper case letters and numbers only\n4 - lower and upper case letters and symbols only\n5 - lower and upper case letters and numbers and symbols only\n\nTo see a password that was previously generated, run \"org display user\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-user",
    "pluginAlias": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate a password for the original admin user of your default scratch org:\n<%= config.bin %> <%= command.id %>",
      "Generate a password that contains 12 characters for the original admin user of the scratch org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --length 12 --target-org my-scratch",
      "Generate a password for your default scratch org admin user that uses lower and upper case letters and numbers only:\n<%= config.bin %> <%= command.id %> --complexity 3",
      "Generate a password for the specified users in the default scratch org:\n<%= config.bin %> <%= command.id %> --on-behalf-of user1@my.org --on-behalf-of user2@my.org --on-behalf-of user3@my.org"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "on-behalf-of": {
        "name": "on-behalf-of",
        "type": "option",
        "char": "o",
        "summary": "Comma-separated list of usernames or aliases to assign the password to.",
        "multiple": true,
        "aliases": [
          "onbehalfof"
        ],
        "delimiter": ","
      },
      "length": {
        "name": "length",
        "type": "option",
        "char": "l",
        "summary": "Number of characters in the generated password; valid values are between 8 and 100.",
        "multiple": false,
        "default": 13
      },
      "complexity": {
        "name": "complexity",
        "type": "option",
        "char": "c",
        "summary": "Level of password complexity or strength; the higher the value, the stronger the password.",
        "multiple": false,
        "default": 5
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "hidden": true,
        "required": false,
        "multiple": false,
        "deprecated": {
          "message": "The --target-dev-hub flag is deprecated and is no longer used by this command. The flag will be removed in API version 57.0 or later."
        },
        "aliases": [
          "targetdevhubusername"
        ]
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "u",
        "summary": "Scratch org alias or login user.",
        "required": true,
        "multiple": false,
        "aliases": [
          "targetusername"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": [
          "apiversion"
        ]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "visualforce:generate:component",
    "summary": "Generate a Visualforce Component.",
    "description": "The command generates the .Component file and associated metadata file in the specified directory or the current working directory by default.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata files for a Visualforce component in the current directory:\n<%= config.bin %> <%= command.id %> --name mycomponent --label mylabel",
      "Similar to previous example, but generate the files in the directory \"force-app/main/default/components\":\n<%= config.bin %> <%= command.id %> --name mycomponent --label mylabel --output-dir components"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Visualforce Component.",
        "description": "The name can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "componentname"
        ]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "multiple": false,
        "options": [
          "DefaultVFComponent"
        ],
        "default": "DefaultVFComponent",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": [
          "outputdir"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "Visualforce Component label.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "visualforce:generate:page",
    "summary": "Generate a Visualforce Page.",
    "description": "The command generates the .Page file and associated metadata file in the specified directory or the current working directory by default.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata files for a Visualforce page in the current directory:\n<%= config.bin %> <%= command.id %> --name mypage --label mylabel",
      "Similar to previous example, but generate the files in the directory \"force-app/main/default/pages\":\n<%= config.bin %> <%= command.id %> --name mypage --label mylabel --output-dir pages"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Visualforce Page.",
        "description": "The name can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "pagename"
        ]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "hidden": true,
        "multiple": false,
        "options": [
          "DefaultVFPage"
        ],
        "default": "DefaultVFPage",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": [
          "outputdir"
        ]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": [
          "apiversion"
        ]
      },
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "Visualforce Page label.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "generate metadata field",
    "summary": "Generate metadata source files for a new custom field on a specified object.",
    "description": "This command is interactive and must be run in a Salesforce DX project directory. You're required to specify the field's label with the \"--label\" flag. The command uses this label to provide intelligent suggestions for other field properties, such as its API name.\n\nYou can generate a custom field on either a standard object, such as Account, or a custom object. In both cases, the source files for the object must already exist in your local project before you run this command. If you create a relationship field, the source files for the parent object must also exist in your local directory.  Use the command \"sf metadata retrieve -m CustomObject:<object>\" to retrieve source files for both standard and custom objects from your org.  To create a custom object, run the \"sf generate metadata sobject\" command or use the Object Manager UI in your Salesforce org.",
    "strict": true,
    "pluginName": "@salesforce/plugin-sobject",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "state": "beta",
    "aliases": [
      "generate:metadata:field"
    ],
    "examples": [
      "Create a field with the specified label; the command prompts you for the object:\n<%= config.bin %> <%= command.id %> --label \"My Field\"",
      "Specify the local path to the object's folder:\n<%= config.bin %> <%= command.id %> --label \"My Field\" --object force-app/main/default/objects/MyObject__c"
    ],
    "deprecateAliases": true,
    "flags": {
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "The field's label.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "summary": "The directory that contains the object's source files.",
        "description": "The object source files in your local project are grouped in a directoy with the same name as the object. Custom object names always end in \"__c\". An example of the object directory for the Account standard object is \"force-app/main/default/objects/Account\" An example custom object directory is \"force-app/main/default/objects/MyObject__c\"\n\nIf you don't specify this flag, the command prompts you to choose from your local objects.",
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true
  },
  {
    "id": "generate metadata platformevent",
    "summary": "Generate metadata source files for a new platform event.",
    "description": "This command is interactive and must be run in a Salesforce DX project directory. You're required to specify the event's label with the \"--label\" flag. The command uses this label to provide intelligent suggestions for other event properties, such as its API name.",
    "strict": true,
    "pluginName": "@salesforce/plugin-sobject",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "state": "beta",
    "aliases": [
      "generate:metadata:platformevent"
    ],
    "examples": [
      "Create a platform event with the specified label:\n<%= config.bin %> <%= command.id %> --label \"My Platform Event\""
    ],
    "deprecateAliases": true,
    "flags": {
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "The platform event's label.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true
  },
  {
    "id": "generate metadata sobject",
    "summary": "Generate metadata source files for a new custom object.",
    "description": "This command is interactive and must be run in a Salesforce DX project directory. You're required to specify the object's label with the \"--label\" flag. The command uses this label to provide intelligent suggestions for other object properties, such as its API name and plural label.\n\nAll Salesforce objects are required to have a Name field, so this command also prompts you for the label and type of the Name field. Run the \"sf metadata generate field\" command to create additional fields for the object.\n\nTo reduce the number of prompts, use the \"--use-default-features\" flag to automatically enable some features, such as reporting and search on the object.",
    "strict": true,
    "pluginName": "@salesforce/plugin-sobject",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "state": "beta",
    "aliases": [
      "generate:metadata:sobject"
    ],
    "examples": [
      "Create a custom object with the specified label and be prompted for additional information:\n<%= config.bin %> <%= command.id %> --label \"My Object\"",
      "Create a custom object and enable optional features without prompting:\n<%= config.bin %> <%= command.id %> --label \"My Object\" --use-default-features"
    ],
    "deprecateAliases": true,
    "flags": {
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "The custom object's label.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "use-default-features": {
        "name": "use-default-features",
        "type": "boolean",
        "char": "f",
        "summary": "Enable all optional features without prompting.",
        "description": "Enables these features:\n\n* Search: Allows users to find the custom object's records when they search, including SOSL.\n* Feeds: Enables feed tracking.\n* Reports: Allows reporting of the data in the custom object records.\n* History: Enables object history tracking.\n* Activities: Allows users to associate tasks and scheduled calendar events related to the custom object records.\n* Bulk API: With Sharing and Streaming API, classifies the custom object as an Enterprise Application object.\n* Sharing: With Bulk API and Streaming API, classifies the custom object as an Enterprise Application object.\n* Streaming API: With Bulk API and Sharing, classifies the custom object as an Enterprise Application object.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true
  },
  {
    "id": "generate metadata tab",
    "summary": "Generate the metadata source files for a new custom tab on a custom object.",
    "description": "Custom tabs let you display custom object data or other web content in Salesforce. Custom tabs appear in Salesforce as an item in the app’s navigation bar and in the App Launcher.\n\nThis command must be run in a Salesforce DX project directory. You must pass all required information to it with the required flags. The source files for the custom object for which you're generating a tab don't need to exist in your local project.",
    "strict": true,
    "pluginName": "@salesforce/plugin-sobject",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "state": "beta",
    "aliases": [
      "generate:metadata:tab"
    ],
    "examples": [
      "Create a tab on the MyObject__c custom object:\n<%= config.bin %> <%= command.id %> --object MyObject__c --icon 54 --directory force-app/main/default/tabs"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "summary": "API name of the custom object you're generating a tab for.",
        "description": "The API name for a custom object always ends in \"__c\", such as \"MyObject__c\".",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "directory": {
        "name": "directory",
        "type": "option",
        "char": "d",
        "summary": "Path to a \"tabs\" directory that will contain the source files for your new tab.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "icon": {
        "name": "icon",
        "type": "option",
        "char": "i",
        "summary": "Number from 1 to 100 that specifies the color scheme and icon for the custom tab.",
        "description": "See https://lightningdesignsystem.com/icons/\\#custom for the available icons.",
        "required": true,
        "multiple": false,
        "default": 1,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true
  },
  {
    "id": "help",
    "description": "Display help for <%= config.bin %>.",
    "strict": true,
    "pluginName": "@oclif/plugin-help",
    "pluginAlias": "@oclif/plugin-help",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "nested-commands": {
        "name": "nested-commands",
        "type": "boolean",
        "char": "n",
        "description": "Include all nested commands in the output.",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "nested-commands": {
        "description": "Include all nested commands in the output.",
        "char": "n",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false,
    "_enableJsonFlag": false
  },
  {
    "id": "info:releasenotes:display",
    "summary": "Display Salesforce CLI release notes on the command line.",
    "description": "By default, this command displays release notes for the currently installed CLI version on your computer. Use the --version flag to view release notes for a different release.",
    "strict": true,
    "pluginName": "@salesforce/plugin-info",
    "pluginAlias": "@salesforce/plugin-info",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display release notes for the currently installed CLI version:\n<%= config.bin %> <%= command.id %> stable, stable-rc, latest, latest-rc, rc",
      "Display release notes for CLI version 7.120.0:\n<%= config.bin %> <%= command.id %> --version 7.120.0 stable, stable-rc, latest, latest-rc, rc",
      "Display release notes for the CLI version that corresponds to a tag (stable, stable-rc, latest, latest-rc, rc):\n<%= config.bin %> <%= command.id %> --version latest"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "version": {
        "name": "version",
        "type": "option",
        "char": "v",
        "summary": "CLI version or tag for which to display release notes.",
        "multiple": false
      },
      "hook": {
        "name": "hook",
        "type": "boolean",
        "summary": "This hidden parameter is used in post install or update hooks.",
        "hidden": true,
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "helpers": [
      "stable",
      "stable-rc",
      "latest",
      "latest-rc",
      "rc"
    ],
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "org:assign:permset",
    "summary": "Assign a permission set to one or more users of a scratch org.",
    "description": "To specify an alias for the --target-org or --on-behalf-of flags, use the CLI username alias, such as the one you set with the \"alias set\" command. Don't use the value of the Alias field of the User Salesforce object for the org user.\n\nTo assign multiple permission sets, either set multiple --name flags or a single --name flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --on-behalf-of.",
    "strict": true,
    "pluginName": "@salesforce/plugin-user",
    "pluginAlias": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Assign two permission sets called DreamHouse and CloudHouse to original admin user of your default scratch org:\n<%= config.bin %> <%= command.id %> --name DreamHouse --name CloudHouse",
      "Assign the Dreamhouse permission set to the original admin user of the scratch org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --name DreamHouse --target-org my-scratch",
      "Assign the Dreamhouse permission set to the specified list of users of your default scratch org:\n<%= config.bin %> <%= command.id %> --name DreamHouse --on-behalf-of user1@my.org --on-behalf-of user2 --on-behalf-of user"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Permission set to assign.",
        "required": true,
        "multiple": true,
        "aliases": [
          "permsetname"
        ]
      },
      "on-behalf-of": {
        "name": "on-behalf-of",
        "type": "option",
        "char": "b",
        "summary": "Username or alias to assign the permission set to.",
        "multiple": true,
        "aliases": [
          "onbehalfof"
        ]
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Scratch org alias or login user.",
        "required": true,
        "multiple": false
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:assign:permsetlicense",
    "summary": "Assign a permission set license to one or more users of a scratch org.",
    "description": "To specify an alias for the --target-org or --on-behalf-of flags, use the CLI username alias, such as the one you set with the \"alias set\" command. Don't use the value of the Alias field of the User Salesforce object for the org user.\n\nTo assign multiple permission sets, either set multiple --name flags or a single --name flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --on-behalf-of.",
    "strict": true,
    "pluginName": "@salesforce/plugin-user",
    "pluginAlias": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Assign the DreamHouse permission set license to original admin user of your default scratch org:\n<%= config.bin %> <%= command.id %> --name DreamHouse",
      "Assign two permission set licenses to the original admin user of the scratch org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --name DreamHouse --name CloudHouse --target-org my-scratch",
      "Assign the Dreamhouse permission set license to the specified list of users of your default scratch org:\n<%= config.bin %> <%= command.id %> --name DreamHouse --on-behalf-of user1@my.org --on-behalf-of user2 --on-behalf-of user3"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the permission set license to assign.",
        "required": true,
        "multiple": false,
        "aliases": [
          "perm-set-license",
          "psl"
        ]
      },
      "on-behalf-of": {
        "name": "on-behalf-of",
        "type": "option",
        "char": "b",
        "summary": "Usernames or alias to assign the permission set license to.",
        "multiple": true,
        "aliases": [
          "onbehalfof"
        ],
        "delimiter": ","
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Scratch org alias or login user.",
        "required": true,
        "multiple": false
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "org:generate:password",
    "summary": "Generate a random password for scratch org users.",
    "description": "By default, new scratch orgs contain one admin user with no password. Use this command to generate or change a password for any scratch org user. After it's set, you can’t unset a password, you can only change it.\n\nTo change the password strength, set the --complexity flag to a value between 0 and 5. Each value specifies the types of characters used in the generated password:\n\n0 - lower case letters only\n1 - lower case letters and numbers only\n2 - lower case letters and symbols only\n3 - lower and upper case letters and numbers only\n4 - lower and upper case letters and symbols only\n5 - lower and upper case letters and numbers and symbols only\n\nTo see a password that was previously generated, run \"org display user\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-user",
    "pluginAlias": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate a password for the original admin user of your default scratch org:\n<%= config.bin %> <%= command.id %>",
      "Generate a password that contains 12 characters for the original admin user of the scratch org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --length 12 --target-org my-scratch",
      "Generate a password for your default scratch org admin user that uses lower and upper case letters and numbers only:\n<%= config.bin %> <%= command.id %> --complexity 3",
      "Generate a password for the specified users in the default scratch org:\n<%= config.bin %> <%= command.id %> --on-behalf-of user1@my.org --on-behalf-of user2@my.org --on-behalf-of user3@my.org"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "on-behalf-of": {
        "name": "on-behalf-of",
        "type": "option",
        "char": "b",
        "summary": "Comma-separated list of usernames or aliases to assign the password to.",
        "multiple": true,
        "aliases": [
          "onbehalfof"
        ]
      },
      "length": {
        "name": "length",
        "type": "option",
        "char": "l",
        "summary": "Number of characters in the generated password; valid values are between 8 and 100.",
        "multiple": false,
        "default": 13
      },
      "complexity": {
        "name": "complexity",
        "type": "option",
        "char": "c",
        "summary": "Level of password complexity or strength; the higher the value, the stronger the password.",
        "multiple": false,
        "default": 5
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "plugins",
    "description": "List installed plugins.",
    "strict": true,
    "pluginName": "@oclif/plugin-plugins",
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ <%- config.bin %> plugins"
    ],
    "flags": {
      "core": {
        "name": "core",
        "type": "boolean",
        "description": "Show core plugins.",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "core": {
        "description": "Show core plugins.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false,
    "_enableJsonFlag": false
  },
  {
    "id": "plugins:install",
    "description": "Installs a plugin into the CLI.\nCan be installed from npm or a git url.\n\nInstallation of a user-installed plugin will override a core plugin.\n\ne.g. If you have a core plugin that has a 'hello' command, installing a user-installed plugin with a 'hello' command will override the core plugin implementation. This is useful if a user needs to update core plugin functionality in the CLI without the need to patch and update the whole CLI.\n",
    "strict": true,
    "usage": "plugins:install PLUGIN...",
    "pluginName": "@oclif/plugin-plugins",
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ <%= config.bin %> plugins:install <%- config.pjson.oclif.examplePlugin || \"myplugin\" %> ",
      "$ <%= config.bin %> plugins:install https://github.com/someuser/someplugin",
      "$ <%= config.bin %> plugins:install someuser/someplugin"
    ],
    "flags": {
      "help": {
        "name": "help",
        "type": "boolean",
        "char": "h",
        "description": "Show CLI help.",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "char": "v",
        "allowNo": false
      },
      "force": {
        "name": "force",
        "type": "boolean",
        "char": "f",
        "description": "Run yarn install with force flag.",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "help": {
        "description": "Show CLI help.",
        "char": "h",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "allowNo": false,
        "type": "boolean"
      },
      "force": {
        "char": "f",
        "description": "Run yarn install with force flag.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false,
    "_enableJsonFlag": false
  },
  {
    "id": "plugins generate",
    "summary": "Generate a new sf plugin.",
    "description": "This command is interactive. You're prompted for information to populate your new plugin, such as its name, description, author, and percentage of code coverage you want. The command clones the 'salesforcecli/plugin-template-sf' GitHub repository, installs the plug-in's npm package dependencies using yarn install, and updates the package properties.\n\nWhen the command completes, your new plugin contains the source, message, and test files for a sample \"sf hello world\" command.",
    "strict": true,
    "pluginName": "@salesforce/plugin-dev",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "aliases": [
      "plugins:generate"
    ],
    "examples": [
      "<%= config.bin %> <%= command.id %>"
    ],
    "deprecateAliases": true,
    "flags": {},
    "args": {}
  },
  {
    "id": "plugins:inspect",
    "description": "Displays installation properties of a plugin.",
    "strict": true,
    "usage": "plugins:inspect PLUGIN...",
    "pluginName": "@oclif/plugin-plugins",
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ <%= config.bin %> plugins:inspect <%- config.pjson.oclif.examplePlugin || \"myplugin\" %> "
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "help": {
        "name": "help",
        "type": "boolean",
        "char": "h",
        "description": "Show CLI help.",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "char": "v",
        "allowNo": false
      }
    },
    "args": {},
    "_enableJsonFlag": false,
    "_baseFlags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "_flags": {
      "help": {
        "description": "Show CLI help.",
        "char": "h",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "plugins:link",
    "description": "Links a plugin into the CLI for development.\nInstallation of a linked plugin will override a user-installed or core plugin.\n\ne.g. If you have a user-installed or core plugin that has a 'hello' command, installing a linked plugin with a 'hello' command will override the user-installed or core plugin implementation. This is useful for development work.\n",
    "strict": true,
    "usage": "plugins:link PLUGIN",
    "pluginName": "@oclif/plugin-plugins",
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ <%= config.bin %> plugins:link <%- config.pjson.oclif.examplePlugin || \"myplugin\" %> "
    ],
    "flags": {
      "help": {
        "name": "help",
        "type": "boolean",
        "char": "h",
        "description": "Show CLI help.",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "char": "v",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "help": {
        "description": "Show CLI help.",
        "char": "h",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false,
    "_enableJsonFlag": false
  },
  {
    "id": "plugins:uninstall",
    "description": "Removes a plugin from the CLI.",
    "strict": true,
    "usage": "plugins:uninstall PLUGIN...",
    "pluginName": "@oclif/plugin-plugins",
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "help": {
        "name": "help",
        "type": "boolean",
        "char": "h",
        "description": "Show CLI help.",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "char": "v",
        "allowNo": false
      }
    },
    "args": {},
    "help": "\n  Example:\n    $ <%- config.bin %> plugins:uninstall <%- config.pjson.oclif.examplePlugin || \"myplugin\" %>\n  ",
    "variableArgs": true,
    "_flags": {
      "help": {
        "description": "Show CLI help.",
        "char": "h",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false,
    "_enableJsonFlag": false
  },
  {
    "id": "plugins:trust:verify",
    "summary": "Validate a digital signature.",
    "description": "Verifies the digital signature on an npm package matches the signature and key stored at the expected URLs.",
    "strict": true,
    "pluginName": "@salesforce/plugin-trust",
    "pluginAlias": "@salesforce/plugin-trust",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "<%= config.bin %> <%= command.id %> --npm @scope/npmName --registry http://my.repo.org:4874",
      "<%= config.bin %> <%= command.id %> --npm @scope/npmName"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "npm": {
        "name": "npm",
        "type": "option",
        "char": "n",
        "summary": "Specify the npm name. This can include a tag/version.",
        "required": true,
        "multiple": false
      },
      "registry": {
        "name": "registry",
        "type": "option",
        "char": "r",
        "summary": "The registry name. The behavior is the same as npm.",
        "multiple": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "plugins:update",
    "description": "Update installed plugins.",
    "strict": true,
    "pluginName": "@oclif/plugin-plugins",
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "help": {
        "name": "help",
        "type": "boolean",
        "char": "h",
        "description": "Show CLI help.",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "char": "v",
        "allowNo": false
      }
    },
    "args": {},
    "topic": "plugins",
    "command": "update",
    "_flags": {
      "help": {
        "description": "Show CLI help.",
        "char": "h",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false,
    "_enableJsonFlag": false
  },
  {
    "id": "project:retrieve:preview",
    "summary": "Preview a retrieval to see what will be retrieved from the org, the potential conflicts, and the ignored files.",
    "description": "You must run this command from within a project.\n\nThe command outputs a table that describes what will happen if you run the \"<%= config.bin %> project retrieve start\" command. The table lists the metadata components that will be retrieved and deleted. The table also lists the current conflicts between files in your local project and components in the org. Finally, the table lists the files that won't be retrieved because they're included in your .forceignore file.\n\nIf your org allows source tracking, then this command displays potential conflicts between the org and your local project. Some orgs, such as production org, never allow source tracking. Source tracking is enabled by default on scratch and sandbox orgs; you can disable source tracking when you create the orgs by specifying the --no-track-source flag on the \"<%= config.bin %> org create scratch|sandbox\" commands.",
    "strict": true,
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Preview the retrieve of all changes from your default org:\n<%= config.bin %> <%= command.id %>",
      "Preview the retrieve when ignoring any conflicts from an org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --ignore-conflicts --target-org my-scratch"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "ignore-conflicts": {
        "name": "ignore-conflicts",
        "type": "boolean",
        "char": "c",
        "summary": "Don't display conflicts in the preview of the retrieval.",
        "description": "This flag applies only to orgs that allow source tracking. It has no effect on orgs that don't allow it, such as production orgs.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Login username or alias for the target org.",
        "description": "Overrides your default org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "project:retrieve:start",
    "summary": "Retrieve metadata from an org to your local project.",
    "description": "You must run this command from within a project.\n\nMetadata components are retrieved in source format by default. Retrieve them in metadata format by specifying the --target-metadata-dir flag, which retrieves the components into a ZIP file in the specified directory.\n\nIf your org allows source tracking, then this command tracks the changes in your source. Some orgs, such as production org, never allow source tracking. Source tracking is enabled by default on scratch and sandbox orgs; you can disable source tracking when you create the orgs by specifying the --no-track-source flag on the \"<%= config.bin %> org create scratch|sandbox\" commands.\n\nTo retrieve multiple metadata components, either use multiple --metadata <name> flags or use a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.",
    "strict": true,
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Retrieve remote changes from your default org:\n<%= config.bin %> <%= command.id %>",
      "Retrieve the source files in a directory from an org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --source-dir path/to/source --target-org my-scratch",
      "Retrieve a specific Apex class and the objects whose source is in a directory (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --source-dir path/to/apex/classes/MyClass.cls path/to/source/objects\n<%= config.bin %> <%= command.id %> --source-dir path/to/apex/classes/MyClass.cls --source-dir path/to/source/objects",
      "Retrieve all Apex classes:\n<%= config.bin %> <%= command.id %> --metadata ApexClass",
      "Retrieve a specific Apex class:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass",
      "Retrieve all custom objects and Apex classes (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --metadata CustomObject ApexClass\n<%= config.bin %> <%= command.id %> --metadata CustomObject --metadata ApexClass",
      "Retrieve all metadata components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml",
      "Retrieve metadata from a package:\n<%= config.bin %> <%= command.id %> --package-name MyPackageName",
      "Retrieve metadata from multiple packages, one of which has a space in its name (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --package-name Package1 \"PackageName With Spaces\" Package3\n<%= config.bin %> <%= command.id %> --package-name Package1 --package-name \"PackageName With Spaces\" --package-name Package3",
      "Retrieve the metadata components listed in the force-app directory, but retrieve them in metadata format into a ZIP file in the \"output\" directory:\n<%= config.bin %> <%= command.id %> --source-dir force-app --target-metadata-dir output",
      "Retrieve in metadata format and automatically extract the contents into the \"output\" directory:\n<%= config.bin %> <%= command.id %> --source-dir force-app --target-metadata-dir output --unzip"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "char": "a",
        "summary": "Target API version for the retrieve.",
        "description": "Use this flag to override the default API version, which is the latest version supported the CLI, with the API version in your package.xml file.",
        "multiple": false,
        "deprecateAliases": true
      },
      "ignore-conflicts": {
        "name": "ignore-conflicts",
        "type": "boolean",
        "char": "c",
        "summary": "Ignore conflicts and retrieve and save files to your local filesystem, even if they overwrite your local changes.",
        "description": "This flag applies only to orgs that allow source tracking. It has no effect on orgs that don't allow it, such as production orgs.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "manifest": {
        "name": "manifest",
        "type": "option",
        "char": "x",
        "summary": "File path for the manifest (package.xml) that specifies the components to retrieve.",
        "description": "If you specify this parameter, don’t specify --metadata or --source-dir.",
        "multiple": false,
        "exclusive": [
          "metadata",
          "source-dir"
        ],
        "deprecateAliases": true
      },
      "metadata": {
        "name": "metadata",
        "type": "option",
        "char": "m",
        "summary": "Metadata component names to retrieve.",
        "multiple": true,
        "exclusive": [
          "manifest",
          "source-dir"
        ],
        "deprecateAliases": true
      },
      "package-name": {
        "name": "package-name",
        "type": "option",
        "char": "n",
        "summary": "Package names to retrieve.",
        "multiple": true,
        "deprecateAliases": true
      },
      "single-package": {
        "name": "single-package",
        "type": "boolean",
        "summary": "Indicates that the zip file points to a directory structure for a single package.",
        "allowNo": false,
        "dependsOn": [
          "target-metadata-dir"
        ],
        "exclusive": [
          "ignore-conflicts"
        ],
        "deprecateAliases": true
      },
      "source-dir": {
        "name": "source-dir",
        "type": "option",
        "char": "d",
        "summary": "File paths for source to retrieve from the org.",
        "description": "The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all source files in the directory and its subdirectories).",
        "multiple": true,
        "exclusive": [
          "manifest",
          "metadata"
        ],
        "deprecateAliases": true
      },
      "target-metadata-dir": {
        "name": "target-metadata-dir",
        "type": "option",
        "char": "t",
        "summary": "Directory that will contain the retrieved metadata format files or ZIP.",
        "multiple": false,
        "relationships": [
          {
            "type": "some",
            "flags": [
              "manifest",
              "metadata",
              "source-dir",
              "package-name"
            ]
          }
        ],
        "exclusive": [
          "ignore-conflicts"
        ],
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Login username or alias for the target org.",
        "description": "Overrides your default org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete and display results to the terminal window.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        },
        "deprecateAliases": true
      },
      "unzip": {
        "name": "unzip",
        "type": "boolean",
        "char": "z",
        "summary": "Extract all files from the retrieved zip file.",
        "allowNo": false,
        "dependsOn": [
          "target-metadata-dir"
        ],
        "exclusive": [
          "ignore-conflicts"
        ],
        "deprecateAliases": true
      },
      "zip-file-name": {
        "name": "zip-file-name",
        "type": "option",
        "summary": "File name to use for the retrieved zip file.",
        "multiple": false,
        "dependsOn": [
          "target-metadata-dir"
        ],
        "exclusive": [
          "ignore-conflicts"
        ],
        "deprecateAliases": true
      }
    },
    "args": {},
    "configurationVariablesSection": {
      "header": "CONFIGURATION VARIABLES",
      "body": [
        {
          "name": "target-org",
          "description": "Username or alias of the org that all commands run against by default. (sf only)"
        },
        {
          "name": "org-api-version",
          "description": "API version of your project. Default: API version of your Dev Hub org."
        }
      ]
    },
    "envVariablesSection": {
      "header": "ENVIRONMENT VARIABLES",
      "body": [
        {
          "name": "SF_TARGET_ORG",
          "description": "Username or alias of your default org. Overrides the target-org configuration variable."
        },
        {
          "name": "SF_USE_PROGRESS_BAR",
          "description": "Set to false to disable the progress bar when running the metadata deploy command."
        }
      ]
    },
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.8.5",
    "_--": false
  },
  {
    "id": "scanner:rule:add",
    "description": "add custom rules to Salesforce Code Analyzer's registry",
    "usage": "scanner:rule:add -l <string> -p <array> [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/sfdx-scanner",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "Bundle custom PMD rules in JAR files. Follow PMD conventions, such as defining the custom rules in XML files under a `/category/` directory.\nSee PMD's documentation for more information on writing rules.\n\nThis example shows how to specify two JAR files directly.\n\t$ sfdx scanner:rule:add --language apex --path \"/Users/me/rules/Jar1.jar,/Users/me/rules/Jar2.jar\"\n\t\tSuccessfully added rules for apex.\n\t\t2 path(s) added:\n\t\t/Users/me/rules/Jar1.jar,/Users/me/rules/Jar2.jar\n\nThis example shows how to specify a directory containing one or more JARs, all of which are added to the registry.\n\t$ sfdx scanner:rule:add --language apex --path \"/Users/me/rules\"\n\t\tSuccessfully added rules for apex."
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "language": {
        "name": "language",
        "type": "option",
        "char": "l",
        "description": "language that the custom rules are evaluated against",
        "required": true
      },
      "path": {
        "name": "path",
        "type": "option",
        "char": "p",
        "description": "one or more paths (such as a directory or JAR file) to custom rule definitions",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "@salesforce/sfdx-scanner",
    "longDescription": "Adds custom rules to Salesforce Code Analyzer's registry so that you can run them along with the built-in rules. Compile and test custom rules separately before adding them.",
    "flagsConfig": {
      "language": {
        "kind": "string",
        "char": "l",
        "description": "language that the custom rules are evaluated against",
        "longDescription": "Language that the custom rules are evaluated against.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "path": {
        "kind": "array",
        "char": "p",
        "description": "one or more paths (such as a directory or JAR file) to custom rule definitions",
        "longDescription": "One or more paths (such as a directory or JAR file) to  custom rule definitions. Specify multiple values as a comma-separated list.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.2",
    "strict": true,
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "scanner:rule:describe",
    "description": "provide detailed information about a rule",
    "usage": "scanner:rule:describe -n <string> [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/sfdx-scanner",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "$ sfdx scanner:rule:describe --rulename ExampleRule\n\tname:        AvoidWithStatement\n\tcategories:   Best Practices\n\trulesets:    Controversial Ecmascript\n\tlanguages:   javascript\n\tdescription: Avoid using with - it's bad news\n\tmessage:     Avoid using with - it's bad news\n\t"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "rulename": {
        "name": "rulename",
        "type": "option",
        "char": "n",
        "description": "the name of the rule",
        "required": true
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      }
    },
    "args": [
      {
        "name": "file"
      }
    ],
    "pluginAlias": "@salesforce/sfdx-scanner",
    "longDescription": "Provides detailed information about a rule. Information includes the rule's language (such as Apex or Java), the violation it detects, and example code of the violation. The command output also includes the rule's categories and rulesets.",
    "flagsConfig": {
      "rulename": {
        "kind": "string",
        "char": "n",
        "description": "the name of the rule",
        "longDescription": "The name of the rule.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "type": "builtin"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.2",
    "strict": true,
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "scanner:rule:list",
    "description": "list basic information about all rules matching provided criteria",
    "usage": "scanner:rule:list [-c <array>] [-r <array>] [-l <array>] [-e <array>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/sfdx-scanner",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "\nThis example invokes the command without filter criteria, which returns all rules.\n\t$ sfdx scanner:rule:list\n\nThis example returns all rules for Apex OR Javascript. Values supplied to a single filter are handled with a logical OR.\n\t$ sfdx scanner:rule:list --language apex,javascript\n\nThis example returns all rules except those in the Design or Best Practices categories. Exclude categories by specifying the negation operator and enclosing the values in single quotes.\n\t$ sfdx scanner:rule:list --category '!Design,!Best Practices'\n\nThis example returns all rules that target Apex OR Javascript, AND are members of the Braces OR Security rulesets.\nThe different filters are combined with a logical AND.\n\t$ sfdx scanner:rule:list --language apex,javascript --ruleset Braces,Security\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      },
      "category": {
        "name": "category",
        "type": "option",
        "char": "c",
        "description": "select rules by category"
      },
      "ruleset": {
        "name": "ruleset",
        "type": "option",
        "char": "r",
        "description": "[deprecated] select rules by ruleset"
      },
      "language": {
        "name": "language",
        "type": "option",
        "char": "l",
        "description": "select rules by language"
      },
      "engine": {
        "name": "engine",
        "type": "option",
        "char": "e",
        "description": "select rules by engine"
      }
    },
    "args": [
      {
        "name": "file"
      }
    ],
    "pluginAlias": "@salesforce/sfdx-scanner",
    "longDescription": "Lists all the rules available in the catalog. You can filter the output to view a smaller set of rules. To get more information about a specific rule, use the `scanner:rule:describe` command.",
    "flagsConfig": {
      "verbose": {
        "type": "builtin"
      },
      "category": {
        "kind": "array",
        "char": "c",
        "description": "select rules by category",
        "longDescription": "Selects rules by category. Enter multiple values as a comma-separated list.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "ruleset": {
        "kind": "array",
        "char": "r",
        "deprecated": {
          "messageOverride": "The 'ruleset' command parameter is deprecated. Use 'category' instead"
        },
        "description": "[deprecated] select rules by ruleset",
        "longDescription": "[deprecated] Selects rules by ruleset. Enter multiple values as a comma-separated list.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "language": {
        "kind": "array",
        "char": "l",
        "description": "select rules by language",
        "longDescription": "Selects rules by language. Enter multiple values as a comma-separated list.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "engine": {
        "kind": "array",
        "char": "e",
        "description": "select rules by engine",
        "longDescription": "Selects rules by engine. Enter multiple engines as a comma-separated list.",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.2",
    "strict": true,
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "scanner:rule:remove",
    "description": "remove custom rules from the registry of available rules",
    "usage": "scanner:rule:remove [-f] [-p <array>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/sfdx-scanner",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "This example runs the command without arguments to see a list of registered custom paths.\n\t$ sfdx scanner:rule:remove\n\nThis example uses the --path parameter to deregister the rules defined in somerules.jar and any JARs/XMLs contained in the rules folder.\n\t$ sfdx scanner:rule:remove --path \"~/path/to/somerules.jar,~/path/to/folder/containing/rules\"\n\nThis example uses the --force flag to bypass the confirmation prompt, removing all rules defined in somerules.jar.\nBy default, a list of all rules that will be unregistered is displayed, and the action must be confirmed. To bypass that confirmation, use the --force flag.\n\t$ sfdx scanner:rule:remove --force --path \"~/path/to/somerules.jar\"\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      },
      "force": {
        "name": "force",
        "type": "boolean",
        "char": "f",
        "description": "bypass the confirmation prompt and immediately remove the rules",
        "allowNo": false
      },
      "path": {
        "name": "path",
        "type": "option",
        "char": "p",
        "description": "one or more paths to remove"
      }
    },
    "args": [
      {
        "name": "file"
      }
    ],
    "pluginAlias": "@salesforce/sfdx-scanner",
    "longDescription": "Removes custom rules from the registry of available rules. Use the `-p|--path` parameter to specify one or more paths to remove. If you don't specify any parameters, the command lists all valid custom paths but doesn't remove any.",
    "flagsConfig": {
      "verbose": {
        "type": "builtin"
      },
      "force": {
        "kind": "boolean",
        "char": "f",
        "description": "bypass the confirmation prompt and immediately remove the rules",
        "longDescription": "Bypasses the confirmation prompt and immediately removes the rules.",
        "allowNo": false,
        "type": "boolean"
      },
      "path": {
        "kind": "array",
        "char": "p",
        "description": "one or more paths to remove",
        "longDescription": "One or more paths to remove. Specify multiple values with a comma-separated list.",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.2",
    "strict": true,
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "scanner:run",
    "description": "scan a codebase with a selection of rules",
    "usage": "scanner:run -t <array> [-c <array>] [-f csv|html|json|junit|sarif|table|xml] [-o <string>] [-s <integer> | --json] [--normalize-severity] [-p <array>] [-r <array>] [-e <array>] [--tsconfig <string>] [--eslintconfig <string>] [--pmdconfig <string>] [--env <string>] [--verbose-violations] [--verbose] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/sfdx-scanner",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "This example evaluates all rules against somefile.js.\nInvoking code analyzer without specifying any rules causes all rules to be run.\n\t$ sfdx scanner:run --format xml --target \"somefile.js\"\n\nThis example evaluates all rules in the Design and Best Practices categories.\nWhen you specify multiple categories or rulesets, the results are combined with a logical OR.\n\t$ sfdx scanner:run --format xml --target \"somefile.js\" --\n\nThis example evaluates all rules except those in the Design or Best Practices categories.\nExclude categories by specifying the negation operator and enclosing the values in single quotes.\n\t$ sfdx scanner:run --format xml --target \"somefile.js\" --category '!Design,!Best Practices'\n\nWrap globs in quotes. These examples evaluate rules against all .js files in the current directory, except for IgnoreMe.js.\nUnix example:\n\t$ sfdx scanner:run --target './**/*.js,!./**/IgnoreMe.js' ...\nWindows example:\n\t$ sfdx scanner:run --target \".\\**\\*.js,!.\\**\\IgnoreMe.js\" ...\n\nThis example scans the project contained in '/my-project' if the current working directory is another directory.\nSpecify tsconfig.json if the current working directory does not contain the tsconfig.json that corresponds to the TypeScript files being scanned.\n\t$ sfdx scanner:run --target \"/my-project/**/*.ts\" --tsconfig \"/my-project/tsconfig.json\"\n\nThis example evaluates rules against somefile.js, including Jasmine in the environment variables.\nUses --env to override the default ESLint environment variables to add frameworks.\n\t$ sfdx scanner:run --target \"somefile.js\" --env '{\"jasmine\": true}'\n\nThis example evaluates rules aginst somefile.js using eslint-lwc and pmd engines.\nUse --engine to include or exclude engines. Any engine listed will be run, regardless of its current 'disabled' attribute.\n\t$ sfdx scanner:run --target \"somefile.js\" --engine \"eslint-lwc,pmd\"\n\nThis example executes CPD engine against known file extensions in \"/some/dir\". CPD helps detect blocks of code duplication in selected languages.\nUse --engine to invoke engines that are not enabled by default.\n\t$ sfdx scanner:run --target \"/some/dir\" --engine cpd\n\nThis example executes rules defined in pmd_rule_ref.xml against the files in 'src'.\nTo use PMD with your own rule reference file, use --pmdconfig. Note that rule filters are not applied.\n\t$ sfdx scanner:run --target \"src\" --pmdconfig \"pmd_rule_ref.xml\"\n\nThis example uses a custom config to scan the files in 'src'.\nTo use ESLint with your own .eslintrc.json file, use --eslintconfig. Make sure that the directory you run the command from has all the NPM dependencies installed.\n\t$ sfdx scanner:run --target \"src\" --eslintconfig \"/home/my/setup/.eslintrc.json\"\n\nThis example uses --normalize-severity to output normalized severity and engine-specific severity across all engines. Normalized severity is: 1 (high), 2 (moderate), and 3 (low).\n\t$ sfdx scanner:run --target \"/some-project/\" --format csv --normalize-severity\n\nThis example uses --severity-threshold to throw a non-zero exit code when rule violations of normalized severity 2 or greater are found. If any violations with the specified severity (or greater) are found, the exit code equals the severity of the most severe violation.\n\t$ sfdx scanner:run --target \"/some-project/\" --severity-threshold 2\n\nThe paths specified for --projectdir must contain all files specified through --target cumulatively.\n\t$ sfdx scanner:run --target \"./myproject/main/default/classes/*.cls\" --projectdir \"./myproject/\"\n\t$ sfdx scanner:run --target \"./**/*.cls\" --projectdir \"./\"\n\t$ sfdx scanner:run --target \"./dir1/file1.cls,./dir2/file2.cls\" --projectdir \"./dir1/,./dir2/\"\n\nThis example fails because the set of files included in --target is larger than that contained in --projectdir:\n\t$ sfdx scanner:run --target \"./**/*.cls\" --projectdir \"./myproject/\"\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      },
      "category": {
        "name": "category",
        "type": "option",
        "char": "c",
        "description": "one or more categories of rules to run"
      },
      "format": {
        "name": "format",
        "type": "option",
        "char": "f",
        "description": "specify results output format",
        "helpValue": "(csv|html|json|junit|sarif|table|xml)",
        "options": [
          "csv",
          "html",
          "json",
          "junit",
          "sarif",
          "table",
          "xml"
        ]
      },
      "outfile": {
        "name": "outfile",
        "type": "option",
        "char": "o",
        "description": "write output to a file"
      },
      "severity-threshold": {
        "name": "severity-threshold",
        "type": "option",
        "char": "s",
        "description": "throw an error when a violation threshold is reached, the --normalize-severity is invoked, and severity levels are reset to the baseline"
      },
      "normalize-severity": {
        "name": "normalize-severity",
        "type": "boolean",
        "description": "return normalized severity 1 (high), 2 (moderate), and 3 (low), and the engine-specific severity",
        "allowNo": false
      },
      "projectdir": {
        "name": "projectdir",
        "type": "option",
        "char": "p",
        "description": "provide root directory of project"
      },
      "ruleset": {
        "name": "ruleset",
        "type": "option",
        "char": "r",
        "description": "[deprecated] rulesets to run"
      },
      "engine": {
        "name": "engine",
        "type": "option",
        "char": "e",
        "description": "specify which engines to run"
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "source code location",
        "required": true
      },
      "tsconfig": {
        "name": "tsconfig",
        "type": "option",
        "description": "location of tsconfig.json file"
      },
      "eslintconfig": {
        "name": "eslintconfig",
        "type": "option",
        "description": "specify the location of eslintrc config to customize eslint engine"
      },
      "pmdconfig": {
        "name": "pmdconfig",
        "type": "option",
        "description": "specify location of PMD rule reference XML file to customize rule selection"
      },
      "env": {
        "name": "env",
        "type": "option",
        "description": "[deprecated] override ESLint's default environment variables, in JSON-formatted string"
      },
      "verbose-violations": {
        "name": "verbose-violations",
        "type": "boolean",
        "description": "return retire-js violation message details",
        "allowNo": false
      }
    },
    "args": [
      {
        "name": "file"
      }
    ],
    "pluginAlias": "@salesforce/sfdx-scanner",
    "longDescription": "Scans a codebase with a selection of rules. You can scan the codebase with all the rules in the registry, or use parameters to filter the rules based on rulename, category, or ruleset. You can specify the format of the output, such as XML or JUnit. You can print the output to the console (default) or to a file using the --outfile parameter.",
    "flagsConfig": {
      "verbose": {
        "type": "builtin"
      },
      "category": {
        "kind": "array",
        "char": "c",
        "description": "one or more categories of rules to run",
        "longDescription": "One or more categories of rules to run. Specify multiple values as a comma-separated list.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "format": {
        "kind": "enum",
        "helpValue": "(csv|html|json|junit|sarif|table|xml)",
        "char": "f",
        "description": "specify results output format",
        "longDescription": "Specifies results output format written directly to the console.",
        "options": [
          "csv",
          "html",
          "json",
          "junit",
          "sarif",
          "table",
          "xml"
        ],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "outfile": {
        "kind": "string",
        "char": "o",
        "description": "write output to a file",
        "longDescription": "Writes output to a file.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "severity-threshold": {
        "kind": "integer",
        "char": "s",
        "description": "throw an error when a violation threshold is reached, the --normalize-severity is invoked, and severity levels are reset to the baseline",
        "longDescription": "Throws an error when violations are found with equal or greater severity than the provided value. Values are 1 (high), 2 (moderate), and 3 (low). Exit code is the most severe violation. Using this flag also invokes the --normalize-severity flag.",
        "exclusive": [
          "json"
        ],
        "min": 1,
        "max": 3,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "normalize-severity": {
        "kind": "boolean",
        "description": "return normalized severity 1 (high), 2 (moderate), and 3 (low), and the engine-specific severity",
        "longDescription": "Returns normalized severity 1 (high), 2 (moderate), and 3 (low), and the engine-specific severity. For the html option, the normalized severity is displayed instead of the engine severity.",
        "allowNo": false,
        "type": "boolean"
      },
      "projectdir": {
        "kind": "array",
        "char": "p",
        "description": "provide root directory of project",
        "longDescription": "Provides the relative or absolute root project directory used to set the context for Graph Engine's analysis. Project directory must be a path, not a glob. Specify multiple values as a comma-separated list.",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.2",
    "strict": true,
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "scanner:run:dfa",
    "description": "scan codebase with all DFA rules",
    "usage": "scanner:run:dfa -t <array> [-c <array>] [-f csv|html|json|junit|sarif|table|xml] [-o <string>] [-s <integer> | --json] [--normalize-severity] [-p <array>] [--with-pilot] [--rule-thread-count <integer>] [--rule-thread-timeout <integer>] [--rule-disable-warning-violation] [--sfgejvmargs <string>] [--pathexplimit <integer>] [--verbose] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/sfdx-scanner",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "The paths specified for --projectdir must contain all files specified through --target cumulatively.\n\t$ sfdx scanner:run:dfa --target \"./myproject/main/default/classes/*.cls\" --projectdir \"./myproject/\"\n\t$ sfdx scanner:run:dfa --target \"./**/*.cls\" --projectdir \"./\"\n\t$ sfdx scanner:run:dfa --target \"./dir1/file1.cls,./dir2/file2.cls\" --projectdir \"./dir1/,./dir2/\"\nThis example fails because the set of files included in --target is larger than that contained in --projectdir:\n\t$ sfdx scanner:run:dfa --target \"./**/*.cls\" --projectdir \"./myproject/\"\nGlobs must be wrapped in quotes, as in these Windows and Unix examples, which evaluate rules against all .cls files in the current directory and subdirectories except for IgnoreMe.cls:\nUnix example:\n\t$ sfdx scanner:run:dfa --target \"./**/*.cls,!./**/IgnoreMe.cls\" ...\nWindows example:\n\t$ sfdx scanner:run:dfa --target \".\\**\\*.cls,!.\\**\\IgnoreMe.cls\" ...\nYou can target individual methods within a file with a suffix hash (#) on the file's path, and with a semi-colon-delimited list of method names. This syntax is incompatible with globs and directories. This example evaluates rules against all methods named Method1 or Method2 in File1.cls, and all methods named Method3 in File2.cls:\n\t$ sfdx scanner:run:dfa --target \"./File1.cls#Method1;Method2,./File2.cls#Method3\" ...\nUse --normalize-severity to output a normalized severity across all engines, in addition to the engine-specific severity. Normalized severity is 1 (high), 2 (moderate), and 3 (low):\n\t$ sfdx scanner:run:dfa --target \"./some-project/\" --projectdir \"./some-project/\" --format csv --normalize-severity\nUse --severity-threshold to throw a non-zero exit code when rule violations of a specific normalized severity or greater are found. If there are any rule violations with a severity of 2 or 1, the exit code is equal to the severity of the most severe violation:\n\t$ sfdx scanner:run:dfa --target \"./some-project/\" --projectdir \"./some-project/\" --severity-threshold 2\nuse --rule-thread-count to allow more (or fewer) entrypoints to be evaluated concurrently:\n\t$ sfdx scanner:run:dfa --rule-thread-count 6 ...\nUse --rule-thread-timeout to increase or decrease the maximum runtime for a single entrypoint evaluation. This increases the timeout from the 15-minute default to 150 minutes:\n\t$ sfdx scanner:run:dfa --rule-thread-timeout 9000000 ...\nUse --sfgejvmargs to pass Java Virtual Machine args to override system defaults while executing Salesforce Graph Engine's rules.\nThe example overrides the system's default heap space allocation to 8 GB and decreases chances of encountering OutOfMemory error.\n\t$ sfdx scanner:run:dfa --sfgejvmargs \"-Xmx8g\" ...\nUse --with-pilot to allow execution of pilot rules:\nThis example allows pilot rules in the \"Performance\" category to execute.\n\t$ sfdx scanner:run:dfa --category 'Performance' --with-pilot ...\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      },
      "category": {
        "name": "category",
        "type": "option",
        "char": "c",
        "description": "one or more categories of rules to run"
      },
      "format": {
        "name": "format",
        "type": "option",
        "char": "f",
        "description": "specify results output format",
        "helpValue": "(csv|html|json|junit|sarif|table|xml)",
        "options": [
          "csv",
          "html",
          "json",
          "junit",
          "sarif",
          "table",
          "xml"
        ]
      },
      "outfile": {
        "name": "outfile",
        "type": "option",
        "char": "o",
        "description": "write output to a file"
      },
      "severity-threshold": {
        "name": "severity-threshold",
        "type": "option",
        "char": "s",
        "description": "throw an error when a violation threshold is reached, the --normalize-severity is invoked, and severity levels are reset to the baseline"
      },
      "normalize-severity": {
        "name": "normalize-severity",
        "type": "boolean",
        "description": "return normalized severity 1 (high), 2 (moderate), and 3 (low), and the engine-specific severity",
        "allowNo": false
      },
      "projectdir": {
        "name": "projectdir",
        "type": "option",
        "char": "p",
        "description": "provide root directory of project"
      },
      "with-pilot": {
        "name": "with-pilot",
        "type": "boolean",
        "description": "allow pilot rules to execute",
        "allowNo": false
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "return location of source code",
        "required": true
      },
      "rule-thread-count": {
        "name": "rule-thread-count",
        "type": "option",
        "description": "specify number of threads that evaluate DFA rules. Alternatively, set value using environment variable `SFGE_RULE_THREAD_COUNT`. Default is 4"
      },
      "rule-thread-timeout": {
        "name": "rule-thread-timeout",
        "type": "option",
        "description": "specify timeout for individual rule threads in milliseconds. Alternatively, set the timeout value using environment variable `SFGE_RULE_THREAD_TIMEOUT`. Default: 90000 ms"
      },
      "rule-disable-warning-violation": {
        "name": "rule-disable-warning-violation",
        "type": "boolean",
        "description": "disable warning violations from Salesforce Graph Engine. Alternatively, set value using environment variable `SFGE_RULE_DISABLE_WARNING_VIOLATION`",
        "allowNo": false
      },
      "sfgejvmargs": {
        "name": "sfgejvmargs",
        "type": "option",
        "description": "specify Java Virtual Machine (JVM) arguments to optimize Salesforce Graph Engine execution to your system (optional)"
      },
      "pathexplimit": {
        "name": "pathexplimit",
        "type": "option",
        "description": "specify a path expansion  upper boundary to limit the complexity of code that Graph Engine analyzes. Alternatively, set the value using environment variable `SFGE_PATH_EXPANSION_LIMIT`"
      }
    },
    "args": [
      {
        "name": "file"
      }
    ],
    "pluginAlias": "@salesforce/sfdx-scanner",
    "longDescription": "Scans codebase with all DFA rules by default.\n\tSpecify the format of output and print results directly or as contents of a file that you provide with --outfile flag.",
    "flagsConfig": {
      "verbose": {
        "type": "builtin"
      },
      "category": {
        "kind": "array",
        "char": "c",
        "description": "one or more categories of rules to run",
        "longDescription": "One or more categories of rules to run. Specify multiple values as a comma-separated list.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "format": {
        "kind": "enum",
        "helpValue": "(csv|html|json|junit|sarif|table|xml)",
        "char": "f",
        "description": "specify results output format",
        "longDescription": "Specifies results output format written directly to the console.",
        "options": [
          "csv",
          "html",
          "json",
          "junit",
          "sarif",
          "table",
          "xml"
        ],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "outfile": {
        "kind": "string",
        "char": "o",
        "description": "write output to a file",
        "longDescription": "Writes output to a file.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "severity-threshold": {
        "kind": "integer",
        "char": "s",
        "description": "throw an error when a violation threshold is reached, the --normalize-severity is invoked, and severity levels are reset to the baseline",
        "longDescription": "Throws an error when violations are found with equal or greater severity than the provided value. Values are 1 (high), 2 (moderate), and 3 (low). Exit code is the most severe violation. Using this flag also invokes the --normalize-severity flag.",
        "exclusive": [
          "json"
        ],
        "min": 1,
        "max": 3,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "normalize-severity": {
        "kind": "boolean",
        "description": "return normalized severity 1 (high), 2 (moderate), and 3 (low), and the engine-specific severity",
        "longDescription": "Returns normalized severity 1 (high), 2 (moderate), and 3 (low), and the engine-specific severity. For the html option, the normalized severity is displayed instead of the engine severity.",
        "allowNo": false,
        "type": "boolean"
      },
      "projectdir": {
        "kind": "array",
        "char": "p",
        "description": "provide root directory of project",
        "longDescription": "Provides the relative or absolute root project directory used to set the context for Graph Engine's analysis. Project directory must be a path, not a glob. Specify multiple values as a comma-separated list.",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.2",
    "strict": true,
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "schema generate field",
    "summary": "Generate metadata source files for a new custom field on a specified object.",
    "description": "This command is interactive and must be run in a Salesforce DX project directory. You're required to specify the field's label with the \"--label\" flag. The command uses this label to provide intelligent suggestions for other field properties, such as its API name.\n\nYou can generate a custom field on either a standard object, such as Account, or a custom object. In both cases, the source files for the object must already exist in your local project before you run this command. If you create a relationship field, the source files for the parent object must also exist in your local directory.  Use the command \"sf metadata retrieve -m CustomObject:<object>\" to retrieve source files for both standard and custom objects from your org.  To create a custom object, run the \"sf generate metadata sobject\" command or use the Object Manager UI in your Salesforce org.",
    "strict": true,
    "pluginName": "@salesforce/plugin-sobject",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "state": "beta",
    "aliases": [
      "generate:metadata:field"
    ],
    "examples": [
      "Create a field with the specified label; the command prompts you for the object:\n<%= config.bin %> <%= command.id %> --label \"My Field\"",
      "Specify the local path to the object's folder:\n<%= config.bin %> <%= command.id %> --label \"My Field\" --object force-app/main/default/objects/MyObject__c"
    ],
    "deprecateAliases": true,
    "flags": {
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "The field's label.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "summary": "The directory that contains the object's source files.",
        "description": "The object source files in your local project are grouped in a directoy with the same name as the object. Custom object names always end in \"__c\". An example of the object directory for the Account standard object is \"force-app/main/default/objects/Account\" An example custom object directory is \"force-app/main/default/objects/MyObject__c\"\n\nIf you don't specify this flag, the command prompts you to choose from your local objects.",
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true
  },
  {
    "id": "schema generate platformevent",
    "summary": "Generate metadata source files for a new platform event.",
    "description": "This command is interactive and must be run in a Salesforce DX project directory. You're required to specify the event's label with the \"--label\" flag. The command uses this label to provide intelligent suggestions for other event properties, such as its API name.",
    "strict": true,
    "pluginName": "@salesforce/plugin-sobject",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "state": "beta",
    "aliases": [
      "generate:metadata:platformevent"
    ],
    "examples": [
      "Create a platform event with the specified label:\n<%= config.bin %> <%= command.id %> --label \"My Platform Event\""
    ],
    "deprecateAliases": true,
    "flags": {
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "The platform event's label.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true
  },
  {
    "id": "schema generate sobject",
    "summary": "Generate metadata source files for a new custom object.",
    "description": "This command is interactive and must be run in a Salesforce DX project directory. You're required to specify the object's label with the \"--label\" flag. The command uses this label to provide intelligent suggestions for other object properties, such as its API name and plural label.\n\nAll Salesforce objects are required to have a Name field, so this command also prompts you for the label and type of the Name field. Run the \"sf metadata generate field\" command to create additional fields for the object.\n\nTo reduce the number of prompts, use the \"--use-default-features\" flag to automatically enable some features, such as reporting and search on the object.",
    "strict": true,
    "pluginName": "@salesforce/plugin-sobject",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "state": "beta",
    "aliases": [
      "generate:metadata:sobject"
    ],
    "examples": [
      "Create a custom object with the specified label and be prompted for additional information:\n<%= config.bin %> <%= command.id %> --label \"My Object\"",
      "Create a custom object and enable optional features without prompting:\n<%= config.bin %> <%= command.id %> --label \"My Object\" --use-default-features"
    ],
    "deprecateAliases": true,
    "flags": {
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "The custom object's label.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "use-default-features": {
        "name": "use-default-features",
        "type": "boolean",
        "char": "f",
        "summary": "Enable all optional features without prompting.",
        "description": "Enables these features:\n\n* Search: Allows users to find the custom object's records when they search, including SOSL.\n* Feeds: Enables feed tracking.\n* Reports: Allows reporting of the data in the custom object records.\n* History: Enables object history tracking.\n* Activities: Allows users to associate tasks and scheduled calendar events related to the custom object records.\n* Bulk API: With Sharing and Streaming API, classifies the custom object as an Enterprise Application object.\n* Sharing: With Bulk API and Streaming API, classifies the custom object as an Enterprise Application object.\n* Streaming API: With Bulk API and Sharing, classifies the custom object as an Enterprise Application object.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true
  },
  {
    "id": "schema generate tab",
    "summary": "Generate the metadata source files for a new custom tab on a custom object.",
    "description": "Custom tabs let you display custom object data or other web content in Salesforce. Custom tabs appear in Salesforce as an item in the app’s navigation bar and in the App Launcher.\n\nThis command must be run in a Salesforce DX project directory. You must pass all required information to it with the required flags. The source files for the custom object for which you're generating a tab don't need to exist in your local project.",
    "strict": true,
    "pluginName": "@salesforce/plugin-sobject",
    "pluginAlias": "sfdx-cli",
    "pluginType": "jit",
    "state": "beta",
    "aliases": [
      "generate:metadata:tab"
    ],
    "examples": [
      "Create a tab on the MyObject__c custom object:\n<%= config.bin %> <%= command.id %> --object MyObject__c --icon 54 --directory force-app/main/default/tabs"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "summary": "API name of the custom object you're generating a tab for.",
        "description": "The API name for a custom object always ends in \"__c\", such as \"MyObject__c\".",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "directory": {
        "name": "directory",
        "type": "option",
        "char": "d",
        "summary": "Path to a \"tabs\" directory that will contain the source files for your new tab.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "icon": {
        "name": "icon",
        "type": "option",
        "char": "i",
        "summary": "Number from 1 to 100 that specifies the color scheme and icon for the custom tab.",
        "description": "See https://lightningdesignsystem.com/icons/\\#custom for the available icons.",
        "required": true,
        "multiple": false,
        "default": 1,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true
  },
  {
    "id": "search",
    "summary": "Search for a command.",
    "description": "Once you select a command, hit enter and it will show the help for that command.",
    "strict": true,
    "pluginName": "@oclif/plugin-search",
    "pluginAlias": "@oclif/plugin-search",
    "pluginType": "core",
    "aliases": [],
    "flags": {},
    "args": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false,
    "_enableJsonFlag": false
  },
  {
    "id": "update",
    "description": "update the <%= config.bin %> CLI",
    "strict": true,
    "pluginName": "@oclif/plugin-update",
    "pluginAlias": "@oclif/plugin-update",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      {
        "description": "Update to the stable channel:",
        "command": "<%= config.bin %> <%= command.id %> stable"
      },
      {
        "description": "Update to a specific version:",
        "command": "<%= config.bin %> <%= command.id %> --version 1.0.0"
      },
      {
        "description": "Interactively select version:",
        "command": "<%= config.bin %> <%= command.id %> --interactive"
      },
      {
        "description": "See available versions:",
        "command": "<%= config.bin %> <%= command.id %> --available"
      }
    ],
    "flags": {
      "autoupdate": {
        "name": "autoupdate",
        "type": "boolean",
        "hidden": true,
        "allowNo": false
      },
      "available": {
        "name": "available",
        "type": "boolean",
        "char": "a",
        "description": "Install a specific version.",
        "allowNo": false
      },
      "version": {
        "name": "version",
        "type": "option",
        "char": "v",
        "description": "Install a specific version.",
        "multiple": false,
        "exclusive": [
          "interactive"
        ]
      },
      "interactive": {
        "name": "interactive",
        "type": "boolean",
        "char": "i",
        "description": "Interactively select version to install. This is ignored if a channel is provided.",
        "allowNo": false,
        "exclusive": [
          "version"
        ]
      },
      "force": {
        "name": "force",
        "type": "boolean",
        "description": "Force a re-download of the requested version.",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "autoupdate": {
        "hidden": true,
        "allowNo": false,
        "type": "boolean"
      },
      "available": {
        "char": "a",
        "description": "Install a specific version.",
        "allowNo": false,
        "type": "boolean"
      },
      "version": {
        "char": "v",
        "description": "Install a specific version.",
        "exclusive": [
          "interactive"
        ],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "interactive": {
        "char": "i",
        "description": "Interactively select version to install. This is ignored if a channel is provided.",
        "exclusive": [
          "version"
        ],
        "allowNo": false,
        "type": "boolean"
      },
      "force": {
        "description": "Force a re-download of the requested version.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false,
    "_enableJsonFlag": false
  },
  {
    "id": "version",
    "strict": true,
    "pluginName": "@oclif/plugin-version",
    "pluginAlias": "@oclif/plugin-version",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Show additional information about the CLI.",
        "description": "Additionally shows the architecture, node version, operating system, and versions of plugins that the CLI is using.",
        "allowNo": false
      }
    },
    "args": {},
    "_enableJsonFlag": false,
    "_baseFlags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "_flags": {
      "verbose": {
        "summary": "Show additional information about the CLI.",
        "description": "Additionally shows the architecture, node version, operating system, and versions of plugins that the CLI is using.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false
  },
  {
    "id": "which",
    "description": "Show which plugin a command is in.",
    "strict": true,
    "pluginName": "@oclif/plugin-which",
    "pluginAlias": "@oclif/plugin-which",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      {
        "description": "See which plugin the `help` command is in:",
        "command": "<%= config.bin %> <%= command.id %> help"
      }
    ],
    "flags": {},
    "args": {},
    "_base": "@oclif/core@2.8.5",
    "hasDynamicHelp": false,
    "_--": false,
    "_enableJsonFlag": false
  }
]



scan a codebase with a selection of rules

USAGE
  $ sfdx scanner run -t <array> [-c <array>] [-f
    csv|html|json|junit|sarif|table|xml] [-o <string>] [-s <integer> | --json]
    [--normalize-severity] [-p <array>] [-r <array>] [-e <array>] [--tsconfig
    <string>] [--eslintconfig <string>] [--pmdconfig <string>] [--env <string>]
    [--verbose-violations] [--verbose] [--loglevel
    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]

FLAGS
  -c, --category=<value>
      one or more categories of rules to run

  -e, --engine=<value>
      specify which engines to run

  -f, --format=(csv|html|json|junit|sarif|table|xml)
      specify results output format

  -o, --outfile=<value>
      write output to a file

  -p, --projectdir=<value>
      provide root directory of project

  -r, --ruleset=<value>
      [deprecated] rulesets to run

  -s, --severity-threshold=<value>
      throw an error when a violation threshold is reached, the
      --normalize-severity is invoked, and severity levels are reset to the
      baseline

  -t, --target=<value>
      (required) source code location

  --env=<value>
      [deprecated] override ESLint's default environment variables, in
      JSON-formatted string

  --eslintconfig=<value>
      specify the location of eslintrc config to customize eslint engine

  --json
      format output as json

  --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA
  L)
      [default: warn] logging level for this command invocation

  --normalize-severity
      return normalized severity 1 (high), 2 (moderate), and 3 (low), and the
      engine-specific severity

  --pmdconfig=<value>
      specify location of PMD rule reference XML file to customize rule selection

  --tsconfig=<value>
      location of tsconfig.json file

  --verbose
      emit additional command output to stdout

  --verbose-violations
      return retire-js violation message details

DESCRIPTION
  scan a codebase with a selection of rules

EXAMPLES
  This example evaluates all rules against somefile.js.
  Invoking code analyzer without specifying any rules causes all rules to be run.
  	$ sfdx scanner:run --format xml --target "somefile.js"
  This example evaluates all rules in the Design and Best Practices categories.
  When you specify multiple categories or rulesets, the results are combined with a logical OR.
  	$ sfdx scanner:run --format xml --target "somefile.js" --
  This example evaluates all rules except those in the Design or Best Practices categories.
  Exclude categories by specifying the negation operator and enclosing the values in single quotes.
  	$ sfdx scanner:run --format xml --target "somefile.js" --category '!Design,!Best Practices'
  Wrap globs in quotes. These examples evaluate rules against all .js files in the current directory, except for IgnoreMe.js.
  Unix example:
  	$ sfdx scanner:run --target './**/*.js,!./**/IgnoreMe.js' ...
  Windows example:
  	$ sfdx scanner:run --target ".\**\*.js,!.\**\IgnoreMe.js" ...
  This example scans the project contained in '/my-project' if the current working directory is another directory.
  Specify tsconfig.json if the current working directory does not contain the tsconfig.json that corresponds to the TypeScript files being scanned.
  	$ sfdx scanner:run --target "/my-project/**/*.ts" --tsconfig "/my-project/tsconfig.json"
  This example evaluates rules against somefile.js, including Jasmine in the environment variables.
  Uses --env to override the default ESLint environment variables to add frameworks.
  	$ sfdx scanner:run --target "somefile.js" --env '{"jasmine": true}'
  This example evaluates rules aginst somefile.js using eslint-lwc and pmd engines.
  Use --engine to include or exclude engines. Any engine listed will be run, regardless of its current 'disabled' attribute.
  	$ sfdx scanner:run --target "somefile.js" --engine "eslint-lwc,pmd"
  This example executes CPD engine against known file extensions in "/some/dir". CPD helps detect blocks of code duplication in selected languages.
  Use --engine to invoke engines that are not enabled by default.
  	$ sfdx scanner:run --target "/some/dir" --engine cpd
  This example executes rules defined in pmd_rule_ref.xml against the files in 'src'.
  To use PMD with your own rule reference file, use --pmdconfig. Note that rule filters are not applied.
  	$ sfdx scanner:run --target "src" --pmdconfig "pmd_rule_ref.xml"
  This example uses a custom config to scan the files in 'src'.
  To use ESLint with your own .eslintrc.json file, use --eslintconfig. Make sure that the directory you run the command from has all the NPM dependencies installed.
  	$ sfdx scanner:run --target "src" --eslintconfig "/home/my/setup/.eslintrc.json"
  This example uses --normalize-severity to output normalized severity and engine-specific severity across all engines. Normalized severity is: 1 (high), 2 (moderate), and 3 (low).
  	$ sfdx scanner:run --target "/some-project/" --format csv --normalize-severity
  This example uses --severity-threshold to throw a non-zero exit code when rule violations of normalized severity 2 or greater are found. If any violations with the specified severity (or greater) are found, the exit code equals the severity of the most severe violation.
  	$ sfdx scanner:run --target "/some-project/" --severity-threshold 2
  The paths specified for --projectdir must contain all files specified through --target cumulatively.
  	$ sfdx scanner:run --target "./myproject/main/default/classes/*.cls" --projectdir "./myproject/"
  	$ sfdx scanner:run --target "./**/*.cls" --projectdir "./"
  	$ sfdx scanner:run --target "./dir1/file1.cls,./dir2/file2.cls" --projectdir "./dir1/,./dir2/"
  This example fails because the set of files included in --target is larger than that contained in --projectdir:
  	$ sfdx scanner:run --target "./**/*.cls" --projectdir "./myproject/"

COMMANDS
  scanner run dfa  scan codebase with all DFA rules




Generate a Salesforce DX project.

USAGE
  $ sfdx project generate -n <value> [--json] [-t standard|empty|analytics]
    [-d <value>] [-s <value>] [-p <value>] [-x]

FLAGS
  -d, --output-dir=<value>           [default: .] Directory for saving the
                                     created files.
  -n, --name=<value>                 (required) Name of the generated project.
  -p, --default-package-dir=<value>  [default: force-app] Default package
                                     directory name.
  -s, --namespace=<value>            Namespace associated with this project and
                                     any connected scratch orgs.
  -t, --template=<option>            [default: standard] Template to use for
                                     project creation.
                                     <options: standard|empty|analytics>
  -x, --manifest                     Generate a manifest (package.xml) for
                                     change-set based development.

GLOBAL FLAGS
  --json  Format output as json.

DESCRIPTION
  Generate a Salesforce DX project.

  A Salesforce DX project has a specific structure and a configuration file
  (sfdx-project.json) that identifies the directory as a Salesforce DX project.
  This command generates the necessary configuration files and directories to
  get you started.

  By default, the generated sfdx-project.json file sets the sourceApiVersion
  property to the default API version currently used by Salesforce CLI. To
  specify a different version, set the apiVersion configuration variable. For
  example: "sf config set apiVersion=57.0 --global".

ALIASES
  $ sfdx force project create

EXAMPLES
  Generate a project called "mywork":

    $ sfdx project generate --name mywork

  Similar to previous example, but generate the files in a directory called
  "myapp":

    $ sfdx project generate --name mywork --default-package-dir myapp

  Similar to prevoius example, but also generate a default package.xml
  manifest file:

    $ sfdx project generate --name mywork --default-package-dir myapp \
      --manifest

  Generate a project with the minimum files and directories:

    $ sfdx project generate --name mywork --template empty

FLAG DESCRIPTIONS
  -d, --output-dir=<value>  Directory for saving the created files.

    The location can be an absolute path or relative to the current working
    directory. The default is the current directory.

  -n, --name=<value>  Name of the generated project.

    Generates a project directory with this name; any valid directory name is
    accepted. Also sets the "name" property in the sfdx-project.json file to
    this name.

  -p, --default-package-dir=<value>  Default package directory name.

    Metadata items such as classes and Lightning bundles are placed inside this
    folder.

  -t, --template=standard|empty|analytics  Template to use for project creation.

    The template determines the sample configuration files and directories that
    this command generates. For example, the empty template provides these files
    and directory to get you started.

    - .forceignore
    - config/project-scratch-def.json
    - sfdx-project.json
    - package.json
    - force-app (basic source directory structure)

    The standard template provides a complete force-app directory structure so
    you know where to put your source. It also provides additional files and
    scripts, especially useful when using Salesforce Extensions for VS Code. For
    example:

    - .gitignore: Use Git for version control.
    - .prettierrc and .prettierignore: Use Prettier to format your Aura
    components.
    - .vscode/extensions.json: When launched, Visual Studio Code, prompts you to
    install the recommended extensions for your project.
    - .vscode/launch.json: Configures Replay Debugger.
    - .vscode/settings.json: Additional configuration settings.

    The analytics template provides similar files and the
    force-app/main/default/waveTemplates directory.

  -x, --manifest

    Generate a manifest (package.xml) for change-set based development.

    Generates a default manifest (package.xml) for fetching Apex, Visualforce,
    Lightning components, and static resources.

COMMANDS
  project generate manifest  Create a project manifest that lists the metadata
                             components you want to deploy or retrieve


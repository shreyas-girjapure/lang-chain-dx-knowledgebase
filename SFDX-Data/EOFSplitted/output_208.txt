

We plan to deprecate this command in the future. Try using the "project retrieve start" command instead.
Retrieve source from an org.

USAGE
  $ sfdx force source retrieve -o <value> [--json] [--api-version <value>] [-r
    <value> | -n <value> | -p <value>] [-a <value>] [-w <value>] [-x <value> |
    -m <value> | ] [-f -t] [--verbose]

FLAGS
  -a, --apiversion=<value>
  -f, --forceoverwrite             Ignore conflict warnings and overwrite
                                   changes to the project.
  -m, --metadata=<value>...        Comma-separated list of names of metadata
                                   components to retrieve from the org.
  -n, --packagenames=<value>...    Comma-separated list of packages to retrieve.
  -o, --target-org=<value>         (required) Username or alias of the target
                                   org.
  -p, --sourcepath=<value>...      Comma-separated list of file paths for source
                                   to retrieve from the org.
  -r, --retrievetargetdir=<value>  Root of the directory structure into which
                                   the source files are retrieved.
  -t, --tracksource                If the retrieve succeeds, update source
                                   tracking information; doesn't delete local
                                   files that were deleted in the org.
  -w, --wait=<value>               [default: 33 minutes] Number of minutes to
                                   wait for the command to complete and display
                                   results to the terminal window.
  -x, --manifest=<value>           Complete path for the manifest (package.xml)
                                   file that specifies the components to
                                   retrieve.
  --api-version=<value>            Override the api version used for api
                                   requests made by this command
  --verbose                        Verbose output of retrieve result.

GLOBAL FLAGS
  --json  Format output as json.

DESCRIPTION
  Retrieve source from an org.

  Use this command to retrieve source (metadata that’s in source format) from an
  org. To take advantage of change tracking with scratch orgs, use "force source
  pull". To retrieve metadata that’s in metadata format, use "force mdapi
  retrieve".

  The source you retrieve overwrites the corresponding source files in your
  local project. This command does not attempt to merge the source from your org
  with your local source files.

  If the comma-separated list you’re supplying contains spaces, enclose the
  entire comma-separated list in one set of double quotes. On Windows, if the
  list contains commas, also enclose it in one set of double quotes.

EXAMPLES
  Retrieve the source files in a directory from your default org:

    $ sfdx force source retrieve --sourcepath path/to/source

  Retrieve a specific Apex class and the objects whose source is in a
  directory from an org with alias "myscratch":

    $ sfdx force source retrieve --sourcepath \
      "path/to/apex/classes/MyClass.cls,path/to/source/objects" --target-org \
      myscratch

  Retrieve source files in a comma-separated list that contains spaces:

    $ sfdx force source retrieve --sourcepath \
      "path/to/objects/MyCustomObject/fields/MyField.field-meta.xml, \
      path/to/apex/classes"

  Retrieve all Apex classes:

    $ sfdx force source retrieve --metadata ApexClass

  Retrieve a specific Apex class:

    $ sfdx force source retrieve --metadata ApexClass:MyApexClass

  Retrieve a specific Apex class and update source tracking files:

    $ sfdx force source retrieve --metadata ApexClass:MyApexClass \
      --tracksource

  Retrieve all custom objects and Apex classes:

    $ sfdx force source retrieve --metadata "CustomObject,ApexClass"

  Retrieve all Apex classes and two specific profiles (one of which has a
  space in its name):

    $ sfdx force source retrieve --metadata "ApexClass, Profile:My Profile, \
      Profile: AnotherProfile"

  Retrieve all metadata components listed in a manifest:

    $ sfdx force source retrieve --manifest path/to/package.xml

  Retrieve metadata from a package or multiple packages:

    $ sfdx force source retrieve --packagenames MyPackageName
    $ sfdx force source retrieve --packagenames "Package1, PackageName With \
      Spaces, Package3"

  Retrieve all metadata from a package and specific components that aren’t in
  the package, specify both -n | --packagenames and one other scoping
  parameter:

    $ sfdx force source retrieve --packagenames MyPackageName --sourcepath \
      path/to/apex/classes
    $ sfdx force source retrieve --packagenames MyPackageName --metadata \
      ApexClass:MyApexClass
    $ sfdx force source retrieve --packagenames MyPackageName --manifest \
      path/to/package.xml

  Retrieve source files to a given directory instead of the default package
  directory specified in sfdx-project.json:

    $ sfdx force source retrieve --metadata "StandardValueSet:TaskStatus" \
      --retrievetargetdir path/to/unpackaged

FLAG DESCRIPTIONS
  -m, --metadata=<value>...

    Comma-separated list of names of metadata components to retrieve from the
    org.

    If you specify this parameter, don’t specify --manifest or --sourcepath.

  -p, --sourcepath=<value>...

    Comma-separated list of file paths for source to retrieve from the org.

    The supplied paths can be to a single file (in which case the operation is
    applied to only one file) or to a folder (in which case the operation is
    applied to all source files in the directory and its sub-directories).

    If you specify this parameter, don’t specify --manifest or --metadata.

  -r, --retrievetargetdir=<value>

    Root of the directory structure into which the source files are retrieved.

    If the target directory matches one of the package directories in your
    sfdx-project.json file, the command fails.

    Running the command multiple times with the same target adds new files and
    overwrites existing files.

  -w, --wait=<value>

    Number of minutes to wait for the command to complete and display results to
    the terminal window.

    If the command continues to run after the wait period, the CLI returns
    control of the terminal window to you.

  -x, --manifest=<value>

    Complete path for the manifest (package.xml) file that specifies the
    components to retrieve.

    If you specify this parameter, don’t specify --metadata or --sourcepath


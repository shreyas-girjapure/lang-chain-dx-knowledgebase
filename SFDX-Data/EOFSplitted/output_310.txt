

Deploy metadata to an org from your local project.

USAGE
  $ sfdx project deploy start -o <value> [--json] [-a <value>] [--async | -w
    <value>] [--concise | --verbose] [--dry-run] [-c] [-r] [-g]
    [--single-package ] [-t <value>] [-l
    NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg]
    [--purge-on-delete [-x <value> | -d <value> | -m <value> | --metadata-dir
    <value>]] [--pre-destructive-changes <value> ] [--post-destructive-changes
    <value> ] [--junit --coverage-formatters clover|cobertura|html-spa|html|json
    |json-summary|lcovonly|none|teamcity|text|text-summary] [--results-dir
    <value> ]

FLAGS
  -a, --api-version=<value>           Target API version for the deploy.
  -c, --ignore-conflicts              Ignore conflicts and deploy local files,
                                      even if they overwrite changes in the org.
  -d, --source-dir=<value>...         Path to the local source files to deploy.
  -g, --ignore-warnings               Ignore warnings and allow a deployment to
                                      complete successfully.
  -l, --test-level=<option>           Deployment Apex testing level.
                                      <options: NoTestRun|RunSpecifiedTests|RunL
                                      ocalTests|RunAllTestsInOrg>
  -m, --metadata=<value>...           Metadata component names to deploy.
  -o, --target-org=<value>            (required) Login username or alias for the
                                      target org.
  -r, --ignore-errors                 Ignore any errors and don’t roll back
                                      deployment.
  -t, --tests=<value>...              Apex tests to run when --test-level is
                                      RunSpecifiedTests.
  -w, --wait=<minutes>                [default: 33 minutes] Number of minutes to
                                      wait for command to complete and display
                                      results.
  -x, --manifest=<value>              Full file path for manifest (package.xml)
                                      of components to deploy.
  --async                             Run the command asynchronously.
  --concise                           Show concise output of the deploy result.
  --coverage-formatters=<option>...   Format of the code coverage results.
                                      <options: clover|cobertura|html-spa|html|j
                                      son|json-summary|lcovonly|none|teamcity|te
                                      xt|text-summary>
  --dry-run                           Validate deploy and run Apex tests but
                                      don’t save to the org.
  --junit                             Output JUnit test results.
  --metadata-dir=<value>              Root of directory or zip file of metadata
                                      formatted files to deploy.
  --post-destructive-changes=<value>  File path for a manifest
                                      (destructiveChangesPost.xml) of components
                                      to delete after the deploy.
  --pre-destructive-changes=<value>   File path for a manifest
                                      (destructiveChangesPre.xml) of components
                                      to delete before the deploy
  --purge-on-delete                   Specify that deleted components in the
                                      destructive changes manifest file are
                                      immediately eligible for deletion rather
                                      than being stored in the Recycle Bin.
  --results-dir=<value>               Output directory for code coverage and
                                      JUnit results; defaults to the deploy ID.
  --single-package                    Indicates that the metadata zip file
                                      points to a directory structure for a
                                      single package.
  --verbose                           Show verbose output of the deploy result.

GLOBAL FLAGS
  --json  Format output as json.

DESCRIPTION
  Deploy metadata to an org from your local project.

  You must run this command from within a project.

  Metadata components are deployed in source format by default. Deploy them in
  metadata format by specifying the --metadata-dir flag, which specifies the
  root directory or ZIP file that contains the metadata formatted files you want
  to deploy.

  If your org allows source tracking, then this command tracks the changes in
  your source. Some orgs, such as production org, never allow source tracking.
  Source tracking is enabled by default on scratch and sandbox orgs; you can
  disable source tracking when you create the orgs by specifying the
  --no-track-source flag on the "sfdx org create scratch|sandbox" commands.

  To deploy multiple metadata components, either set multiple --metadata <name>
  flags or a single --metadata flag with multiple names separated by spaces.
  Enclose names that contain spaces in one set of double quotes. The same syntax
  applies to --manifest and --source-dir.

ALIASES
  $ sfdx deploy metadata

EXAMPLES
  Deploy local changes not in the org; uses your default org:

    $ sfdx project deploy start

  Deploy the source files in a directory to an org with alias "my-scratch":

    $ sfdx project deploy start  --source-dir path/to/source --target-org \
      my-scratch

  Deploy a specific Apex class and the objects whose source is in a directory
  (both examples are equivalent):

    $ sfdx project deploy start --source-dir \
      path/to/apex/classes/MyClass.cls path/to/source/objects
    $ sfdx project deploy start --source-dir \
      path/to/apex/classes/MyClass.cls --source-dir path/to/source/objects

  Deploy all Apex classes:

    $ sfdx project deploy start --metadata ApexClass

  Deploy a specific Apex class:

    $ sfdx project deploy start --metadata ApexClass:MyApexClass

  Deploy all custom objects and Apex classes (both examples are equivalent):

    $ sfdx project deploy start --metadata CustomObject ApexClass
    $ sfdx project deploy start --metadata CustomObject --metadata ApexClass

  Deploy all Apex classes and a profile that has a space in its name:

    $ sfdx project deploy start --metadata ApexClass --metadata "Profile:My \
      Profile"

  Deploy all components listed in a manifest:

    $ sfdx project deploy start --manifest path/to/package.xml

  Run the tests that aren’t in any managed packages as part of a deployment:

    $ sfdx project deploy start --metadata ApexClass --test-level \
      RunLocalTests

FLAG DESCRIPTIONS
  -a, --api-version=<value>  Target API version for the deploy.

    Use this flag to override the default API version with the API version of
    your package.xml file. The default API version is the latest version
    supported by the CLI.

  -c, --ignore-conflicts

    Ignore conflicts and deploy local files, even if they overwrite changes in
    the org.

    This flag applies only to orgs that allow source tracking. It has no effect
    on orgs that don't allow it, such as production orgs.

  -d, --source-dir=<value>...  Path to the local source files to deploy.

    The supplied path can be to a single file (in which case the operation is
    applied to only one file) or to a folder (in which case the operation is
    applied to all metadata types in the directory and its subdirectories).

    If you specify this flag, don’t specify --metadata or --manifest.

  -g, --ignore-warnings

    Ignore warnings and allow a deployment to complete successfully.

    If a warning occurs and this flag is set to true, the success status of the
    deployment is set to true. When this flag is set to false, success is set to
    false, and the warning is treated like an error.

  -l, --test-level=NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg

    Deployment Apex testing level.

    Valid values are:

    - NoTestRun — No tests are run. This test level applies only to deployments
    to development environments, such as sandbox, Developer Edition, or trial
    orgs. This test level is the default for development environments.

    - RunSpecifiedTests — Runs only the tests that you specify with the
    --run-tests flag. Code coverage requirements differ from the default
    coverage requirements when using this test level. Executed tests must
    comprise a minimum of 75% code coverage for each class and trigger in the
    deployment package. This coverage is computed for each class and trigger
    individually and is different than the overall coverage percentage.

    - RunLocalTests — All tests in your org are run, except the ones that
    originate from installed managed and unlocked packages. This test level is
    the default for production deployments that include Apex classes or
    triggers.

    - RunAllTestsInOrg — All tests in your org are run, including tests of
    managed packages.

    If you don’t specify a test level, the default behavior depends on the
    contents of your deployment package and target org. For more information,
    see [Running Tests in a Deployment](https://developer.salesforce.com/docs/at
    las.en-us.api_meta.meta/api_meta/meta_deploy_running_tests.htm) in the
    "Metadata API Developer Guide".

  -o, --target-org=<value>  Login username or alias for the target org.

    Overrides your default org.

  -r, --ignore-errors  Ignore any errors and don’t roll back deployment.

    When deploying to a production org, keep this flag set to false (default
    value). When set to true, components without errors are deployed and
    components with errors are skipped, and could result in an inconsistent
    production org.

  -t, --tests=<value>...

    Apex tests to run when --test-level is RunSpecifiedTests.

    If a test name contains a space, enclose it in double quotes.
    For multiple test names, use one of the following formats:

    - Repeat the flag for multiple test names: --tests Test1 --tests Test2
    --tests "Test With Space"
    - Separate the test names with spaces: --tests Test1 Test2 "Test With Space"

  -w, --wait=<minutes>

    Number of minutes to wait for command to complete and display results.

    If the command continues to run after the wait period, the CLI returns
    control of the terminal window to you and returns the job ID. To resume the
    deployment, run "sfdx project deploy resume". To check the status of the
    deployment, run "sfdx project deploy report".

  -x, --manifest=<value>

    Full file path for manifest (package.xml) of components to deploy.

    All child components are included. If you specify this flag, don’t specify
    --metadata or --source-dir.

  --async  Run the command asynchronously.

    The command immediately returns the job ID and control of the terminal to
    you. This way, you can continue to use the CLI. To resume the deployment,
    run "sfdx project deploy resume". To check the status of the deployment, run
    "sfdx project deploy report".

  --coverage-formatters=clover|cobertura|html-spa|html|json|json-summary|lcovonly|none|teamcity|text|text-summary...

    Format of the code coverage results.

    For multiple formatters, repeat the flag for each formatter.
    --coverage-formatters lcov --coverage-formatters clover

CONFIGURATION VARIABLES
  target-org       Username or alias of the org that all commands run against by
                   default. (sf only)
  org-api-version  API version of your project. Default: API version of your Dev
                   Hub org.

ENVIRONMENT VARIABLES
  SF_TARGET_ORG        Username or alias of your default org. Overrides the
                       target-org configuration variable.
  SF_USE_PROGRESS_BAR  Set to false to disable the progress bar when running the
                       metadata deploy command.

ERROR CODES
  Succeeded (0)          The deploy succeeded.
  Canceled (1)           The deploy was canceled.
  Failed (1)             The deploy failed.
  SucceededPartial (68)  The deploy partially succeeded.
  InProgress (69)        The deploy is in progress.
  Pending (69)           The deploy is pending.
  Canceling (69)         The deploy is being canceled


[[["f7ac0378-31fd-4925-aef3-1982aecfc8b1",{"pageContent":"\nList all aliases currently set on your local computer.\n\nUSAGE\n  $ sfdx alias list [--json]\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List all aliases currently set on your local computer.\n\n  Aliases are global, which means that you can use all the listed aliases in any\n  Salesforce DX project on your computer.\n\nALIASES\n  $ sfdx force alias list\n\nEXAMPLES\n  List all the aliases you've set:\n\n    $ sfdx alias list\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_1.txt"}}],["d10af63f-31f8-4a45-9a1e-2145bf2d42dd",{"pageContent":"\n\nExecute anonymous Apex code entered on the command line or from a local file.\n\nUSAGE\n  $ sfdx apex run -o <value> [--json] [--api-version <value>] [-f\n    <value>]\n\nFLAGS\n  -f, --file=<value>        Path to a local file that contains Apex code.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Execute anonymous Apex code entered on the command line or from a local file.\n\n  If you don’t run this command from within a Salesforce DX project, you must\n  specify the —-target-org flag.\n\n  To execute your code interactively, run this command with no flags. At the\n  prompt, enter all your Apex code; press CTRL-D when you're finished. Your code\n  is then executed in a single execute anonymous request.\n  For more information, see \"Anonymous Blocks\" in the Apex Developer Guide.\n\nALIASES\n  $ sfdx force apex execute\n\nEXAMPLES\n  Execute the Apex code that's in the ~/test.apex file in the org with the\n  specified username:\n\n    $ sfdx apex run --target-org testusername@salesforce.org --file \\\n      ~/test.apex\n\n  Similar to previous example, but execute the code in your default org:\n\n    $ sfdx apex run --file ~/test.apex\n\n  Run the command with no flags to start interactive mode; the code will\n  execute in your default org when you exit. At the prompt, start type Apex\n  code and press the Enter key after each line. Press CTRL+D when finished.\n\n    $ sfdx apex run\n\nCOMMANDS\n  apex run test  Invoke Apex tests in an org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_10.txt"}}],["66fb2617-0a01-4eaf-93f2-7be7dd085533",{"pageContent":"\n\nGenerate new custom metadata type records from a CSV file.\n\nUSAGE\n  $ sfdx force cmdt record insert -f <value> -t <value> [--json] [-i <value>] [-d\n    <value>] [-n <value>]\n\nFLAGS\n  -d, --output-directory=<value>  [default:\n                                  force-app/main/default/customMetadata]\n                                  Directory to store newly-created custom\n                                  metadata record files.\n  -f, --csv=<value>               (required) Pathname of the CSV file.\n  -i, --input-directory=<value>   [default: force-app/main/default/objects]\n                                  Directory from which to get the custom\n                                  metadata type definition from.\n  -n, --name-column=<value>       [default: Name] Column used to determine the\n                                  name of the record.\n  -t, --type-name=<value>         (required) API name of the custom metadata\n                                  type to create a record for.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate new custom metadata type records from a CSV file.\n\n  The custom metadata type must already exist in your project. By default, the\n  Name column is used to determine the record name; use the --name-column flag\n  to specify a different column.\n\nALIASES\n  $ sfdx force cmdt record insert\n  $ sfdx cmdt record insert\n\nEXAMPLES\n  Generate record metadata files from values in a CSV file for the custom\n  metadata type MyCmdt. Use 'Name' as the column that specifies the record\n  name:\n\n    $ sfdx force cmdt record insert --csv path/to/my.csv --type-name MyCmdt\n\n  Generate record metadata files from a CSV file in the directory different\n  from the default, and use 'PrimaryKey' as the column that specifies the\n  record name:\n\n    $ sfdx force cmdt record insert --csv path/to/my.csv --type-name MyCmdt \\\n      --input-directory path/to/my/cmdt/directory --name-column \"PrimaryKey\"\n\nFLAG DESCRIPTIONS\n  -t, --type-name=<value>\n\n    API name of the custom metadata type to create a record for.\n\n    The '__mdt' suffix is appended to the end of the name if it's omitted\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_100.txt"}}],["fa44e9be-5413-452d-9962-bd2a29a170f1",{"pageContent":"\n\nCreate an Experience Cloud site using a template.\n\nUSAGE\n  $ sfdx community create -n <value> -t <value> -o <value> [--json] [-p\n    <value>] [-d <value>] [--api-version <value>]\n\nFLAGS\n  -d, --description=<value>      Description of the site.\n  -n, --name=<value>             (required) Name of the site to create.\n  -o, --target-org=<value>       (required) Username or alias of the target org.\n  -p, --url-path-prefix=<value>  URL to append to the domain created when\n                                 Digital Experiences was enabled for this org.\n  -t, --template-name=<value>    (required) Template to use to create a site.\n  --api-version=<value>          Override the api version used for api requests\n                                 made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create an Experience Cloud site using a template.\n\n  See 'Which Experience Cloud Template Should I Use?' (https://help.salesforce.c\n  om/s/articleView?id=sf.siteforce_commtemp_intro.htm&type=5) in Salesforce Help\n  for more information about the different template\n  types available for Experience Cloud.\n\n  When creating a site with the Build Your Own (LWR) template, you must also\n  specify the AuthenticationType value using the format\n  templateParams.AuthenticationType=value, where value is AUTHENTICATED,\n  UNAUTHENTICATED, or AUTHENTICATED_WITH_PUBLIC_ACCESS. Name and values are\n  case-sensitive. See 'ExperienceBundle' in the Metadata API Developer Guide for\n  more information. (https://developer.salesforce.com/docs/atlas.en-us.api_meta.\n  meta/api_meta/meta_experiencebundle.htm)\n\n  When you execute this command, it creates the site in preview status, which\n  means that it isn't yet live. After you finish building your site, you can\n  make it live.\n\n  If you have an Experience Builder site, publish the site using the \"community\n  publish\" command to make it live.\n\n  If you have a Salesforce Tabs + Visualforce site, activate the site to make it\n  live by updating the status field of the Network type in the Metadata API.\n  Alternatively, in Experience Workspaces, go to Administration | Settings, and\n  click Activate.\n\n  For Experience Builder sites, activating the site just sends out a welcome\n  email to site members.\n\nALIASES\n  $ sfdx force community create\n\nEXAMPLES\n  Create an Experience Cloud site using template 'Customer Service' and URL\n  path prefix 'customers':\n\n    $ sfdx community create --name 'My Customer Site' --template-name \\\n      'Customer Service' --url-path-prefix customers --description 'My \\\n      customer site'\n\n  Create a site using 'Partner Central' template:\n\n    $ sfdx community create --name partnercentral --template-name 'Partner \\\n      Central' --url-path-prefix partners\n\n  Create a site using the 'Build Your Own (LWR)' template with authentication\n  type of UNAUTHENTICATED:\n\n    $ sfdx community create --name lwrsite --template-name 'Build Your Own \\\n      (LWR)' --url-path-prefix lwrsite \\\n      templateParams.AuthenticationType=UNAUTHENTICATED\n\nFLAG DESCRIPTIONS\n  -d, --description=<value>  Description of the site.\n\n    The description displays in Digital Experiences - All Sites in Setup and\n    helps with site identification.\n\n  -p, --url-path-prefix=<value>\n\n    URL to append to the domain created when Digital Experiences was enabled for\n    this org.\n\n    For example, if your domain name is https://MyDomainName.my.site.com and you\n    create a customer site, enter 'customers' to create the unique URL\n    https://MyDomainName.my.site.com/customers.\n\n  -t, --template-name=<value>  Template to use to create a site.\n\n    An example of a template is Customer Service. Run the \"community template\n    list\" command to see which templates are available in your org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_101.txt"}}],["c15b2e6c-96ad-4050-b9a4-f7e246f9310c",{"pageContent":"\n\nPublish an Experience Builder site to make it live.\n\nUSAGE\n  $ sfdx community publish -n <value> -o <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -n, --name=<value>        (required) Name of the Experience Builder site to\n                            publish.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Publish an Experience Builder site to make it live.\n\n  Each time you publish it, you update the live site with the most recent\n  updates. When you publish an Experience Builder site for the first time, you\n  make the site's URL live and enable login access for site members.\n\n  Additionally, to send a welcome email to all site members, you must activate\n  the site. (Activation is also required to successfully set up SEO for\n  Experience Builder sites.) To activate a site, update the status field of the\n  Network type in the Metadata API. Alternatively, in Experience Workspaces, go\n  to Administration | Settings, and click Activate.\n\n  Subsequently, each time you publish the site, you update the live site with\n  all changes made to the site since it was last published.\n\n  An email notification informs you when your changes are live.\n\nALIASES\n  $ sfdx force community publish\n\nEXAMPLES\n  Publish the Experience Builder site with name \"My Customer Site':\n\n    $ sfdx community publish --name 'My Customer Site'\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_102.txt"}}],["01917ce5-5faf-4dfd-afcc-7a7cd7087023",{"pageContent":"\n\nRetrieve the list of templates available in your org.\n\nUSAGE\n  $ sfdx community list template -o <value> [--json] [--api-version <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Retrieve the list of templates available in your org.\n\n  See 'Which Experience Cloud Template Should I Use?' (https://help.salesforce.c\n  om/s/articleView?id=sf.siteforce_commtemp_intro.htm&type=5) in Salesforce Help\n  for more information about the different template types available for\n  Experience Cloud.\n\nALIASES\n  $ sfdx force community template list\n\nEXAMPLES\n  Retrieve the template list from an org with alias my-scratch-org:\n\n    $ sfdx community list template --target-org my-scratch-org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_103.txt"}}],["9f35f2b3-7f06-46b8-9891-fcc34ac98e22",{"pageContent":"\n\nGet the value of a configuration variable.\n\nUSAGE\n  $ sfdx force config get [--json] [--verbose]\n\nFLAGS\n  --verbose  Display whether the configuration variables are set locally or\n             globally.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Get the value of a configuration variable.\n\n  Run \"sf config list\" to see all the configuration variables you've set. Global\n  configuration variable are always displayed; local ones are displayed if you\n  run the command in a project directory. Run \"sf config set\" to set a\n  configuration variable.\n\nALIASES\n  $ sfdx force config get\n\nEXAMPLES\n  Get the value of the \"target-org\" configuration variable.\n\n    $ sfdx force config get target-org\n\n  Get multiple configuration variables and display whether they're set locally\n  or globally:\n\n    $ sfdx force config get target-org api-version --verbose\n\nCONFIGURATION VARIABLES\n  org-instance-url               URL of the Salesforce instance hosting your\n                                 org. Default: https://login.salesforce.com.\n  org-api-version                API version of your project. Default: API\n                                 version of your Dev Hub org.\n  target-dev-hub                 Username or alias of your default Dev Hub org.\n                                 (sf only)\n  target-org                     Username or alias of the org that all commands\n                                 run against by default. (sf only)\n  org-isv-debugger-sid           ISV debugger SID.\n  org-isv-debugger-url           ISV debugger URL.\n  org-custom-metadata-templates  A valid repository URL or directory for the\n                                 custom org metadata templates.\n  org-max-query-limit            Maximum number of Salesforce records returned\n                                 by a CLI command. Default: 10,000\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_104.txt"}}],["6e1f2c25-150f-4809-adc2-3eadc416f5dd",{"pageContent":"\n\nList the configuration variables that you've previously set.\n\nUSAGE\n  $ sfdx force config list [--json]\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List the configuration variables that you've previously set.\n\n  Global configuration variables apply to any Salesforce DX project and are\n  always displayed. If you run this command from a project directory, local\n  configuration variables are also displayed.\n\nALIASES\n  $ sfdx force config list\n\nEXAMPLES\n  List both global configuration variables and those local to your project:\n\n    $ sfdx force config list\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_105.txt"}}],["f1874c4a-09e4-4830-8fa5-06eab2432342",{"pageContent":"\n\nSet one or more configuration variables, such as your default org.\n\nUSAGE\n  $ sfdx force config set [--json] [-g]\n\nFLAGS\n  -g, --global  Set the configuration variables globally, so they can be used\n                from any Salesforce DX project.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Set one or more configuration variables, such as your default org.\n\n  Use configuration variables to set CLI defaults, such as your default org or\n  the API version you want the CLI to use. For example, if you set the\n  \"target-org\" configuration variable, you don't need to specify it as a \"sf\n  deploy metadata\" flag if you're deploying to your default org.\n\n  Local configuration variables apply only to your current project. Global\n  variables, specified with the --global flag, apply in any Salesforce DX\n  project.\n\n  The resolution order if you've set a flag value in multiple ways is as\n  follows:\n\n  1. Flag value specified at the command line.\n  2. Local (project-level) configuration variable.\n  3. Global configuration variable.\n\n  Run \"sf config list\" to see the configuration variables you've already set and\n  their level (local or global).\n\nALIASES\n  $ sfdx force config set\n\nEXAMPLES\n  Set the local target-org configuration variable to an org username:\n\n    $ sfdx force config set target-org=me@my.org\n\n  Set the local target-org configuration variable to an alias:\n\n    $ sfdx force config set target-org=my-scratch-org\n\n  Set the global target-org configuration variable:\n\n    $ sfdx force config set --global target-org=my-scratch-org\n\n  Set a single configuration variable without using an equal sign; this syntax\n  doesn't work when setting multiple configuration variables:\n\n    $ sfdx force config set target-org me@my.com\n\nCONFIGURATION VARIABLES\n  org-instance-url               URL of the Salesforce instance hosting your\n                                 org. Default: https://login.salesforce.com.\n  org-api-version                API version of your project. Default: API\n                                 version of your Dev Hub org.\n  target-dev-hub                 Username or alias of your default Dev Hub org.\n                                 (sf only)\n  target-org                     Username or alias of the org that all commands\n                                 run against by default. (sf only)\n  org-isv-debugger-sid           ISV debugger SID.\n  org-isv-debugger-url           ISV debugger URL.\n  org-custom-metadata-templates  A valid repository URL or directory for the\n                                 custom org metadata templates.\n  org-max-query-limit            Maximum number of Salesforce records returned\n                                 by a CLI command. Default: 10,000\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_106.txt"}}],["f9495cc2-d232-464a-bc81-00ecdcde164f",{"pageContent":"\n\nUnset local or global configuration variables.\n\nUSAGE\n  $ sfdx force config unset [--json] [-g]\n\nFLAGS\n  -g, --global  Unset the configuration variables globally, so they can no\n                longer be used from any Salesforce DX project.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Unset local or global configuration variables.\n\n  Local configuration variables apply only to your current project. Global\n  configuration variables apply in any Salesforce DX project.\n\nALIASES\n  $ sfdx force config unset\n\nEXAMPLES\n  Unset the local \"target-org\" configuration variable:\n\n    $ sfdx force config unset target-org\n\n  Unset multiple configuration variables globally:\n\n    $ sfdx force config unset target-org api-version --global\n\nCONFIGURATION VARIABLES\n  org-instance-url               URL of the Salesforce instance hosting your\n                                 org. Default: https://login.salesforce.com.\n  org-api-version                API version of your project. Default: API\n                                 version of your Dev Hub org.\n  target-dev-hub                 Username or alias of your default Dev Hub org.\n                                 (sf only)\n  target-org                     Username or alias of the org that all commands\n                                 run against by default. (sf only)\n  org-isv-debugger-sid           ISV debugger SID.\n  org-isv-debugger-url           ISV debugger URL.\n  org-custom-metadata-templates  A valid repository URL or directory for the\n                                 custom org metadata templates.\n  org-max-query-limit            Maximum number of Salesforce records returned\n                                 by a CLI command. Default: 10,000\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_107.txt"}}],["11c44e91-7995-4462-8597-200ae8437172",{"pageContent":"\n\nBulk delete records from an org using a CSV file. Uses Bulk API 1.0.\n\nUSAGE\n  $ sfdx force data bulk delete -o <value> -f <value> -s <value> [--json]\n    [--api-version <value>] [-w <value>]\n\nFLAGS\n  -f, --file=<value>        (required) CSV file that contains the IDs of the\n                            records to delete.\n  -o, --target-org=<value>  (required) Org alias or username to use for the\n                            target org.\n  -s, --sobject=<value>     (required) API name of the Salesforce object, either\n                            standard or custom, that you want to delete records\n                            from.\n  -w, --wait=<value>        [default: 0 minutes] Number of minutes to wait for\n                            the command to complete before displaying the\n                            results.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Bulk delete records from an org using a CSV file. Uses Bulk API 1.0.\n\n  The CSV file must have only one column (\"Id\") and then the list of record IDs\n  you want to delete, one ID per line.\n\n  When you execute this command, it starts a job and one or more batches,\n  displays their IDs, and then immediately returns control of the terminal to\n  you by default. If you prefer to wait, set the --wait flag to the number of\n  minutes; if it times out, the command outputs the IDs. Use the job and batch\n  IDs to check the status of the job with the \"sfdx force data bulk status\"\n  command. A single job can contain many batches, depending on the length of the\n  CSV file.\n\nEXAMPLES\n  Bulk delete Account records from your default org using the list of IDs in\n  the \"files/delete.csv\" file:\n\n    $ sfdx force data bulk delete --sobject Account --file files/delete.csv\n\n  Bulk delete records from a custom object in an org with alias my-scratch and\n  wait 5 minutes for the command to complete:\n\n    $ sfdx force data bulk delete --sobject MyObject__c --file \\\n      files/delete.csv --wait 5 --target-org my-scratch\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_108.txt"}}],["26acd95e-9855-43c7-9350-beaade87b711",{"pageContent":"\n\nView the status of a bulk data load job or batch. Uses Bulk API 1.0.\n\nUSAGE\n  $ sfdx force data bulk status -o <value> -i <value> [--json] [--api-version\n    <value>] [-b <value>]\n\nFLAGS\n  -b, --batch-id=<value>    ID of the batch whose status you want to view; you\n                            must also specify the job ID.\n  -i, --job-id=<value>      (required) ID of the job whose status you want to\n                            view.\n  -o, --target-org=<value>  (required) Org alias or username to use for the\n                            target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  View the status of a bulk data load job or batch. Uses Bulk API 1.0.\n\n  Run this command using the job ID or batch ID returned from the \"sfdx force\n  data bulk delete\" or \"sfdx force data bulk upsert\" commands.\n\nEXAMPLES\n  View the status of a bulk load job in your default org:\n\n    $ sfdx force data bulk status --job-id 750xx000000005sAAA\n\n  View the status of a bulk load job and a specific batches in an org with\n  alias my-scratch:\n\n    $ sfdx force data bulk status --job-id 750xx000000005sAAA --batch-id \\\n      751xx000000005nAAA --target-org my-scratch\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_109.txt"}}],["39e02d3d-1c18-4654-b66f-8981a77e709e",{"pageContent":"\n\nInvoke Apex tests in an org.\n\nUSAGE\n  $ sfdx apex run test -o <value> [--json] [--api-version <value>] [-d\n    <value>] [-l RunLocalTests|RunAllTestsInOrg|RunSpecifiedTests] [-n <value>]\n    [-r human|tap|junit|json] [-s <value>] [-t <value>] [-w <value>] [-y] [-v\n    -c]\n\nFLAGS\n  -c, --code-coverage           Retrieve code coverage results.\n  -d, --output-dir=<value>      Directory in which to store test run files.\n  -l, --test-level=<option>     Level of tests to run; default is RunLocalTests.\n                                <options: RunLocalTests|RunAllTestsInOrg|RunSpec\n                                ifiedTests>\n  -n, --class-names=<value>     Comma-separated list of Apex test class names to\n                                run; default is all classes.\n  -o, --target-org=<value>      (required) Username or alias of the target org.\n  -r, --result-format=<option>  [default: human] Format of the test results.\n                                <options: human|tap|junit|json>\n  -s, --suite-names=<value>     Comma-separated list of Apex test suite names to\n                                run; default is all suites.\n  -t, --tests=<value>           Comma-separated list of Apex test class names or\n                                IDs and, if applicable, test methods to run;\n                                default is all tests.\n  -v, --detailed-coverage       Display detailed code coverage per test.\n  -w, --wait=<value>            Sets the streaming client socket timeout in\n                                minutes; specify a longer wait time if timeouts\n                                occur frequently.\n  -y, --synchronous             Runs test methods from a single Apex class\n                                synchronously; if not specified, tests are run\n                                asynchronously.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Invoke Apex tests in an org.\n\n  Specify which tests to run by using the --class-names, --suite-names, or\n  --tests flags. Alternatively, use the --test-level flag to run all the tests\n  in your org, local tests, or specified tests.\n\n  To see code coverage results, use the --code-coverage flag with\n  --result-format. The output displays a high-level summary of the test run and\n  the code coverage values for classes in your org. If you specify\n  human-readable result format, use the --detailed-coverage flag to see detailed\n  coverage results for each test method run.\n\n  Apex tests run asynchronously by default. The command waits for 1 minute\n  (default), or for the value of the --wait flag; if the tests have finished,\n  the command displays the results. If the tests haven't finished by the end of\n  the wait time, the command displays a test run ID; use the \"sfdx apex get test\n  --test-run-id\" command to get the results.\n\n  NOTE: The testRunCoverage value (JSON and JUnit result formats) is a\n  percentage of the covered lines and total lines from all the Apex classes\n  evaluated by the tests in this run.\n\nALIASES\n  $ sfdx force apex test run\n\nEXAMPLES\n  Run all Apex tests and suites in your default org:\n\n    $ sfdx apex run test\n\n  Run the specified Apex test classes in your default org and display results\n  in human-readable form:\n\n    $ sfdx apex run test --class-names \"MyClassTest,MyOtherClassTest\" \\\n      --result-format human\n\n  Run the specified Apex test suites in your default org and include code\n  coverage results and additional details:\n\n    $ sfdx apex run test --suite-names \"MySuite,MyOtherSuite\" \\\n      --code-coverage --detailed-coverage\n\n  Run the specified Apex tests in your default org and display results in\n  human-readable output:\n\n    $ sfdx apex run test --tests \"MyClassTest.testCoolFeature,MyClassTest.te \\\n      stAwesomeFeature,AnotherClassTest,namespace.TheirClassTest.testThis\" \\\n      --result-format human\n\n  Run all tests in the org with the specified username with the specified test\n  level; save the output to the specified directory:\n\n    $ sfdx apex run test --test-level RunLocalTests --output-dir <path to \\\n      outputdir> --target-org me@my.org\n\nFLAG DESCRIPTIONS\n  -l, --test-level=RunLocalTests|RunAllTestsInOrg|RunSpecifiedTests\n\n    Level of tests to run; default is RunLocalTests.\n\n    Here's what the levels mean:\n\n    - RunSpecifiedTests — Only the tests that you specify are run.\n    - RunLocalTests — All tests in your org are run, except the ones that\n    originate from installed managed packages.\n    - RunAllTestsInOrg — All tests are in your org and in installed managed\n    packages are run\n\n  -n, --class-names=<value>\n\n    Comma-separated list of Apex test class names to run; default is all\n    classes.\n\n    If you select --class-names, you can't specify --suite-names or --tests.\n\n  -s, --suite-names=<value>\n\n    Comma-separated list of Apex test suite names to run; default is all suites.\n\n    If you select --suite-names, you can't specify --class-names or --tests.\n\n  -t, --tests=<value>\n\n    Comma-separated list of Apex test class names or IDs and, if applicable,\n    test methods to run; default is all tests.\n\n    If you specify --tests, you can't specify --class-names or --suite-names\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_11.txt"}}],["5b2b243e-4570-47d8-bb67-06d2a7acb5a2",{"pageContent":"\n\nBulk upsert records to an org from a CSV file. Uses Bulk API 1.0.\n\nUSAGE\n  $ sfdx force data bulk upsert -o <value> -i <value> -f <value> -s <value> [--json]\n    [--api-version <value>] [-w <value>] [-r]\n\nFLAGS\n  -f, --file=<value>         (required) CSV file that contains the records to\n                             upsert.\n  -i, --external-id=<value>  (required) Name of the external ID field, or the Id\n                             field.\n  -o, --target-org=<value>   (required) Org alias or username to use for the\n                             target org.\n  -r, --serial               Run batches in serial mode.\n  -s, --sobject=<value>      (required) API name of the Salesforce object,\n                             either standard or custom, that you want to upsert\n                             records to.\n  -w, --wait=<value>         [default: 0 minutes] Number of minutes to wait for\n                             the command to complete before displaying the\n                             results.\n  --api-version=<value>      Override the api version used for api requests made\n                             by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Bulk upsert records to an org from a CSV file. Uses Bulk API 1.0.\n\n  An upsert refers to inserting a record into a Salesforce object if the record\n  doesn't already exist, or updating it if it does exist.\n\n  When you execute this command, it starts a job and one or more batches,\n  displays their IDs, and then immediately returns control of the terminal to\n  you by default. If you prefer to wait, set the --wait flag to the number of\n  minutes; if it times out, the command outputs the IDs. Use the job and batch\n  IDs to check the status of the job with the \"sfdx force data bulk status\"\n  command. A single job can contain many batches, depending on the length of the\n  CSV file.\n\n  See \"Prepare CSV Files\" in the Bulk API Developer Guide for details on\n  formatting your CSV file. (https://developer.salesforce.com/docs/atlas.en-us.a\n  pi_asynch.meta/api_asynch/datafiles_csv_preparing.htm)\n\n  By default, the job runs the batches in parallel, which we recommend. You can\n  run jobs serially by specifying the --serial flag. But don't process data in\n  serial mode unless you know this would otherwise result in lock timeouts and\n  you can't reorganize your batches to avoid the locks.\n\nEXAMPLES\n  Bulk upsert records to the Contact object in your default org:\n\n    $ sfdx --sobject Contact --file files/contacts.csv --external-id Id\n\n  Bulk upsert records to a custom object in an org with alias my-scratch and\n  wait 5 minutes for the command to complete:\n\n    $ sfdx force data bulk upsert --sobject MyObject__c --file \\\n      files/file.csv --external-id MyField__c --wait 5 --target-org my-scratch\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_110.txt"}}],["85a35306-c29d-4da6-9f91-4e113892d663",{"pageContent":"\n\nCreate and insert a record into a Salesforce or Tooling API object.\n\nUSAGE\n  $ sfdx data create record -o <value> -s <value> -v <value> [--json]\n    [--api-version <value>] [-t]\n\nFLAGS\n  -o, --target-org=<value>  (required) Org alias or username to use for the\n                            target org.\n  -s, --sobject=<value>     (required) API name of the Salesforce or Tooling API\n                            object that you're inserting a record into.\n  -t, --use-tooling-api     Use Tooling API so you can insert a record in a\n                            Tooling API object.\n  -v, --values=<value>      (required) Values for the flags in the form\n                            <fieldName>=<value>, separate multiple pairs with\n                            spaces.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create and insert a record into a Salesforce or Tooling API object.\n\n  You must specify a value for all required fields of the object.\n\n  When specifying fields, use the format <fieldName>=<value>. Enclose all\n  field-value pairs in one set of double quotation marks, delimited by spaces.\n  Enclose values that contain spaces in single quotes.\n\n  This command inserts a record into Salesforce objects by default. Use the\n  --use-tooling-api flag to insert into a Tooling API object.\n\nALIASES\n  $ sfdx force data record create\n\nEXAMPLES\n  Insert a record into the Account object of your default org; only the\n  required Name field has a value:\n\n    $ sfdx data create record --sobject Account --values \"Name=Acme\"\n\n  Insert an Account record with values for two fields, one value contains a\n  space; the command uses the org with alias \"my-scratch\":\n\n    $ sfdx data create record --sobject Account --values \"Name='Universal \\\n      Containers' Website=www.example.com\" --target-org my-scratch\n\n  Insert a record into the Tooling API object TraceFlag:\n\n    $ sfdx data create record --use-tooling-api --sobject TraceFlag --values \\\n      \"DebugLevelId=7dl170000008U36AAE StartDate=2022-12-15T00:26:04.000+0000 \\\n      ExpirationDate=2022-12-15T00:56:04.000+0000 LogType=CLASS_TRACING \\\n      TracedEntityId=01p17000000R6bLAAS\"\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_111.txt"}}],["a4ee20e3-fc1a-4840-b5a3-1e0e6db5e634",{"pageContent":"\n\nDeletes a single record from a Salesforce or Tooling API object.\n\nUSAGE\n  $ sfdx data delete record -o <value> -s <value> [--json] [--api-version\n    <value>] [-i <value>] [-w <value>] [-t]\n\nFLAGS\n  -i, --record-id=<value>   ID of the record you’re deleting.\n  -o, --target-org=<value>  (required) Org alias or username to use for the\n                            target org.\n  -s, --sobject=<value>     (required) API name of the Salesforce or Tooling API\n                            object that you're deleting a record from.\n  -t, --use-tooling-api     Use Tooling API so you can delete a record from a\n                            Tooling API object.\n  -w, --where=<value>       List of <fieldName>=<value> pairs that identify the\n                            record you want to delete.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Deletes a single record from a Salesforce or Tooling API object.\n\n  Specify the record you want to delete with either its ID or with a list of\n  field-value pairs that identify the record. If your list of fields identifies\n  more than one record, the delete fails; the error displays how many records\n  were found.\n\n  When specifying field-value pairs, use the format <fieldName>=<value>. Enclose\n  all field-value pairs in one set of double quotation marks, delimited by\n  spaces. Enclose values that contain spaces in single quotes.\n\n  This command deletes a record from Salesforce objects by default. Use the\n  --use-tooling-api flag to delete from a Tooling API object.\n\nALIASES\n  $ sfdx force data record delete\n\nEXAMPLES\n  Delete a record from Account with the specified (truncated) ID:\n\n    $ sfdx data delete record --sobject Account --record-id 00180XX\n\n  Delete a record from Account whose name equals \"Acme\":\n\n    $ sfdx data delete record --sobject Account --where \"Name=Acme\"\n\n  Delete a record from Account identified with two field values, one that\n  contains a space; the command uses the org with alias \"my-scratch\":\n\n    $ sfdx data delete record --sobject Account --where \"Name='Universal \\\n      Containers' Phone='(123) 456-7890'\" --target-org myscratch\n\n  Delete a record from the Tooling API object TraceFlag with the specified\n  (truncated) ID:\n\n    $ sfdx data delete record --use-tooling-api --sobject TraceFlag \\\n      --record-id 7tf8c\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_112.txt"}}],["f7f0ff35-0495-415b-ac33-44eab8e70133",{"pageContent":"\n\nRetrieve and display a single record of a Salesforce or Tooling API object.\n\nUSAGE\n  $ sfdx data get record -o <value> -s <value> [--json] [--api-version\n    <value>] [-i <value>] [-w <value>] [-t]\n\nFLAGS\n  -i, --record-id=<value>   ID of the record you’re retrieving.\n  -o, --target-org=<value>  (required) Org alias or username to use for the\n                            target org.\n  -s, --sobject=<value>     (required) API name of the Salesforce or Tooling API\n                            object that you're retrieving a record from.\n  -t, --use-tooling-api     Use Tooling API so you can retrieve a record from a\n                            Tooling API object.\n  -w, --where=<value>       List of <fieldName>=<value> pairs that identify the\n                            record you want to display.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Retrieve and display a single record of a Salesforce or Tooling API object.\n\n  Specify the record you want to retrieve with either its ID or with a list of\n  field-value pairs that identify the record. If your list of fields identifies\n  more than one record, the command fails; the error displays how many records\n  were found.\n\n  When specifying field-value pairs, use the format <fieldName>=<value>. Enclose\n  all field-value pairs in one set of double quotation marks, delimited by\n  spaces. Enclose values that contain spaces in single quotes.\n\n  The command displays all the record's fields and their values, one field per\n  terminal line. Fields with no values are displayed as \"null\".\n\n  This command retrieves a record from Salesforce objects by default. Use the\n  --use-tooling-api flag to retrieve from a Tooling API object.\n\nALIASES\n  $ sfdx force data record get\n\nEXAMPLES\n  Retrieve and display a record from Account with the specified (truncated)\n  ID:\n\n    $ sfdx data get record --sobject Account --record-id 00180XX\n\n  Retrieve a record from Account whose name equals \"Acme\":\n\n    $ sfdx data get record --sobject Account --where \"Name=Acme\"\n\n  Retrieve a record from Account identified with two field values, one that\n  contains a space; the command uses the org with alias \"my-scratch\":\n\n    $ sfdx data get record --sobject Account --where \"Name='Universal \\\n      Containers' Phone='(123) 456-7890'\" --target-org myscratch\n\n  Retrieve a record from the Tooling API object TraceFlag with the specified\n  (truncated) ID:\n\n    $ sfdx data get record --use-tooling-api --sobject TraceFlag --record-id \\\n      7tf8c\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_113.txt"}}],["3139aff1-322f-4ff3-add5-c727bacbc679",{"pageContent":"\n\nUpdates a single record of a Salesforce or Tooling API object.\n\nUSAGE\n  $ sfdx data update record -o <value> -s <value> -v <value> [--json]\n    [--api-version <value>] [-i <value>] [-w <value>] [-t]\n\nFLAGS\n  -i, --record-id=<value>   ID of the record you’re updating.\n  -o, --target-org=<value>  (required) Org alias or username to use for the\n                            target org.\n  -s, --sobject=<value>     (required) API name of the Salesforce or Tooling API\n                            object that contains the record you're updating.\n  -t, --use-tooling-api     Use Tooling API so you can update a record in a\n                            Tooling API object.\n  -v, --values=<value>      (required) Fields that you're updating, in the\n                            format of <fieldName>=<value> pairs.\n  -w, --where=<value>       List of <fieldName>=<value> pairs that identify the\n                            record you want to update.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Updates a single record of a Salesforce or Tooling API object.\n\n  Specify the record you want to update with either its ID or with a list of\n  field-value pairs that identify the record. If your list of fields identifies\n  more than one record, the delete fails; the error displays how many records\n  were found.\n\n  When using field-value pairs for both identifying the record and specifiyng\n  the new field values, use the format <fieldName>=<value>. Enclose all\n  field-value pairs in one set of double quotation marks, delimited by spaces.\n  Enclose values that contain spaces in single quotes.\n\n  This command updates a record in Salesforce objects by default. Use the\n  --use-tooling-api flag to update a Tooling API object.\n\nALIASES\n  $ sfdx force data record update\n\nEXAMPLES\n  Update the Name field of an Account record with the specified (truncated)\n  ID:\n\n    $ sfdx data update record --sobject Account --record-id 001D0 --values \\\n      \"Name=NewAcme\"\n\n  Update the Name field of an Account record whose current name is 'Old Acme':\n\n    $ sfdx data update record --sobject Account --where \"Name='Old Acme'\" \\\n      --values \"Name='New Acme'\"\n\n  Update the Name and Website fields of an Account record with the specified\n  (truncated) ID:\n\n    $ sfdx data update record --sobject Account --record-id 001D0 --values \\\n      \"Name='Acme III' Website=www.example.com\"\n\n  Update the ExpirationDate field of a record of the Tooling API object\n  TraceFlag using the specified (truncated) ID:\n\n    $ sfdx data update record -t --sobject TraceFlag --record-id \\\n      7tf170000009cUBAAY --values \\\n      \"ExpirationDate=2017-12-01T00:58:04.000+0000\"\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_114.txt"}}],["5b404160-da50-4b1e-95c4-3686cad5dc1c",{"pageContent":"\n\nView the status of a bulk query.\n\nUSAGE\n  $ sfdx data query resume [--json] [-o <value>] [--api-version <value>] [-r\n    human|json|csv] [-r | -i <value>]\n\nFLAGS\n  -i, --bulk-query-id=<value>   Job ID of the bulk query.\n  -o, --target-org=<value>      Org alias or username to use for the target org.\n  -r, --result-format=<option>  [default: human] Format to display the results;\n                                the --json flag overrides this flag.\n                                <options: human|json|csv>\n  -r, --use-most-recent         Use the most recent bulk query ID from cache.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  View the status of a bulk query.\n\n  Run this command using the job ID returned from the \"sfdx data query --bulk\"\n  command.\n\nALIASES\n  $ sfdx force data soql bulk report\n\nEXAMPLES\n  View the status of a bulk query with the specified ID:\n\n    $ sfdx data query resume --bulk-query-id 7500x000005BdFzXXX\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_115.txt"}}],["6dd56e32-5cea-4392-a167-b1711369da58",{"pageContent":"\n\nExecute a SOQL query.\n\nUSAGE\n  $ sfdx data query -o <value> [--json] [--api-version <value>] [-q\n    <value>] [-f <value>] [-w <value> [-b | -t]] [--async ] [-r human|json|csv]\n\nFLAGS\n  -b, --bulk                    Use Bulk API 2.0 to run the query.\n  -f, --file=<value>            File that contains the SOQL query.\n  -o, --target-org=<value>      (required) Org alias or username to use for the\n                                target org.\n  -q, --query=<value>           SOQL query to execute.\n  -r, --result-format=<option>  [default: human] Format to display the results;\n                                the --json flag overrides this flag.\n                                <options: human|json|csv>\n  -t, --use-tooling-api         Use Tooling API so you can run queries on\n                                Tooling API objects.\n  -w, --wait=<value>            Time to wait for the command to finish, in\n                                minutes.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n  --async                       Use Bulk API 2.0, but don't wait for the job to\n                                complete.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Execute a SOQL query.\n\n  Specify the SOQL query at the command line with the --query flag or read the\n  query from a file with the --file flag.\n\n  If your query returns more than 10,000 records, specify the --bulk flag. The\n  command then runs the query using Bulk API 2.0, which has higher limits than\n  the default API used by the command.\n\n  When using --bulk, the command waits 3 minutes by default for the query to\n  complete. Use the --wait parameter to specify a different number of minutes to\n  wait, or set --wait to 0 to immediately return control to the terminal. If you\n  set --wait to 0, or you use the --async flag, or the command simply times out,\n  the command displays an ID. Pass this ID to the the \"data query resume\"\n  command using the --bulk-query-id flag to get the results; pass the ID to the\n  \"data resume\" command to get the job status.\n\nALIASES\n  $ sfdx force data soql query\n\nEXAMPLES\n  Specify a SOQL query at the command line; the command uses your default org:\n\n    $ sfdx data query --query \"SELECT Id, Name, Account.Name FROM Contact\"\n\n  Read the SOQL query from a file called \"query.txt\"; the command uses the org\n  with alias \"my-scratch\":\n\n    $ sfdx data query --file query.txt --target-org my-scratch\n\n  Use Tooling API to run a query on the ApexTrigger Tooling API object:\n\n    $ sfdx data query --query \"SELECT Name FROM ApexTrigger\" \\\n      --use-tooling-api\n\n  Use Bulk API 2.0 to run a query that returns many rows, and return control\n  to the terminal immediately:\n\n    $ sfdx data query --query \"SELECT Id FROM Contact\" --bulk --wait 0\n\nCOMMANDS\n  data query resume  View the status of a bulk query\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_116.txt"}}],["3b4ad1f3-dcb0-479e-a084-a97a8f49cbc5",{"pageContent":"\n\nExport data from an org into one or more JSON files.\n\nUSAGE\n  $ sfdx data export tree -o <value> -q <value> [--json] [--api-version\n    <value>] [-p] [-x <value>] [-d <value>]\n\nFLAGS\n  -d, --output-dir=<value>  Directory in which to generate the JSON files;\n                            default is current directory.\n  -o, --target-org=<value>  (required) Org alias or username to use for the\n                            target org.\n  -p, --plan                Generate multiple sObject tree files and a plan\n                            definition file for aggregated import.\n  -q, --query=<value>       (required) SOQL query, or filepath of a file that\n                            contains the query, to retrieve records.\n  -x, --prefix=<value>      Prefix of generated files.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Export data from an org into one or more JSON files.\n\n  Specify a SOQL query, either directly at the command line or read from a file,\n  to retrieve the data you want to export. The exported data is written to JSON\n  files in sObject tree format, which is a collection of nested, parent-child\n  records with a single root record. Use these JSON files to import data into an\n  org with the \"sfdx data import tree\" command.\n\n  If your SOQL query references multiple objects, the command generates a single\n  JSON file by default. You can specify the --plan flag to generate separate\n  JSON files for each object and a plan definition file that aggregates them.\n  You then specify just this plan definition file when you import the data into\n  an org.\n\n  The SOQL query can return a maximum of 2,000 records. For more information,\n  see the REST API Developer Guide. (https://developer.salesforce.com/docs/atlas\n  .en-us.api_rest.meta/api_rest/resources_composite_sobject_tree.htm).\n\nALIASES\n  $ sfdx force data tree export\n\nEXAMPLES\n  Export records retrieved with the specified SOQL query into a single JSON\n  file in the current directory; the command uses your default org:\n\n    $ sfdx data export tree --query \"SELECT Id, Name, (SELECT Name, \\\n      Address__c FROM Properties__r) FROM Broker__c\"\n\n  Export data using a SOQL query in the \"query.txt\" file and generate JSON\n  files for each object and a plan that aggregates them:\n\n    $ sfdx data export tree --query query.txt --plan\n\n  Prepend \"export-demo\" before each generated file and generate the files in\n  the \"export-out\" directory; run the command on the org with alias\n  \"my-scratch\":\n\n    $ sfdx data export tree --query query.txt --plan --prefix export-demo \\\n      --output-dir export-out --target-org my-scratch\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_117.txt"}}],["6f0b5b92-6d5d-487d-8b30-a6093065ff7b",{"pageContent":"\n\nImport data from one or more JSON files into an org.\n\nUSAGE\n  $ sfdx data import tree -o <value> [--json] [--api-version <value>] [-f\n    <value> | -p <value>] [--config-help]\n\nFLAGS\n  -f, --files=<value>...    Comma-separated and in-order JSON files that contain\n                            the records, in sObject tree format, that you want\n                            to insert.\n  -o, --target-org=<value>  (required) Org alias or username to use for the\n                            target org.\n  -p, --plan=<value>        Plan definition file to insert multiple data files.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n  --config-help             Display schema information for the --plan\n                            configuration file to stdout; if you specify this\n                            flag, all other flags except --json are ignored.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Import data from one or more JSON files into an org.\n\n  The JSON files that contain the data are in sObject tree format, which is a\n  collection of nested, parent-child records with a single root record. Use the\n  \"sfdx data export tree\" command to generate these JSON files.\n\n  If you used the --plan flag when exporting the data to generate a plan\n  definition file, use the --plan flag to reference the file when you import. If\n  you're not using a plan, use the --files flag to list the files. If you\n  specify multiple JSON files that depend on each other in a parent-child\n  relationship, be sure you list them in the correct order.\n\n  The sObject Tree API supports requests that contain up to 200 records. For\n  more information, see the REST API Developer Guide.\n  (https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/reso\n  urces_composite_sobject_tree.htm)\n\nALIASES\n  $ sfdx force data tree import\n\nEXAMPLES\n  Import the records contained in two JSON files into the org with alias\n  \"my-scratch\":\n\n    $ sfdx data import tree --files Contact.json,Account.json --target-org \\\n      my-scratch\n\n  Import records using a plan definition file into your default org:\n\n    $ sfdx data import tree --plan Account-Contact-plan.json\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_118.txt"}}],["5bb603a7-8193-43b5-92ab-e7a0a60f6b29",{"pageContent":"\n\nGenerate a Lightning App.\n\nUSAGE\n  $ sfdx force lightning app create -n <value> [--json] [-t DefaultLightningApp] [-d\n    <value>] [--api-version <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -n, --name=<value>        (required) Name of the generated Lightning App.\n  -t, --template=<option>   [default: DefaultLightningApp] Template to use for\n                            file creation.\n                            <options: DefaultLightningApp>\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a Lightning App.\n\n  Generates a Lightning App bundle in the specified directory or the current\n  working directory. The bundle consists of multiple files in a folder with the\n  designated name.\n\nALIASES\n  $ sfdx force lightning app create\n\nEXAMPLES\n  Generate the metadata files for a Lightning app bundle called \"myapp\" in the\n  current directory:\n\n    $ sfdx force lightning app create --name myapp\n\n  Similar to the previous example, but generate the files in the\n  \"force-app/main/default/aura\" directory:\n\n    $ sfdx force lightning app create --name myapp --output-dir \\\n      force-app/main/default/aura\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Lightning App.\n\n    The name can be up to 40 characters and must start with a letter.\n\n  -t, --template=DefaultLightningApp  Template to use for file creation.\n\n    Supplied parameter values or default values are filled into a copy of the\n    template\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_119.txt"}}],["8572142c-4e6e-46bb-870c-daa2be4ab44d",{"pageContent":"\n\nActivate debug logging and display logs in the terminal.\n\nUSAGE\n  $ sfdx apex tail log -o <value> [--json] [--api-version <value>] [-c] [-d\n    <value> | -s]\n\nFLAGS\n  -c, --color                Apply default colors to noteworthy log lines.\n  -d, --debug-level=<value>  Debug level to set on the DEVELOPER_LOG trace flag\n                             for your user.\n  -o, --target-org=<value>   (required) Username or alias of the target org.\n  -s, --skip-trace-flag      Skip trace flag setup. Assumes that a trace flag\n                             and debug level are fully set up.\n  --api-version=<value>      Override the api version used for api requests made\n                             by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Activate debug logging and display logs in the terminal.\n\n  You can also pipe the logs to a file.\n\nALIASES\n  $ sfdx force apex log tail\n\nEXAMPLES\n  Activate debug logging:\n\n    $ sfdx apex tail log\n\n  Specify a debug level:\n\n    $ sfdx apex tail log --debug-level MyDebugLevel\n\n  Skip the trace flag setup and apply default colors:\n\n    $ sfdx apex tail log --color --skip-trace-flag\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_12.txt"}}],["7ede9cf6-5826-453d-8fd5-1c2b1784f903",{"pageContent":"\n\nGenerate a bundle for an Aura component or a Lightning web component.\n\nUSAGE\n  $ sfdx force lightning component create -n <value> [--json] [-t\n    default|analyticsDashboard|analyticsDashboardWithStep] [-d <value>]\n    [--api-version <value>] [--type aura|lwc]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -n, --name=<value>        (required) Name of the generated Lightning\n                            Component.\n  -t, --template=<option>   [default: default] Template to use for file\n                            creation.\n                            <options: default|analyticsDashboard|analyticsDashbo\n                            ardWithStep>\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n  --type=<option>           [default: aura] Type of the component bundle.\n                            <options: aura|lwc>\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a bundle for an Aura component or a Lightning web component.\n\n  Generates the bundle in the specified directory or the current working\n  directory. The bundle consists of multiple files in a directory with the\n  designated name.  Lightning web components are contained in the directory with\n  name \"lwc\", Aura components in \"aura\".\n\n  To generate a Lightning web component, pass \"--type lwc\" to the command. If\n  you don’t specify --type, Salesforce CLI generates an Aura component by\n  default.\n\nALIASES\n  $ sfdx force lightning component create\n\nEXAMPLES\n  Generate the metadata files for an Aura component bundle in the current\n  directory:\n\n    $ sfdx force lightning component create --name mycomponent\n\n  Generate a Lightning web component bundle in the current directory:\n\n    $ sfdx force lightning component create --name mycomponent --type lwc\n\n  Generate an Aura component bundle in the \"force-app/main/default/aura\"\n  directory:\n\n    $ sfdx force lightning component create --name mycomponent --output-dir \\\n      force-app/main/default/aura\n\n  Generate a Lightning web component bundle in the\n  \"force-app/main/default/lwc\" directory:\n\n    $ sfdx force lightning component create --name mycomponent --type lwc \\\n      --output-dir force-app/main/default/lwc\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Lightning Component.\n\n    The name can be up to 40 characters and must start with a letter.\n\n  -t, --template=default|analyticsDashboard|analyticsDashboardWithStep\n\n    Template to use for file creation.\n\n    Supplied parameter values or default values are filled into a copy of the\n    template\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_120.txt"}}],["f1de8351-8ce9-4fc9-abcc-9017a8cc8b77",{"pageContent":"\n\nGenerate a Lightning Event.\n\nUSAGE\n  $ sfdx force lightning event create -n <value> [--json] [-t DefaultLightningEvt] [-d\n    <value>] [--api-version <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -n, --name=<value>        (required) Name of the generated Lightning Event.\n  -t, --template=<option>   [default: DefaultLightningEvt] Template to use for\n                            file creation.\n                            <options: DefaultLightningEvt>\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a Lightning Event.\n\n  Generates a Lightning Event bundle in the specified directory or the current\n  working directory. The bundle consists of multiple files in a folder with the\n  designated name.\n\nALIASES\n  $ sfdx force lightning event create\n\nEXAMPLES\n  Generate the metadata files for a Lightning event bundle called \"myevent\" in\n  the current directory:\n\n    $ sfdx force lightning event create --name myevent\n\n  Similar to previous example, but generate the files in the\n  \"force-app/main/default/aura\" directory:\n\n    $ sfdx force lightning event create --name myevent --output-dir \\\n      force-app/main/default/aura\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Lightning Event.\n\n    The name can be up to 40 characters and must start with a letter.\n\n  -t, --template=DefaultLightningEvt  Template to use for file creation.\n\n    Supplied parameter values or default values are filled into a copy of the\n    template\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_121.txt"}}],["e1f7cb68-ba87-458b-9177-10ec0bf6b76b",{"pageContent":"\n\nGenerate a Lightning Interface.\n\nUSAGE\n  $ sfdx force lightning interface create -n <value> [--json] [-t DefaultLightningIntf] [-d\n    <value>] [--api-version <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -n, --name=<value>        (required) Name of the generated Lightning\n                            Interface.\n  -t, --template=<option>   [default: DefaultLightningIntf] Template to use for\n                            file creation.\n                            <options: DefaultLightningIntf>\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a Lightning Interface.\n\n  Generates a Lightning Interface bundle in the specified directory or the\n  current working directory. The bundle consists of multiple files in a folder\n  with the designated name.\n\nALIASES\n  $ sfdx force lightning interface create\n\nEXAMPLES\n  Generate the metadata files for a Lightning interface bundle called\n  \"myinterface\" in the current directory:\n\n    $ sfdx force lightning interface create --name myinterface\n\n  Similar to the previous example but generate the files in the\n  \"force-app/main/default/aura\" directory:\n\n    $ sfdx force lightning interface create --name myinterface --output-dir \\\n      force-app/main/default/aura\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Lightning Interface.\n\n    The name can be up to 40 characters and must start with a letter.\n\n  -t, --template=DefaultLightningIntf  Template to use for file creation.\n\n    Supplied parameter values or default values are filled into a copy of the\n    template\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_122.txt"}}],["2d95d195-a428-4443-b463-4358101374a6",{"pageContent":"\n\ncreates a Lightning web component test file with boilerplate code inside a __tests__ directory.\n\nUSAGE\n  $ sfdx force lightning lwc test create -f <string> [--json] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -f, --filepath=<value>\n      (required) path to Lightning web component .js file to create a test for\n\n  --json\n      format output as json\n\n  --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA\n  L)\n      [default: warn] logging level for this command invocation\n\nDESCRIPTION\n  creates a Lightning web component test file with boilerplate code inside a\n  __tests__ directory.\n\nEXAMPLES\n  $ sfdx force:lightning:lwc:test:create -f force-app/main/default/lwc/myButton/myButton.js\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_123.txt"}}],["6a8449c8-fc1f-4742-9f46-07c0cfae4eb1",{"pageContent":"\n\ninvokes Lightning Web Components Jest unit tests.\n\nUSAGE\n  $ sfdx force lightning lwc test run [-d | --watch] [--json] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -d, --debug\n      run tests in debug mode\n\n  --json\n      format output as json\n\n  --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA\n  L)\n      [default: warn] logging level for this command invocation\n\n  --watch\n      run tests in watch mode\n\nDESCRIPTION\n  invokes Lightning Web Components Jest unit tests.\n\nEXAMPLES\n  $ sfdx force:lightning:lwc:test:run\n\n  $ sfdx force:lightning:lwc:test:run -w\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_124.txt"}}],["42334395-1f83-42bc-9a7f-aea2c5672acc",{"pageContent":"\n\ninstall Jest unit testing tools for Lightning Web Components.\n\nUSAGE\n  $ sfdx force lightning lwc test setup [--json] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  --json\n      format output as json\n\n  --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA\n  L)\n      [default: warn] logging level for this command invocation\n\nDESCRIPTION\n  install Jest unit testing tools for Lightning Web Components.\n\nEXAMPLES\n  $ sfdx force:lightning:lwc:test:setup\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_125.txt"}}],["5203c115-776a-4bdd-8455-0956ba35a0aa",{"pageContent":"\n\nGenerate a Lightning test.\n\nUSAGE\n  $ sfdx force lightning test create -n <value> [--json] [-t DefaultLightningTest] [-d\n    <value>] [--api-version <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -n, --name=<value>        (required) Name of the generated Lightning Test.\n  -t, --template=<option>   [default: DefaultLightningTest] Template to use for\n                            file creation.\n                            <options: DefaultLightningTest>\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a Lightning test.\n\n  Generates the test in the specified directory or the current working\n  directory. The .resource file and associated metadata file are generated.\n\nALIASES\n  $ sfdx force lightning test create\n\nEXAMPLES\n  Generate the metadata files for the Lightning test called MyLightningTest in\n  the current directory:\n\n    $ sfdx force lightning test create --name MyLightningTest\n\n  Similar to the previous example but generate the files in the\n  \"force-app/main/default/lightningTests\" directory:\n\n    $ sfdx force lightning test create --name MyLightningTest --output-dir \\\n      force-app/main/default/lightningTests\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Lightning Test.\n\n    Name of the new Lightning test; can be up to 40 characters and must start\n    with a letter.\n\n  -t, --template=DefaultLightningTest  Template to use for file creation.\n\n    Supplied parameter values or default values are filled into a copy of the\n    template\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_126.txt"}}],["3984fd51-3820-4e32-b083-186beaaef5bd",{"pageContent":"\n\nDisplay information about limits in your org.\n\nUSAGE\n  $ sfdx limits api display -o <value> [--json] [--api-version <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display information about limits in your org.\n\n  For each limit, this command returns the maximum allocation and the remaining\n  allocation based on usage. See this topic for a description of each limit:\n  https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resou\n  rces_limits.htm.\n\nALIASES\n  $ sfdx force limits api display\n  $ sfdx org list limits\n\nEXAMPLES\n  Display limits in your default org:\n\n    $ sfdx limits api display\n\n  Display limits in the org with alias \"my-scratch-org\":\n\n    $ sfdx limits api display --target-org my-scratch-org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_127.txt"}}],["27f3a61d-14d5-4b09-9697-85d13274a835",{"pageContent":"\n\nDisplay record counts for the specified standard or custom objects.\n\nUSAGE\n  $ sfdx limits recordcounts display -o <value> [--json] [-s <value>] [--api-version\n    <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -s, --sobject=<value>...  [default: ] API name of the standard or custom\n                            object for which to display record counts.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display record counts for the specified standard or custom objects.\n\n  Use this command to get an approximate count of the records in standard or\n  custom objects in your org. These record counts are the same as the counts\n  listed in the Storage Usage page in the Setup UI. The record counts are\n  approximate because they're calculated asynchronously and your org's storage\n  usage isn't updated immediately. To display all available record counts, run\n  the command without the --sobject flag.\n\nALIASES\n  $ sfdx force limits recordcounts display\n  $ sfdx org list sobject record-counts\n\nEXAMPLES\n  Display all available record counts in your default org:\n\n    $ sfdx limits recordcounts display\n\n  Display record counts for the Account, Contact, Lead, and Opportunity\n  objects in your default org:\n\n    $ sfdx limits recordcounts display --sobject Account --sobject Contact \\\n      --sobject Lead --sobject Opportunity\n\n  Display record counts for the Account and Lead objects for the org with\n  alias \"my-scratch-org\":\n\n    $ sfdx limits recordcounts display --sobject Account --sobject Lead \\\n      --target-org my-scratch-org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_128.txt"}}],["256e3d4f-5fdb-4814-a469-380abe0671aa",{"pageContent":"\n\nConvert metadata retrieved via Metadata API into the source format used in Salesforce DX projects.\n\nUSAGE\n  $ sfdx force mdapi convert -r <value> [--json] [--api-version <value>] [-d\n    <value>] [-p <value> | -x <value> | -m <value>]\n\nFLAGS\n  -d, --output-dir=<value>       Directory to store your files in after they’re\n                                 converted to source format; can be an absolute\n                                 or relative path.\n  -m, --metadata=<value>...      Metadata component names to convert.\n  -p, --metadata-dir=<value>...  Root of directory or zip file of metadata\n                                 formatted files to convert.\n  -r, --root-dir=<value>         (required) Root directory that contains the\n                                 Metadata API–formatted metadata.\n  -x, --manifest=<value>         File path to manifest (package.xml) of metadata\n                                 types to convert.\n  --api-version=<value>          Override the api version used for api requests\n                                 made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Convert metadata retrieved via Metadata API into the source format used in\n  Salesforce DX projects.\n\n  To use Salesforce CLI to work with components that you retrieved via Metadata\n  API, first convert your files from the metadata format to the source format\n  using this command.\n\n  To convert files from the source format back to the metadata format, run \"sfdx\n  project convert source\".\n\n  To convert multiple metadata components, either set multiple --metadata <name>\n  flags or a single --metadata flag with multiple names separated by spaces.\n  Enclose names that contain spaces in one set of double quotes. The same syntax\n  applies to --manifest and --source-dir.\n\nALIASES\n  $ sfdx force mdapi convert\n\nEXAMPLES\n  Convert metadata formatted files in the specified directory into source\n  formatted files; writes converted files to your default package directory:\n\n    $ sfdx force mdapi convert --root-dir path/to/metadata\n\n  Similar to previous example, but writes converted files to the specified\n  output directory:\n\n    $ sfdx force mdapi convert --root-dir path/to/metadata --output-dir \\\n      path/to/outputdir\n\nFLAG DESCRIPTIONS\n  -p, --metadata-dir=<value>...\n\n    Root of directory or zip file of metadata formatted files to convert.\n\n    The supplied paths can be to a single file (in which case the operation is\n    applied to only one file) or to a folder (in which case the operation is\n    applied to all metadata types in the directory and its sub-directories).\n\n    If you specify this flag, don’t specify --manifest or --metadata. If the\n    comma-separated list you’re supplying contains spaces, enclose the entire\n    comma-separated list in one set of double quotes.\n\n  -x, --manifest=<value>\n\n    File path to manifest (package.xml) of metadata types to convert.\n\n    If you specify this parameter, don’t specify --metadata or --source-dir\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_129.txt"}}],["bb22275d-5672-4df5-b686-6da71826d4e9",{"pageContent":"\n\nAuthorize an org using an existing Salesforce access token.\n\nUSAGE\n  $ sfdx auth accesstoken store -r <value> [--json] [-d] [-s] [-a <value>] [-p]\n\nFLAGS\n  -a, --alias=<value>         Alias for the org.\n  -d, --set-default-dev-hub   Set the authenticated org as the default Dev Hub.\n  -p, --no-prompt             Don't prompt for confirmation.\n  -r, --instance-url=<value>  (required) URL of the instance that the org lives\n                              on.\n  -s, --set-default           Set the authenticated org as the default that all\n                              org-related commands run against.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Authorize an org using an existing Salesforce access token.\n\n  By default, the command runs interactively and asks you for the access token.\n  If you previously authorized the org, the command prompts whether you want to\n  overwrite the local file. Specify --no-prompt to not be prompted.\n\n  To use the command in a CI/CD script, set the SFDX_ACCESS_TOKEN environment\n  variable to the access token. Then run the command with the --no-prompt\n  parameter.\n\nALIASES\n  $ sfdx force auth accesstoken store\n  $ sfdx auth accesstoken store\n\nEXAMPLES\n  Authorize an org on https://mycompany.my.salesforce.com; the command prompts\n  you for the access token:\n\n    $ sfdx auth accesstoken store --instance-url \\\n      https://mycompany.my.salesforce.com\n\n  Authorize the org without being prompted; you must have previously set the\n  SFDX_ACCESS_TOKEN environment variable to the access token:\n\n    $ sfdx auth accesstoken store --instance-url \\\n      https://dev-hub.my.salesforce.com --no-prompt\n\nFLAG DESCRIPTIONS\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n\n    If you specify an --instance-url value, this value overrides the\n    sfdcLoginUrl value in your sfdx-project.json file.\n\n    To specify a My Domain URL, use the format\n    https://yourcompanyname.my.salesforce.com.\n\n    To specify a sandbox, set --instance-url to\n    https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_13.txt"}}],["e2803930-2ae0-4310-9a58-08e3f34dcad6",{"pageContent":"\n\nWe plan to deprecate this command in the future. Try using the \"project deploy start\" command instead.\nDeploy metadata to an org using Metadata API.\n\nUSAGE\n  $ sfdx force mdapi deploy -u <value> [--json] [--api-version <value>] [-d\n    <value>] [-w <value>] [-o] [-g] [-q <value> | -l\n    NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg | -r <value> |\n    -c] [--verbose] [-f <value>] [-s] [--soapdeploy] [--purgeondelete]\n    [--concise] [--resultsdir <value>] [--coverageformatters clover|cobertura|ht\n    ml-spa|html|json|json-summary|lcovonly|none|teamcity|text|text-summary]\n    [--junit]\n\nFLAGS\n  -c, --checkonly\n      Validates the deployed metadata and runs all Apex tests, but prevents the\n      deployment from being saved to the org.\n\n  -d, --deploydir=<value>\n      Root of directory tree that contains the files you want to deploy.\n\n  -f, --zipfile=<value>\n      Path to .zip file of metadata to deploy.\n\n  -g, --ignorewarnings\n      Ignore any warnings and don't roll back the deployment.\n\n  -l, --testlevel=<option>\n      Level of deployment tests to run.\n      <options: NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg>\n\n  -o, --ignoreerrors\n      Ignore any errors and don't roll back the deployment.\n\n  -q, --validateddeployrequestid=<value>\n      Request ID of the validated deployment to run a Quick Deploy.\n\n  -r, --runtests=<value>...\n      Apex test classes to run if --testlevel is RunSpecifiedTests.\n\n  -s, --singlepackage\n      Indicates that the zip file points to a directory structure for a single\n      package.\n\n  -u, --target-org=<value>\n      (required) Username or alias of the target org.\n\n  -w, --wait=<value>\n      [default: 0 minutes] Number of minutes to wait for the command to finish;\n      specify -1 to wait indefinitely.\n\n  --api-version=<value>\n      Override the api version used for api requests made by this command\n\n  --concise\n      Omit success messages for smaller JSON output.\n\n  --coverageformatters=clover,cobertura,html-spa,html,json,json-summary,lcovonly\n  ,none,teamcity,text,text-summary...\n      Format of the code coverage results.\n\n  --junit\n      Output JUnit test results.\n\n  --purgeondelete\n      Specify that deleted components in the destructive changes manifest file are\n      immediately eligible for deletion rather than being stored in the Recycle\n      Bin.\n\n  --resultsdir=<value>\n      Output directory for code coverage and JUnit results; defaults to the deploy\n      ID.\n\n  --soapdeploy\n      Deploy metadata with SOAP API instead of REST API.\n\n  --verbose\n      Display verbose output of the deploy results.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nEXAMPLES\n  Return a job ID you can use to check the deploy status:\n\n    $ sfdx force mdapi deploy --deploydir some/path\n\n  Deploy and poll for 1000 minutes:\n\n    $ sfdx force mdapi deploy --deploydir some/path --wait 1000\n\n  Deploy a ZIP file:\n\n    $ sfdx force mdapi deploy --zipfile stuff.zip\n\n  Validate a deployment so the ID can be used for a quick deploy:\n\n    $ sfdx force mdapi deploy --deploydir some/path --wait 1000 --checkonly \\\n      --testlevel RunAllTestsInOrg\n\n  Quick deploy using a previously validated deployment:\n\n    $ sfdx force mdapi deploy --validateddeployrequestid MyValidatedId\n\nFLAG DESCRIPTIONS\n  -c, --checkonly\n\n    Validates the deployed metadata and runs all Apex tests, but prevents the\n    deployment from being saved to the org.\n\n    IMPORTANT: Where possible, we changed noninclusive terms to align with our\n    company value of Equality. We maintained certain terms to avoid any effect\n    on customer implementations.\n\n    If you change a field type from Master-Detail to Lookup or vice versa, that\n    change isn’t supported when using the --checkonly parameter to test a\n    deployment (validation). This kind of change isn’t supported for test\n    deployments to avoid the risk of data loss or corruption. If a change that\n    isn’t supported for test deployments is included in a deployment package,\n    the test deployment fails and issues an error.\n\n    If your deployment package changes a field type from Master-Detail to Lookup\n    or vice versa, you can still validate the changes prior to deploying to\n    Production by performing a full deployment to another test Sandbox. A full\n    deployment includes a validation of the changes as part of the deployment\n    process.\n\n    Note: A Metadata API deployment that includes Master-Detail relationships\n    deletes all detail records in the Recycle Bin in the following cases.\n\n    1. For a deployment with a new Master-Detail field, soft delete (send to the\n    Recycle Bin) all detail records before proceeding to deploy the\n    Master-Detail field, or the deployment fails. During the deployment, detail\n    records are permanently deleted from the Recycle Bin and cannot be\n    recovered.\n    2. For a deployment that converts a Lookup field relationship to a\n    Master-Detail relationship, detail records must reference a master record or\n    be soft-deleted (sent to the Recycle Bin) for the deployment to succeed.\n    However, a successful deployment permanently deletes any detail records in\n    the Recycle Bin.\n\n  -d, --deploydir=<value>\n\n    Root of directory tree that contains the files you want to deploy.\n\n    The root must contain a valid package.xml file describing the entities in\n    the directory structure. Required to initiate a deployment if you don’t use\n    --zipfile. If you specify both --zipfile and --deploydir, a zip file of the\n    contents of the --deploydir directory is written to the location specified\n    by --zipfile.\n\n  -f, --zipfile=<value>  Path to .zip file of metadata to deploy.\n\n    You must indicate this option or --deploydir. If you specify both --zipfile\n    and --deploydir, a .zip file of the contents of the deploy directory is\n    created at the path specified for the .zip file.\n\n  -g, --ignorewarnings  Ignore any warnings and don't roll back the deployment.\n\n    If a warning occurs and ignoreWarnings is set to true, the success field in\n    DeployMessage is true. When ignoreWarnings is set to false, success is set\n    to false, and the warning is treated like an error.\n    This field is available in API version 18.0 and later. Prior to version\n    18.0, there was no distinction between warnings and errors. All problems\n    were treated as errors and prevented a successful deployment.\n\n  -l, --testlevel=NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg\n\n    Level of deployment tests to run.\n\n    Valid values are:\n\n    * NoTestRun—No tests are run. This test level applies only to deployments to\n    development environments, such as sandbox, Developer Edition, or trial orgs.\n    This test level is the default for development environments.\n    * RunSpecifiedTests—Runs only the tests that you specify in the --runtests\n    option. Code coverage requirements differ from the default coverage\n    requirements when using this test level. Executed tests must comprise a\n    minimum of 75% code coverage for each class and trigger in the deployment\n    package. This coverage is computed for each class and trigger individually\n    and is different than the overall coverage percentage.\n    * RunLocalTests—All tests in your org are run, except the ones that\n    originate from installed managed and unlocked packages. This test level is\n    the default for production deployments that include Apex classes or\n    triggers.\n    * RunAllTestsInOrg—All tests in your org are run, including tests of managed\n    packages.\n\n    If you don’t specify a test level, the default behavior depends on the\n    contents of your deployment package. For more information, see “Running\n    Tests in a Deployment” in the Metadata API Developer Guide.\n\n  -o, --ignoreerrors  Ignore any errors and don't roll back the deployment.\n\n    The default is false. Keep this parameter set to false when deploying to a\n    production org. If set to true, components without errors are deployed, and\n    components with errors are skipped.\n\n  -q, --validateddeployrequestid=<value>\n\n    Request ID of the validated deployment to run a Quick Deploy.\n\n    Deploying a validation helps you shorten your deployment time because tests\n    aren’t rerun. If you have a recent successful validation, you can deploy the\n    validated components without running tests. A validation doesn’t save any\n    components in the org. You use a validation only to check the success or\n    failure messages that you would receive with an actual deployment. To\n    validate your components, add the -c | --checkonly flag when you run 'force\n    mdapi deploy'. This flag sets the checkOnly='true' parameter for your\n    deployment. Before deploying a recent validation, ensure that the following\n    requirements are met:\n\n    1. The components have been validated successfully for the target\n    environment within the last 10 days.\n    2. As part of the validation, Apex tests in the target org have passed.\n    3. Code coverage requirements are met.\n    - If all tests in the org or all local tests are run, overall code coverage\n    is at least 75%, and Apex triggers have some coverage.\n    - If specific tests are run with the RunSpecifiedTests test level, each\n    class and trigger that was deployed is covered by at least 75% individually.\n\n  -s, --singlepackage\n\n    Indicates that the zip file points to a directory structure for a single\n    package.\n\n    By default, the CLI assumes the directory is structured for a set of\n    packages.\n\n  -w, --wait=<value>\n\n    Number of minutes to wait for the command to finish; specify -1 to wait\n    indefinitely.\n\n    The default is 0 (returns immediately).\n\n  --soapdeploy  Deploy metadata with SOAP API instead of REST API.\n\n    Because SOAP API has a lower .ZIP file size limit (400 MB uncompressed, 39\n    MB compressed), Salesforce recommends REST API deployment. This flag\n    provides backwards compatibility with API version 50.0 and earlier when\n    deploy used SOAP API by default.\n\n  --verbose  Display verbose output of the deploy results.\n\n    Indicates that you want verbose output from the deploy operation.\n\nCOMMANDS\n  force mdapi deploy cancel  Cancel a metadata deployment.\n  force mdapi deploy report  Check the status of a metadata deployment\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_130.txt"}}],["1e03b382-c35c-497a-b804-5118c6cf21a4",{"pageContent":"\n\nWe plan to deprecate this command in the future. Try using the \"project deploy cancel\" command instead.\nCancel a metadata deployment.\n\nUSAGE\n  $ sfdx force mdapi deploy cancel -o <value> [--json] [--api-version <value>] [-w\n    <value>] [-i <value>]\n\nFLAGS\n  -i, --jobid=<value>       Job ID of the deployment you want to cancel;\n                            defaults to your most recent CLI deployment.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -w, --wait=<value>        [default: 33 minutes] Number of minutes for the\n                            command to complete and display results to the\n                            terminal window.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Cancel a metadata deployment.\n\n  Use this command to cancel a specified asynchronous metadata deployment. You\n  can also specify a wait time (in minutes) to check for updates to the canceled\n  deploy status.\n\n  Cancels an asynchronous metadata deployment.\n\nEXAMPLES\n  Cancel a deployment and wait two minutes:\n\n    $ sfdx force mdapi deploy cancel --wait 2\n\n  If you have multiple deployments in progress and want to cancel a specific\n  one, specify the job ID:\n\n    $ sfdx force mdapi deploy cancel --jobid <jobid>\n\nFLAG DESCRIPTIONS\n  -w, --wait=<value>\n\n    Number of minutes for the command to complete and display results to the\n    terminal window.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_131.txt"}}],["c342c851-9c23-4fd8-b1da-f2c5b5e281b9",{"pageContent":"\n\nWe plan to deprecate this command in the future. Try using the \"project deploy start\" and \"project deploy report\" pair instead.\nCheck the status of a metadata deployment.\n\nUSAGE\n  $ sfdx force mdapi deploy report -o <value> [--json] [--api-version <value>] [-w\n    <value>] [-i <value>] [--verbose] [--concise] [--resultsdir <value>]\n    [--coverageformatters clover|cobertura|html-spa|html|json|json-summary|lcovo\n    nly|none|teamcity|text|text-summary] [--junit]\n\nFLAGS\n  -i, --jobid=<value>\n      Job ID of the deployment to check; required if you’ve never deployed using\n      Salesforce CLI; defaults to your most recent CLI deployment.\n\n  -o, --target-org=<value>\n      (required) Username or alias of the target org.\n\n  -w, --wait=<value>\n      [default: 0 minutes] Number of minutes to wait for the command to finish;\n      use -1 to poll indefinitely.\n\n  --api-version=<value>\n      Override the api version used for api requests made by this command\n\n  --concise\n      Omit success messages for smaller JSON output.\n\n  --coverageformatters=clover,cobertura,html-spa,html,json,json-summary,lcovonly\n  ,none,teamcity,text,text-summary...\n      Format of the code coverage results.\n\n  --junit\n      Output JUnit test results.\n\n  --resultsdir=<value>\n      Output directory for code coverage and JUnit results; defaults to the deploy\n      ID.\n\n  --verbose\n      Verbose output of deploy results.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Check the status of a metadata deployment.\n\n  Specify the job ID for the deploy you want to check. The job ID is returned by\n  the \"force mdapi deploy\" command when run without the --wait parameter. You\n  can also specify a wait time (minutes) to check for updates to the deploy\n  status.\n\nEXAMPLES\n  Check the status of the most recent deployment\n\n    $ sfdx force mdapi deploy report\n\n  Check the status of a deploy with job ID 1234 and wait for 10 minutes for\n  the result:\n\n    $ sfdx force mdapi deploy report --jobid 1234 --wait 10\n\nFLAG DESCRIPTIONS\n  -i, --jobid=<value>\n\n    Job ID of the deployment to check; required if you’ve never deployed using\n    Salesforce CLI; defaults to your most recent CLI deployment.\n\n    The job ID (id field value for AsyncResult) of the deployment you want to\n    check. The job ID is required if you haven’t previously deployed using\n    Salesforce CLI. If you deploy using Salesforce CLI and don’t specify a job\n    ID, we use the ID of the most recent metadata deployment\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_132.txt"}}],["0868c827-672b-497e-9197-649efe324f93",{"pageContent":"\n\nDisplay details about the metadata types that are enabled for your org.\n\nUSAGE\n  $ sfdx org list metadata-types -o <value> [--json] [--api-version <value>] [-f\n    <value>]\n\nFLAGS\n  -f, --output-file=<value>  Pathname of the file in which to write the results.\n  -o, --target-org=<value>   (required) Username or alias of the target org.\n  --api-version=<value>      API version to use; default is the most recent API\n                             version.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display details about the metadata types that are enabled for your org.\n\n  The information includes Apex classes and triggers, custom objects, custom\n  fields on standard objects, tab sets that define an app, and many other\n  metadata types. Use this information to identify the syntax needed for a\n  <name> element in a manifest file (package.xml).\n\n  The username that you use to connect to the org must have the Modify All Data\n  or Modify Metadata Through Metadata API Functions permission.\n\nALIASES\n  $ sfdx force mdapi describemetadata\n\nEXAMPLES\n  Display information about all known and enabled metadata types in the org\n  with alias \"my-dev-org\" using API version 57.0:\n\n    $ sfdx org list metadata-types --api-version 57.0 --target-org \\\n      my-dev-org\n\n  Display only the metadata types that aren't yet supported by Salesforce CLI\n  in your default org and write the results to the specified file:\n\n    $ sfdx org list metadata-types --output-file /path/to/outputfilename.txt \\\n      --filter-known\n\nFLAG DESCRIPTIONS\n  -f, --output-file=<value>  Pathname of the file in which to write the results.\n\n    Directing the output to a file makes it easier to extract relevant\n    information for your package.xml manifest file. The default output\n    destination is the terminal or command window console.\n\n  --api-version=<value>\n\n    API version to use; default is the most recent API version.\n\n    Override the api version used for api requests made by this command\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_133.txt"}}],["ddab2f69-5395-44ed-87ef-474c6a45af6a",{"pageContent":"\n\nList the metadata components and properties of a specified type.\n\nUSAGE\n  $ sfdx org list metadata -o <value> -m <value> [--json] [--api-version\n    <value>] [-f <value>] [--folder <value>]\n\nFLAGS\n  -f, --output-file=<value>    Pathname of the file in which to write the\n                               results.\n  -m, --metadata-type=<value>  (required) Metadata type to be retrieved, such as\n                               CustomObject; metadata type names are\n                               case-sensitive.\n  -o, --target-org=<value>     (required) Username or alias of the target org.\n  --api-version=<value>        API version to use; default is the most recent\n                               API version.\n  --folder=<value>             Folder associated with the component; required\n                               for components that use folders; folder names are\n                               case-sensitive.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List the metadata components and properties of a specified type.\n\n  Use this command to identify individual components in your manifest file or if\n  you want a high-level view of particular metadata types in your org. For\n  example, you can use this command to return a list of names of all the\n  CustomObject or Layout components in your org, then use this information in a\n  retrieve command that returns a subset of these components.\n\n  The username that you use to connect to the org must have the Modify All Data\n  or Modify Metadata Through Metadata API Functions permission.\n\nALIASES\n  $ sfdx force mdapi listmetadata\n\nEXAMPLES\n  List the CustomObject components, and their properties, in the org with\n  alias \"my-dev-org\":\n\n    $ sfdx org list metadata --metadata-type CustomObject --target-org \\\n      my-dev-org\n\n  List the CustomObject components in your default org, write the output to\n  the specified file, and use API version 57.0:\n\n    $ sfdx org list metadata --metadata-type CustomObject --api-version 57.0 \\\n      --output-file /path/to/outputfilename.txt\n\n  List the Dashboard components in your default org that are contained in the\n  \"folderSales\" folder, write the output to the specified file, and use API\n  version 57.0:\n\n    $ sfdx org list metadata --metadata-type Dashboard --folder folderSales \\\n      --api-version 57.0 --output-file /path/to/outputfilename.txt\n\nFLAG DESCRIPTIONS\n  --api-version=<value>\n\n    API version to use; default is the most recent API version.\n\n    Override the api version used for api requests made by this command\n\n  --folder=<value>\n\n    Folder associated with the component; required for components that use\n    folders; folder names are case-sensitive.\n\n    Examples of metadata types that use folders are Dashboard, Document,\n    EmailTemplate, and Report\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_134.txt"}}],["91f533e9-da3e-44ab-a490-d8b29b3867b2",{"pageContent":"\n\nWe plan to deprecate this command in the future. Try using the \"project retrieve start\" command instead.\nRetrieve metadata from an org using Metadata API.\n\nUSAGE\n  $ sfdx force mdapi retrieve -o <value> -r <value> [--json] [-k <value> | -d\n    <value> | -p <value>] [-s] [-n <value>] [-z] [-w <value>] [-a <value>]\n    [--verbose]\n\nFLAGS\n  -a, --apiversion=<value>         Target API version for the retrieve.\n  -d, --sourcedir=<value>          Source directory to use instead of the\n                                   default package directory specified in\n                                   sfdx-project.json.\n  -k, --unpackaged=<value>         Complete path for the manifest file that\n                                   specifies the components to retrieve.\n  -n, --zipfilename=<value>        File name to use for the retrieved zip file.\n  -o, --target-org=<value>         (required) Username or alias of the target\n                                   org.\n  -p, --packagenames=<value>...    Comma-separated list of packages to retrieve.\n  -r, --retrievetargetdir=<value>  (required) Root of the directory structure\n                                   where the retrieved .zip or metadata files\n                                   are retrieved.\n  -s, --singlepackage              Specify that the zip file points to a\n                                   directory structure for a single package.\n  -w, --wait=<value>               [default: 1440 minutes] Number of minutes to\n                                   wait for the command to complete.\n  -z, --unzip                      Extract all files from the retrieved zip\n                                   file.\n  --verbose                        Display verbose output of retrieve result.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Retrieve metadata from an org using Metadata API.\n\n  This command uses Metadata API to retrieve a .zip of XML files that represent\n  metadata from the targeted org. You can retrieve and deploy up to 10,000 files\n  or 400 MB (39 MB compressed) at one time.\n\nEXAMPLES\n  Retrieve metadata in the default project directory into the target\n  directory:\n\n    $ sfdx force mdapi retrieve --retrievetargetdir path/to/retrieve/dir\n\n  Retrieve metadata defined in the specified manifest into the target\n  directory:\n\n    $ sfdx force mdapi retrieve --retrievetargetdir path/to/retrieve/dir \\\n      --unpackaged package.xml\n\n  Retrieve metadata defined by the specified directory, name the retrieved\n  zipfile and extract all contents\n\n    $ sfdx force mdapi retrieve --sourcedir path/to/apexClasses \\\n      --retrievetargetdir path/to/retrieve/dir --unzip --zipfilename \\\n      apexClasses.zip\n\n  Enqueue a retrieve request but do not wait for the metadata to be retrieved:\n\n    $ sfdx force mdapi retrieve --retrievetargetdir path/to/retrieve/dir \\\n      --wait 0\n\nFLAG DESCRIPTIONS\n  -a, --apiversion=<value>  Target API version for the retrieve.\n\n    Use to override the default, which is the latest version supported by your\n    CLI plug-in, with the version in your package.xml file.\n\n  -s, --singlepackage\n\n    Specify that the zip file points to a directory structure for a single\n    package.\n\n    By default, the CLI assumes the directory is structured for a set of\n    packages.\n\nCOMMANDS\n  force mdapi retrieve report  Check the status of a metadata retrieval\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_135.txt"}}],["b6ef3d4d-3fcb-4cfa-a6de-956a7e9cba8e",{"pageContent":"\n\nThe \"force mdapi retrieve report\" command has been deprecated.\nCheck the status of a metadata retrieval.\n\nUSAGE\n  $ sfdx force mdapi retrieve report -o <value> [--json] [--api-version <value>] [-r\n    <value>] [-i <value>] [-n <value>] [-z] [-w <value>] [--verbose]\n\nFLAGS\n  -i, --jobid=<value>              Job ID of the retrieve you want to check;\n                                   defaults to your most recent CLI retrieval.\n  -n, --zipfilename=<value>        File name to use for the retrieved zip file.\n  -o, --target-org=<value>         (required) Username or alias of the target\n                                   org.\n  -r, --retrievetargetdir=<value>  Root of the directory structure where the\n                                   retrieved .zip or metadata files are\n                                   retrieved.\n  -w, --wait=<value>               [default: 1440 minutes] Number of minutes to\n                                   wait for the command to complete.\n  -z, --unzip                      Extract all files from the retrieved zip\n                                   file.\n  --api-version=<value>            Override the api version used for api\n                                   requests made by this command\n  --verbose                        Display verbose output of retrieve result.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Check the status of a metadata retrieval.\n\n  Specify the job ID and a target directory for the retrieve you want to check.\n  You can also specify a wait time (minutes) to check for updates to the\n  retrieve status. If the retrieve was successful, the resulting zip file will\n  be saved to the location passed in with the retrieve target parameter.\n\nEXAMPLES\n  Poll until the metadata is retrieved (or timeout is reached) using data from\n  the last force:mdapi:retrieve command:\n\n    $ sfdx force mdapi retrieve report\n\n  Report the current status of the last retrieve command. If the retrieve is\n  complete the zip file of metadata is written to the target directoy:\n\n    $ sfdx force mdapi retrieve report --retrievetargetdir \\\n      path/to/retrieve/dir --wait 0\n\n  Poll until the metadata is retrieved (or timeout is reached) using the\n  provided RetrieveID, naming the zip file and extracting all contents:\n\n    $ sfdx force mdapi retrieve report -i retrieveId --retrievetargetdir \\\n      path/to/retrieve/dir --unzip --zipfilename apexClasses.zip\n\nFLAG DESCRIPTIONS\n  -i, --jobid=<value>\n\n    Job ID of the retrieve you want to check; defaults to your most recent CLI\n    retrieval.\n\n    You must specify a --retrievetargetdir. Use with --wait to resume waiting\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_136.txt"}}],["5084d3b6-4ce4-411a-9ebf-a6fd8313ea54",{"pageContent":"\n\nThe \"force org clone\" command has been deprecated and will be removed in version 60.0. Use \"org:create:sandbox\" instead.\nClone a sandbox org.\n\nUSAGE\n  $ sfdx force org clone -o <value> -t sandbox [--json] [--api-version\n    <value>] [-f <value>] [-s] [-a <value>] [-w <value>]\n\nFLAGS\n  -a, --setalias=<value>        Alias for the cloned org.\n  -f, --definitionfile=<value>  Path to the sandbox definition file.\n  -o, --target-org=<value>      (required) Username or alias of the target org.\n  -s, --setdefaultusername      Set the cloned org as your default.\n  -t, --type=<option>           (required) Type of org to create.\n                                <options: sandbox>\n  -w, --wait=<value>            [default: 6 minutes] Number of minutes to wait\n                                while polling for status.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Clone a sandbox org.\n\n  There are two ways to clone a sandbox: either specify a sandbox definition\n  file or provide key=value pairs at the command line. Key-value pairs at the\n  command-line override their equivalent sandbox definition file values. In\n  either case, you must specify both the \"SandboxName\" and \"SourceSandboxName\"\n  options to set the names of the new sandbox and the one being cloned,\n  respectively.\n\n  Set the --targetusername (-u) parameter to a production org with sandbox\n  licenses. The --type (-t) parameter is required and must be set to \"sandbox\".\n\nEXAMPLES\n  $ sfdx force org clone -t sandbox -f config/dev-sandbox-def.json -u prodOrg -a MyDevSandbox\n\n  $ sfdx force org clone -t sandbox SandboxName=NewClonedSandbox SourceSandboxName=ExistingSandbox -u prodOrg -a MyDevSandbox\n\nFLAG DESCRIPTIONS\n  -w, --wait=<value>  Number of minutes to wait while polling for status.\n\n    Sets the streaming client socket timeout, in minutes. If the streaming\n    client socket has no contact from the server for a number of minutes, the\n    client exits. Specify a longer wait time if timeouts occur frequently\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_137.txt"}}],["3b1507f5-76f3-45ba-b2bd-92dcbe4d67b1",{"pageContent":"\n\nThe force:org:create command has been replaced. Try org:create:scratch or org:create:sandbox.\nCreate a scratch org or sandbox.\n\nUSAGE\n  $ sfdx force org create [--json] [-o <value>] [-v <value>] [--api-version\n    <value>] [-t scratch|sandbox] [-f <value>] [-n] [-c] [-i <value>] [-s] [-a\n    <value>] [-w <value>] [-d <value>]\n\nFLAGS\n  -a, --setalias=<value>        Alias for the created org.\n  -c, --noancestors             Do not include second-generation package\n                                ancestors in the scratch org.\n  -d, --durationdays=<value>    [default: 7] Duration of the scratch org (in\n                                days) (default:7, min:1, max:30).\n  -f, --definitionfile=<value>  Path to an org definition file.\n  -i, --clientid=<value>        Connected app consumer key; not supported for\n                                sandbox org creation.\n  -n, --nonamespace             Create the scratch org with no namespace.\n  -o, --target-org=<value>      Username or alias of the production org that\n                                contains the sandbox license.\n  -s, --setdefaultusername      Set the created org as the default username.\n  -t, --type=<option>           [default: scratch] Type of org to create.\n                                <options: scratch|sandbox>\n  -v, --target-dev-hub=<value>  Username or alias of the Dev Hub org.\n  -w, --wait=<value>            [default: 6 minutes] Streaming client socket\n                                timeout (in minutes).\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a scratch org or sandbox.\n\n  Creates a scratch org or a sandbox org using the values specified in a\n  configuration file or key=value pairs that you specify on the command line.\n  Values specified on the command line override values in the configuration\n  file. Specify a configuration file or provide key=value pairs while creating a\n  scratch org or a sandbox. When creating scratch orgs, —targetdevhubusername\n  (-v) must be a Dev Hub org. When creating sandboxes, the --targetusername (-u)\n  must be a production org with sandbox licenses. The —type (-t) is required if\n  creating a sandbox.\n\nEXAMPLES\n  $ sfdx force org create -f config/enterprise-scratch-def.json -a MyScratchOrg\n\n  $ sfdx force org create edition=Developer -a MyScratchOrg -s -v devHub\n\n  $ sfdx force org create -f config/enterprise-scratch-def.json -a ScratchOrgWithOverrides username=testuser1@mycompany.org\n\n  $ sfdx force org create -t sandbox -f config/dev-sandbox-def.json -a MyDevSandbox -u prodOrg\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_138.txt"}}],["ea1998fc-1cfc-48b3-b850-a34d771c4174",{"pageContent":"\n\nThe force:org:delete command is deprecated. Use org:delete:scratch or org:delete:sandbox.\nDelete a scratch or sandbox org.\n\nUSAGE\n  $ sfdx force org delete -o <value> [--json] [--api-version <value>] [-p]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -p, --no-prompt           No prompt to confirm deletion.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete a scratch or sandbox org.\n\n  Salesforce CLI marks the org for deletion in either the Dev Hub org (for\n  scratch orgs) or production org (for sandboxes)\n  and then deletes all local references to the org from your computer.\n\n  To mark the org for deletion without being prompted to confirm, specify\n  --noprompt.\n\nEXAMPLES\n  $ sfdx force org delete -u me@my.org\n\n  $ sfdx force org delete -u MyOrgAlias -p\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_139.txt"}}],["42ef592b-203c-4982-ac98-f0ceb44164d3",{"pageContent":"\n\nAuthorize an org using a device code.\n\nUSAGE\n  $ sfdx auth device login [--json] [-i <value>] [-r <value>] [-d] [-s] [-a\n    <value>]\n\nFLAGS\n  -a, --alias=<value>         Alias for the org.\n  -d, --set-default-dev-hub   Set the authenticated org as the default Dev Hub.\n  -i, --client-id=<value>     OAuth client ID (also called consumer key) of your\n                              custom connected app.\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n  -s, --set-default           Set the authenticated org as the default that all\n                              org-related commands run against.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Authorize an org using a device code.\n\n  Use this command to allow a device to connect to an org.\n\n  When you run this command, it first displays an 8-digit device code and the\n  URL for verifying the code on your org. The default instance URL is\n  https://login.salesforce.com, so if the org you're authorizing is on a\n  different instance, use the --instance-url. The command waits while you\n  complete the verification. Open a browser and navigate to the displayed\n  verification URL, enter the code, then click Connect. If you aren't already\n  logged into your org, log in, and then you're prompted to allow the device to\n  connect to the org. After you successfully authorize the org, you can close\n  the browser window.\n\nALIASES\n  $ sfdx force auth device login\n  $ sfdx auth device login\n\nEXAMPLES\n  Authorize an org using a device code, give the org the alias TestOrg1, and\n  set it as your default Dev Hub org:\n\n    $ sfdx auth device login --set-default-dev-hub --alias TestOrg1\n\n  Authorize an org in which you've created a custom connected app with the\n  specified client ID (consumer key):\n\n    $ sfdx auth device login --client-id <OAuth client id>\n\n  Authorize a sandbox org with the specified instance URL:\n\n    $ sfdx auth device login --instance-url \\\n      https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\nFLAG DESCRIPTIONS\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n\n    If you specify an --instance-url value, this value overrides the\n    sfdcLoginUrl value in your sfdx-project.json file.\n\n    To specify a My Domain URL, use the format\n    https://yourcompanyname.my.salesforce.com.\n\n    To specify a sandbox, set --instance-url to\n    https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_14.txt"}}],["79d474ad-5850-4566-8e59-28d998011168",{"pageContent":"\n\nDisplay information about an org.\n\nUSAGE\n  $ sfdx org display -o <value> [--json] [--api-version <value>]\n    [--verbose]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n  --verbose                 Display the sfdxAuthUrl property.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display information about an org.\n\n  Output includes your access token, client Id, connected status, org ID,\n  instance URL, username, and alias, if applicable.\n\n  Use --verbose to include the SFDX auth URL. WARNING: The SFDX auth URL\n  contains sensitive information, such as a refresh token that can be used to\n  access an org. Don't share or distribute this URL or token.\n\n  Including --verbose displays the sfdxAuthUrl property only if you\n  authenticated to the org using auth:web:login (not auth:jwt:grant).\n\nALIASES\n  $ sfdx force org display\n\nEXAMPLES\n  Display information about your default org:\n\n    $ sfdx org display\n\n  Display information, including the sfdxAuthUrl property, about the org with\n  alias TestOrg1:\n\n    $ sfdx org display --target-org TestOrg1 --verbose\n\nCOMMANDS\n  org display user  Display information about a Salesforce user\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_140.txt"}}],["ac894f6c-a54b-4cd1-8448-730168cac123",{"pageContent":"\n\nList all orgs you’ve created or authenticated to.\n\nUSAGE\n  $ sfdx force org list [--json] [--verbose] [--all] [-p --clean]\n    [--skip-connection-status]\n\nFLAGS\n  -p, --no-prompt           Don't prompt for confirmation.\n  --all                     Include expired, deleted, and unknown-status scratch\n                            orgs.\n  --clean                   Remove all local org authorizations for non-active\n                            scratch orgs. Use auth:logout to remove non-scratch\n                            orgs.\n  --skip-connection-status  Skip retrieving the connection status of non-scratch\n                            orgs.\n  --verbose                 List more information about each org.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force org list\n\nEXAMPLES\n  List all orgs you've created or authenticated to:\n\n    $ sfdx force org list\n\n  List all orgs, including expired, deleted, and unknown-status orgs; don't\n  include the connection status:\n\n    $ sfdx force org list --skip-connection-status --all\n\n  List orgs and remove local org authorization info about non-active scratch\n  orgs:\n\n    $ sfdx force org list --clean\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_141.txt"}}],["0ce7d3a5-7d9b-47a7-8b63-bd3ff7889bc7",{"pageContent":"\n\nOpen your default scratch org, or another specified org, in a browser.\n\nUSAGE\n  $ sfdx org open -o <value> [--json] [--api-version <value>] [-b\n    chrome|edge|firefox | -r] [-p <value> | -f <value>]\n\nFLAGS\n  -b, --browser=<option>     Browser where the org opens.\n                             <options: chrome|edge|firefox>\n  -f, --source-file=<value>  Path to an ApexPage or FlexiPage to open in\n                             Lightning App Builder.\n  -o, --target-org=<value>   (required) Username or alias of the target org.\n  -p, --path=<value>         Navigation URL path to open a specific page.\n  -r, --url-only             Display navigation URL, but don’t launch browser.\n  --api-version=<value>      Override the api version used for api requests made\n                             by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Open your default scratch org, or another specified org, in a browser.\n\n  To open a specific page, specify the portion of the URL after\n  \"https://MyDomainName.my.salesforce.com/\" as the value for the --path flag.\n  For example, specify \"--path lightning\" to open Lightning Experience, or\n  specify \"--path /apex/YourPage\" to open a Visualforce page.\n\n  Use the --source-file to open a Lightning Page from your local project in\n  Lightning App Builder. Lightning page files have the suffix\n  .flexipage-meta.xml, and are stored in the \"flexipages\" directory.\n\n  To generate a URL but not launch it in your browser, specify --url-only.\n\n  To open in a specific browser, use the --browser flag. Supported browsers are\n  \"chrome\", \"edge\", and \"firefox\". If you don't specify --browser, the org opens\n  in your default browser.\n\nALIASES\n  $ sfdx force org open\n  $ sfdx force source open\n\nEXAMPLES\n  Open your default org in your default browser:\n\n    $ sfdx org open\n\n  Open the org with alias MyTestOrg1 in the Firefox browser:\n\n    $ sfdx org open --target-org MyTestOrg1 --browser firefox\n\n  Display the navigation URL for the Lightning Experience page for your\n  default org, but don't open the page in a browser:\n\n    $ sfdx org open --url-only --path lightning\n\n  Open a local Lightning page in your default org's Lightning App Builder:\n\n    $ sfdx org open --source-path \\\n      force-app/main/default/flexipages/Hello.flexipage-meta.xml\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_142.txt"}}],["0e5be05f-a7c0-4c92-8eed-97c28a2478dc",{"pageContent":"\n\nCreate a scratch org configuration (shape) based on the specified source org.\n\nUSAGE\n  $ sfdx org create shape -o <value> [--json] [--api-version <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a scratch org configuration (shape) based on the specified source org.\n\n  Scratch org shapes mimic the baseline setup (features, limits, edition, and\n  Metadata API settings) of a source org without the extraneous data and\n  metadata.\n\n  Run \"sfdx org list shape\" to view the available org shapes and their IDs.\n\n  To create a scratch org from an org shape, include the \"sourceOrg\" property in\n  the scratch org definition file and set it to the org ID of the source org.\n  Then create a scratch org with the \"sfdx force:org:create\" command.\n\nALIASES\n  $ sfdx force org shape create\n\nEXAMPLES\n  Create an org shape for the source org with alias SourceOrg:\n\n    $ sfdx org create shape --target-org SourceOrg\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_143.txt"}}],["6d61c0fe-caa1-46f7-83d6-11c541aa53bd",{"pageContent":"\n\nDelete all org shapes for a target org.\n\nUSAGE\n  $ sfdx org delete shape -o <value> [--json] [--api-version <value>] [-p]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -p, --no-prompt           Don't prompt for confirmation.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete all org shapes for a target org.\n\n  A source org can have only one active org shape. If you try to create an org\n  shape for a source org that already has one, the previous shape is marked\n  inactive and replaced by a new active shape. If you don’t want to create\n  scratch orgs based on this shape, you can delete the org shape.\n\nALIASES\n  $ sfdx force org shape delete\n\nEXAMPLES\n  Delete all org shapes for the source org with alias SourceOrg:\n\n    $ sfdx org delete shape --target-org SourceOrg\n\n  Delete all org shapes without prompting:\n\n    $ sfdx org delete shape --target-org SourceOrg --no-prompt\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_144.txt"}}],["3e5d485b-d168-4643-8be3-3abc39b84161",{"pageContent":"\n\nList all org shapes you’ve created.\n\nUSAGE\n  $ sfdx force org shape list [--json]\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List all org shapes you’ve created.\n\n  The output includes the alias, username, and ID of the source org, the status\n  of the org shape creation, and more. Use the org ID to update your scratch org\n  configuration file so you can create a scratch org based on this org shape.\n\nALIASES\n  $ sfdx force org shape list\n\nEXAMPLES\n  List all org shapes you've created:\n\n    $ sfdx force org shape list\n\n  List all org shapes in JSON format and write the output to a file:\n\n    $ sfdx force org shape list --json > tmp/MyOrgShapeList.json\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_145.txt"}}],["a7c60058-ba30-4569-abb2-aa2cbe94d635",{"pageContent":"\n\nCreate a snapshot of a scratch org.\n\nUSAGE\n  $ sfdx org create snapshot -v <value> -o <value> -n <value> [--json]\n    [--api-version <value>] [-d <value>]\n\nFLAGS\n  -d, --description=<value>     Description of snapshot.\n  -n, --name=<value>            (required) Unique name of snapshot.\n  -o, --source-org=<value>      (required) ID or locally authenticated username\n                                or alias of scratch org to snapshot.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a snapshot of a scratch org.\n\n  A snapshot is a point-in-time copy of a scratch org. The copy is referenced by\n  its unique name in a scratch org definition file.\n\n  Use \"sfdx org get snapshot\" to get details, including status, about a snapshot\n  creation request.\n\n  To create a scratch org from a snapshot, include the \"snapshot\" option\n  (instead of \"edition\") in the scratch org definition file and set it to the\n  name of the snapshot. Then use \"sfdx force:org:create\" to create the scratch\n  org.\n\nALIASES\n  $ sfdx force org snapshot create\n\nEXAMPLES\n  Create a snapshot called \"Dependencies\" using the source scratch org ID and\n  your default Dev Hub org:\n\n    $ sfdx org create snapshot --source-org 00Dxx0000000000 --name \\\n      Dependencies --description 'Contains PackageA v1.1.0'\n\n  Create a snapshot called \"NightlyBranch\" using the source scratch org\n  username and a Dev Hub org with alias NightlyDevHub:\n\n    $ sfdx org create snapshot --source-org myuser@myorg --name \\\n      NightlyBranch --description 'Contains PkgA v2.1.0 and PkgB 3.3.0' \\\n      --target-dev-hub NightlyDevHub\n\nFLAG DESCRIPTIONS\n  -d, --description=<value>  Description of snapshot.\n\n    Use this description to document the contents of the snapshot. We suggest\n    that you include a reference point, such as a version control system tag or\n    commit ID\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_146.txt"}}],["a3684ea3-d4dc-4ef5-b5a4-cbf94a7248fb",{"pageContent":"\n\nDelete a scratch org snapshot.\n\nUSAGE\n  $ sfdx org delete snapshot -v <value> -s <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -s, --snapshot=<value>        (required) Name or ID of snapshot to delete.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete a scratch org snapshot.\n\n  Dev Hub admins can delete any snapshot, while users can delete only their own\n  unless a Dev Hub admin gives the user Modify All permissions.\n\nALIASES\n  $ sfdx force org snapshot delete\n\nEXAMPLES\n  Delete a snapshot from the default Dev Hub using the snapshot ID:\n\n    $ sfdx org delete snapshot --snapshot 0Oo...\n\n  Delete a snapshot from the specified Dev Hub using the snapshot name:\n\n    $ sfdx org delete snapshot --snapshot BaseSnapshot --target-dev-hub \\\n      SnapshotDevHub\n\nFLAG DESCRIPTIONS\n  -s, --snapshot=<value>  Name or ID of snapshot to delete.\n\n    The IDs of scratch org snapshots start with 0Oo\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_147.txt"}}],["408415b0-57c3-42e9-9f31-d7bb7b17a467",{"pageContent":"\n\nGet details about a scratch org snapshot.\n\nUSAGE\n  $ sfdx org get snapshot -v <value> -s <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -s, --snapshot=<value>        (required) Name or ID of snapshot to retrieve.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Get details about a scratch org snapshot.\n\n  Snapshot creation can take a while. Use this command with the snapshot name or\n  ID to check its creation status. After the status changes to Active, you can\n  use the snapshot to create scratch orgs.\n\n  To create a snapshot, use the \"sfdx org create snapshot\" command. To retrieve\n  a list of all snapshots, use \"sfdx org list snapshot\".\n\nALIASES\n  $ sfdx force org snapshot get\n\nEXAMPLES\n  Get snapshot details using its ID and the default Dev Hub org:\n\n    $ sfdx org get snapshot --snapshot 0Oo...\n\n  Get snapshot details using its name from a Dev Hub org with alias\n  SnapshotDevHub:\n\n    $ sfdx org get snapshot --snapshot Dependencies --target-dev-hub \\\n      SnapshotDevHub\n\nFLAG DESCRIPTIONS\n  -s, --snapshot=<value>  Name or ID of snapshot to retrieve.\n\n    The IDs of scratch org snapshots start with 0Oo\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_148.txt"}}],["d9df2bfe-63e5-44e8-871c-20ce7c91a091",{"pageContent":"\n\nList scratch org snapshots.\n\nUSAGE\n  $ sfdx org list snapshot -v <value> [--json] [--api-version <value>]\n\nFLAGS\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List scratch org snapshots.\n\n  You can view all the snapshots in a Dev Hub that you have access to. If you’re\n  an admin, you can see all snapshots associated with the Dev Hub org. If you’re\n  a user, you can see only your snapshots unless a Dev Hub admin gives you View\n  All permissions.\n\n  To create a snapshot, use the \"sfdx org create snapshot\" command. To get\n  details about a snapshot request, use \"sfdx org get snapshot\".\n\nALIASES\n  $ sfdx force org snapshot list\n\nEXAMPLES\n  List snapshots in the default Dev Hub:\n\n    $ sfdx org list snapshot\n\n  List snapshots in the Dev Hub with alias SnapshotDevHub:\n\n    $ sfdx org list snapshot --target-dev-hub SnapshotDevHub\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_149.txt"}}],["5d54346b-97ce-4791-a524-17a129dbdf35",{"pageContent":"\n\nLog in to a Salesforce org using a JSON web token (JWT).\n\nUSAGE\n  $ sfdx auth jwt grant -o <value> -f <value> -i <value> [--json] [-r\n    <value>] [-d] [-s] [-a <value>]\n\nFLAGS\n  -a, --alias=<value>         Alias for the org.\n  -d, --set-default-dev-hub   Set the authenticated org as the default Dev Hub.\n  -f, --jwt-key-file=<value>  (required) Path to a file containing the private\n                              key.\n  -i, --client-id=<value>     (required) OAuth client ID (also called consumer\n                              key) of your custom connected app.\n  -o, --username=<value>      (required) Username of the user logging in.\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n  -s, --set-default           Set the authenticated org as the default that all\n                              org-related commands run against.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Log in to a Salesforce org using a JSON web token (JWT).\n\n  Use this command in automated environments where you can’t interactively log\n  in with a browser, such as in CI/CD scripts.\n\n  Logging into an org authorizes the CLI to run other commands that connect to\n  that org, such as deploying or retrieving a project. You can log into many\n  types of orgs, such as sandboxes, Dev Hubs, Env Hubs, production orgs, and\n  scratch orgs.\n\n  Complete these steps before you run this command:\n\n  1. Create a digital certificate (also called digital signature) and the\n  private key to sign the certificate. You can use your own key and certificate\n  issued by a certification authority. Or use OpenSSL to create a key and a\n  self-signed digital certificate.\n  2. Store the private key in a file on your computer. When you run this\n  command, you set the --jwt-key-file flag to this file.\n  3. Create a custom connected app in your org using the digital certificate.\n  Make note of the consumer key (also called client id) that’s generated for\n  you. Be sure the username of the user logging in is approved to use the\n  connected app. When you run this command, you set the --client-id flag to the\n  consumer key.\n\n  See https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/s\n  fdx_dev_auth_jwt_flow.htm for more information.\n\n  We recommend that you set an alias when you log into an org. Aliases make it\n  easy to later reference this org when running commands that require it. If you\n  don’t set an alias, you use the username that you specified when you logged in\n  to the org. If you run multiple commands that reference the same org, consider\n  setting the org as your default. Use --set-default for your default scratch\n  org or sandbox, or --set-default-dev-hub for your default Dev Hub.\n\nALIASES\n  $ sfdx force auth jwt grant\n  $ sfdx auth jwt grant\n\nEXAMPLES\n  Log into an org with username jdoe@example.org and on the default instance\n  URL (https://login.salesforce.org). The private key is stored in the file\n  /Users/jdoe/JWT/server.key and the command uses the connected app with\n  consumer key (client id) 04580y4051234051.\n\n    $ sfdx auth jwt grant --username jdoe@example.org --jwt-key-file \\\n      /Users/jdoe/JWT/server.key --client-id 04580y4051234051\n\n  Set the org as the default and give it an alias:\n\n    $ sfdx auth jwt grant --username jdoe@example.org --jwt-key-file \\\n      /Users/jdoe/JWT/server.key --client-id 04580y4051234051 --alias ci-org \\\n      --set-default\n\n  Set the org as the default Dev Hub and give it an alias:\n\n    $ sfdx auth jwt grant --username jdoe@example.org --jwt-key-file \\\n      /Users/jdoe/JWT/server.key --client-id 04580y4051234051 --alias \\\n      ci-dev-hub --set-default-dev-hub\n\n  Log in to a sandbox using URL\n  https://MyDomainName--SandboxName.sandbox.my.salesforce.com:\n\n    $ sfdx auth jwt grant --username jdoe@example.org --jwt-key-file \\\n      /Users/jdoe/JWT/server.key --client-id 04580y4051234051 --alias ci-org \\\n      --set-default --instance-url \\\n      https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\nFLAG DESCRIPTIONS\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n\n    If you specify an --instance-url value, this value overrides the\n    sfdcLoginUrl value in your sfdx-project.json file.\n\n    To specify a My Domain URL, use the format\n    https://yourcompanyname.my.salesforce.com.\n\n    To specify a sandbox, set --instance-url to\n    https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_15.txt"}}],["ecea3db7-9ecf-46d9-b170-8965c24f8b4e",{"pageContent":"\n\nThe \"force org status\" command has been deprecated and will be removed in version 60.0. Use \"org:resume:sandbox\" instead.\nCheck the status of a sandbox, and if complete, authenticate to it.\n\nUSAGE\n  $ sfdx force org status -o <value> -n <value> [--json] [--api-version\n    <value>] [-s] [-a <value>] [-w <value>]\n\nFLAGS\n  -a, --setalias=<value>     Alias for the created or cloned org.\n  -n, --sandboxname=<value>  (required) Name of the sandbox org to check status\n                             for.\n  -o, --target-org=<value>   (required) Username or alias of the target org.\n  -s, --setdefaultusername   Set the created or cloned org as your default.\n  -w, --wait=<value>         [default: 6 minutes] Number of minutes to wait\n                             while polling for status.\n  --api-version=<value>      Override the api version used for api requests made\n                             by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Check the status of a sandbox, and if complete, authenticate to it.\n\n  Use this command to check the status of your sandbox creation or clone and, if\n  the sandbox is ready, authenticate to it.\n\n  Use the --wait (-w) parameter to specify the number of minutes that the\n  command waits for the sandbox creation or clone to complete before returning\n  control of the terminal to you.\n\n  Set the --target-org (-o) parameter to the username or alias of the production\n  org that contains the sandbox license.\n\nEXAMPLES\n  $ sfdx force org status --sandboxname DevSbx1 --setalias MySandbox -u prodOrg\n\n  $ sfdx force org status --sandboxname DevSbx1 --wait 45 --setdefaultusername -u prodOrg\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_150.txt"}}],["d06cfc52-87b8-42d4-ba0e-069353a4f3ec",{"pageContent":"\n\nCreate a first-generation package version in the release org.\n\nUSAGE\n  $ sfdx package1 version create -o <value> -i <value> -n <value> [--json]\n    [--api-version <value>] [-d <value>] [-v <value>] [-m] [-r <value>] [-p\n    <value>] [-k <value>] [-w <value>]\n\nFLAGS\n  -d, --description=<value>        Package version description.\n  -i, --package-id=<value>         (required) ID of the metadata package (starts\n                                   with 033) of which you’re creating a new\n                                   version.\n  -k, --installation-key=<value>   Installation key for key-protected package\n                                   (default: null).\n  -m, --managed-released           Create a managed package version.\n  -n, --name=<value>               (required) Package version name.\n  -o, --target-org=<value>         (required) Username or alias of the target\n                                   org.\n  -p, --post-install-url=<value>   Post install URL.\n  -r, --release-notes-url=<value>  Release notes URL.\n  -v, --version=<value>            Package version in major.minor format, for\n                                   example, 3.2.\n  -w, --wait=<value>               Minutes to wait for the package version to be\n                                   created (default: 2 minutes).\n  --api-version=<value>            Override the api version used for api\n                                   requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a first-generation package version in the release org.\n\n  The package version is based on the contents of the specified metadata\n  package. Omit --managed-released if you want to create an unmanaged package\n  version.\n\nALIASES\n  $ sfdx force package1 beta version create\n  $ sfdx force package1 version create\n\nEXAMPLES\n  Create a first-generation package version from the package with the\n  specified ID and name the package version \"example\"; use your default org:\n\n    $ sfdx package1 version create --package-id 033... --name example\n\n  Same as previous example, but provide a description and wait for 30 minutes\n  for the package version to be created; use the specified org:\n\n    $ sfdx package1 version create --package-id 033... --name example \\\n      --description \"example description\" --wait 30 --target-org \\\n      myorg@example.com\n\nFLAG DESCRIPTIONS\n  -m, --managed-released  Create a managed package version.\n\n    To create a beta version, don’t include this parameter.\n\n  -p, --post-install-url=<value>  Post install URL.\n\n    The contents of the post-installation instructions URL are displayed in the\n    UI after installation of the package version.\n\n  -r, --release-notes-url=<value>  Release notes URL.\n\n    This link is displayed in the package installation UI to provide release\n    notes for this package version to subscribers.\n\nCOMMANDS\n  package1 version create get  Retrieve the status of a package version creation\n                               request\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_151.txt"}}],["0c49fdf5-1ec3-4ac9-91be-94ccc4b10f36",{"pageContent":"\n\nRetrieve the status of a package version creation request.\n\nUSAGE\n  $ sfdx package1 version create get -o <value> -i <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -i, --request-id=<value>  (required) ID of the PackageUploadRequest (starts\n                            with 0HD).\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package1 beta version create get\n  $ sfdx force package1 version create get\n\nEXAMPLES\n  Get the status of the creation request for the package version with the\n  specified ID in your default org:\n\n    $ sfdx package1 version create get --request-id 0HD...\n\n  Same as previous example, but use the specified org:\n\n    $ sfdx package1 version create get --request-id 0HD... --target-org \\\n      myorg@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_152.txt"}}],["9eafa2ec-806b-4693-8dac-df628cef0465",{"pageContent":"\n\nDisplay details about a first-generation package version.\n\nUSAGE\n  $ sfdx package1 version display -o <value> -i <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -i, --package-version-id=<value>  (required) ID (starts with 04t) of the\n                                    metadata package version whose details you\n                                    want to display.\n  -o, --target-org=<value>          (required) Username or alias of the target\n                                    org.\n  --api-version=<value>             Override the api version used for api\n                                    requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package1 beta version display\n  $ sfdx force package1 version display\n\nEXAMPLES\n  Display details about the first-generation package version with the\n  specified ID in your default org:\n\n    $ sfdx package1 version display --package-version-id 04t...\n\n  Same as previous example, but use the specified org:\n\n    $ sfdx package1 version display --package-version-id 04t... --target-org \\\n      myorg@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_153.txt"}}],["8861df30-df2e-4b29-aa89-1c82d8a16ccd",{"pageContent":"\n\nList package versions for the specified first-generation package or for the org.\n\nUSAGE\n  $ sfdx package1 version list -o <value> [--json] [--api-version <value>] [-i\n    <value>]\n\nFLAGS\n  -i, --package-id=<value>  Metadata package ID (starts with 033) whose package\n                            versions you want to list.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package1 beta version list\n  $ sfdx force package1 version list\n\nEXAMPLES\n  List all first-generation package versions in your default org:\n\n    $ sfdx package1 version list\n\n  List package versions for the specified first-generation package in the\n  specifief org:\n\n    $ sfdx package1 version list --package-id 033... --target-org \\\n      myorg@example.com\n\nFLAG DESCRIPTIONS\n  -i, --package-id=<value>\n\n    Metadata package ID (starts with 033) whose package versions you want to\n    list.\n\n    If not specified, shows all versions for all packages (managed and\n    unmanaged) in the org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_154.txt"}}],["b6da1132-6b7a-47cb-9b00-5ef85e203a04",{"pageContent":"\n\nCreate a first-generation package version in the release org.\n\nUSAGE\n  $ sfdx package1 version create -o <value> -i <value> -n <value> [--json]\n    [--api-version <value>] [-d <value>] [-v <value>] [-m] [-r <value>] [-p\n    <value>] [-k <value>] [-w <value>]\n\nFLAGS\n  -d, --description=<value>        Package version description.\n  -i, --package-id=<value>         (required) ID of the metadata package (starts\n                                   with 033) of which you’re creating a new\n                                   version.\n  -k, --installation-key=<value>   Installation key for key-protected package\n                                   (default: null).\n  -m, --managed-released           Create a managed package version.\n  -n, --name=<value>               (required) Package version name.\n  -o, --target-org=<value>         (required) Username or alias of the target\n                                   org.\n  -p, --post-install-url=<value>   Post install URL.\n  -r, --release-notes-url=<value>  Release notes URL.\n  -v, --version=<value>            Package version in major.minor format, for\n                                   example, 3.2.\n  -w, --wait=<value>               Minutes to wait for the package version to be\n                                   created (default: 2 minutes).\n  --api-version=<value>            Override the api version used for api\n                                   requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a first-generation package version in the release org.\n\n  The package version is based on the contents of the specified metadata\n  package. Omit --managed-released if you want to create an unmanaged package\n  version.\n\nALIASES\n  $ sfdx force package1 beta version create\n  $ sfdx force package1 version create\n\nEXAMPLES\n  Create a first-generation package version from the package with the\n  specified ID and name the package version \"example\"; use your default org:\n\n    $ sfdx package1 version create --package-id 033... --name example\n\n  Same as previous example, but provide a description and wait for 30 minutes\n  for the package version to be created; use the specified org:\n\n    $ sfdx package1 version create --package-id 033... --name example \\\n      --description \"example description\" --wait 30 --target-org \\\n      myorg@example.com\n\nFLAG DESCRIPTIONS\n  -m, --managed-released  Create a managed package version.\n\n    To create a beta version, don’t include this parameter.\n\n  -p, --post-install-url=<value>  Post install URL.\n\n    The contents of the post-installation instructions URL are displayed in the\n    UI after installation of the package version.\n\n  -r, --release-notes-url=<value>  Release notes URL.\n\n    This link is displayed in the package installation UI to provide release\n    notes for this package version to subscribers.\n\nCOMMANDS\n  package1 version create get  Retrieve the status of a package version creation\n                               request\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_155.txt"}}],["d213a068-5d18-4638-b450-09b2da759f4c",{"pageContent":"\n\nRetrieve the status of a package version creation request.\n\nUSAGE\n  $ sfdx package1 version create get -o <value> -i <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -i, --request-id=<value>  (required) ID of the PackageUploadRequest (starts\n                            with 0HD).\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package1 beta version create get\n  $ sfdx force package1 version create get\n\nEXAMPLES\n  Get the status of the creation request for the package version with the\n  specified ID in your default org:\n\n    $ sfdx package1 version create get --request-id 0HD...\n\n  Same as previous example, but use the specified org:\n\n    $ sfdx package1 version create get --request-id 0HD... --target-org \\\n      myorg@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_156.txt"}}],["ac3485bc-9b65-4be7-a3b7-a4ef50f94069",{"pageContent":"\n\nDisplay details about a first-generation package version.\n\nUSAGE\n  $ sfdx package1 version display -o <value> -i <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -i, --package-version-id=<value>  (required) ID (starts with 04t) of the\n                                    metadata package version whose details you\n                                    want to display.\n  -o, --target-org=<value>          (required) Username or alias of the target\n                                    org.\n  --api-version=<value>             Override the api version used for api\n                                    requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package1 beta version display\n  $ sfdx force package1 version display\n\nEXAMPLES\n  Display details about the first-generation package version with the\n  specified ID in your default org:\n\n    $ sfdx package1 version display --package-version-id 04t...\n\n  Same as previous example, but use the specified org:\n\n    $ sfdx package1 version display --package-version-id 04t... --target-org \\\n      myorg@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_157.txt"}}],["4d62592e-ec35-4eda-af8e-e71cf41f831a",{"pageContent":"\n\nList package versions for the specified first-generation package or for the org.\n\nUSAGE\n  $ sfdx package1 version list -o <value> [--json] [--api-version <value>] [-i\n    <value>]\n\nFLAGS\n  -i, --package-id=<value>  Metadata package ID (starts with 033) whose package\n                            versions you want to list.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package1 beta version list\n  $ sfdx force package1 version list\n\nEXAMPLES\n  List all first-generation package versions in your default org:\n\n    $ sfdx package1 version list\n\n  List package versions for the specified first-generation package in the\n  specifief org:\n\n    $ sfdx package1 version list --package-id 033... --target-org \\\n      myorg@example.com\n\nFLAG DESCRIPTIONS\n  -i, --package-id=<value>\n\n    Metadata package ID (starts with 033) whose package versions you want to\n    list.\n\n    If not specified, shows all versions for all packages (managed and\n    unmanaged) in the org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_158.txt"}}],["529c3b3d-8627-4dce-92d1-339f6909437c",{"pageContent":"\n\nCreate a package.\n\nUSAGE\n  $ sfdx package create -v <value> -n <value> -t Managed|Unlocked -r <value>\n    [--json] [--api-version <value>] [-d <value>] [-e] [--org-dependent] [-o\n    <value>]\n\nFLAGS\n  -d, --description=<value>                  Description of the package.\n  -e, --no-namespace                         Create the package with no\n                                             namespace; available only for\n                                             unlocked packages.\n  -n, --name=<value>                         (required) Name of the package to\n                                             create.\n  -o, --error-notification-username=<value>  Active Dev Hub user designated to\n                                             receive email notifications for\n                                             package errors.\n  -r, --path=<value>                         (required) Path to directory that\n                                             contains the contents of the\n                                             package.\n  -t, --package-type=<option>                (required) Type of package.\n                                             <options: Managed|Unlocked>\n  -v, --target-dev-hub=<value>               (required) Username or alias of the\n                                             Dev Hub org.\n  --api-version=<value>                      Override the api version used for\n                                             api requests made by this command\n  --org-dependent                            Depends on unpackaged metadata in\n                                             the installation org; applies to\n                                             unlocked packages only.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a package.\n\n  First, use this command to create a package. Then create a package version.\n\n  If you don’t have a namespace defined in your sfdx-project.json file, use\n  --no-namespace.\n\n  Your --name value must be unique within your namespace.\n\n  Run 'sfdx package list to list all packages in the Dev Hub org.\n\nALIASES\n  $ sfdx force package beta create\n  $ sfdx force package create\n\nEXAMPLES\n  Create an unlocked package from the files in the \"force-app\" directory; uses\n  your default Dev Hub org:\n\n    $ sfdx package create --name MyUnlockedPackage --package-type Unlocked \\\n      --path force-app\n\n  Create a managed packaged from the \"force-app\" directory files, give the\n  package a description, and use the specified Dev Hub org:\n\n    $ sfdx package create --name MyManagedPackage --description \"Your \\\n      Package Descripton\" --package-type Managed --path force-app \\\n      --target-dev-hub devhub@example.com\n\nFLAG DESCRIPTIONS\n  -e, --no-namespace\n\n    Create the package with no namespace; available only for unlocked packages.\n\n    This flag is useful when you’re migrating an existing org to packages. But\n    use a namespaced package for new metadata.\n\n  -o, --error-notification-username=<value>\n\n    Active Dev Hub user designated to receive email notifications for package\n    errors.\n\n    Email notifications include information about unhandled Apex exceptions, and\n    install, upgrade, or uninstall failures associated with your package.\n\n  -t, --package-type=Managed|Unlocked  Type of package.\n\n    The options for package type are Managed and Unlocked\n    (Managed=DeveloperManagedSubscriberManaged,\n    Unlocked=DeveloperControlledSubscriberEditable). These options determine\n    upgrade and editability rules.\n\n  --org-dependent\n\n    Depends on unpackaged metadata in the installation org; applies to unlocked\n    packages only.\n\n    Use Source Tracking in Sandboxes to develop your org-dependent unlocked\n    package. For more information, see \"Create Org-Dependent Unlocked Packages\"\n    in the Salesforce DX Developer Guide\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_159.txt"}}],["9862a4ea-e4aa-44db-87cf-58596302aa05",{"pageContent":"\n\nList authorization information about the orgs you created or logged into.\n\nUSAGE\n  $ sfdx auth list [--json]\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List authorization information about the orgs you created or logged into.\n\n  This command uses local authorization information that Salesforce CLI caches\n  when you create a scratch org or log into an org. The command doesn't actually\n  connect to the orgs to verify that they're still active. As a result, this\n  command executes very quickly. If you want to view live information about your\n  authorized orgs, such as their connection status, use the \"org list\" command.\n\nALIASES\n  $ sfdx force auth list\n  $ sfdx auth list\n\nEXAMPLES\n  List local authorization information about your orgs:\n\n    $ sfdx auth list\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_16.txt"}}],["1f231f84-e4fe-4168-a4b8-c7fa7b472955",{"pageContent":"\n\nDelete a package.\n\nUSAGE\n  $ sfdx package delete -v <value> -p <value> [--json] [--api-version\n    <value>] [-n]\n\nFLAGS\n  -n, --no-prompt               Don’t prompt before deleting the package.\n  -p, --package=<value>         (required) ID (starts with 0Ho) or alias of the\n                                package to delete.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete a package.\n\n  Specify the ID or alias of the package you want to delete.\n\n  Delete unlocked and second-generation managed packages. Before you delete a\n  package, first delete all associated package versions.\n\nALIASES\n  $ sfdx force package beta delete\n  $ sfdx force package delete\n\nEXAMPLES\n  Delete a package using its alias from your default Dev Hub org:\n\n    $ sfdx package delete --package \"Your Package Alias\"\n\n  Delete a package using its ID from the specified Dev Hub org:\n\n    $ sfdx package delete --package 0Ho... --target-dev-hub \\\n      devhub@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_160.txt"}}],["a36d19f0-c9b6-4ba3-b62c-32e28d9b639e",{"pageContent":"\n\nInstall a version of a package in the target org.\n\nUSAGE\n  $ sfdx package install -o <value> -p <value> [--json] [--api-version\n    <value>] [-w <value>] [-k <value>] [-b <value>] [-r] [-a all|package] [-s\n    AllUsers|AdminsOnly] [-t DeprecateOnly|Mixed|Delete]\n\nFLAGS\n  -a, --apex-compile=<option>\n      [default: all] Compile all Apex in the org and package, or only Apex in the\n      package; unlocked packages only.\n      <options: all|package>\n\n  -b, --publish-wait=<value>\n      [default: 0 minutes] Maximum number of minutes to wait for the Subscriber\n      Package Version ID to become available in the target org before canceling\n      the install request.\n\n  -k, --installation-key=<value>\n      Installation key for key-protected package (default: null).\n\n  -o, --target-org=<value>\n      (required) Username or alias of the target org.\n\n  -p, --package=<value>\n      (required) ID (starts with 04t) or alias of the package version to install.\n\n  -r, --no-prompt\n      Don't prompt for confirmation.\n\n  -s, --security-type=<option>\n      [default: AdminsOnly] Security access type for the installed package.\n      (deprecation notice: The default --security-type value will change from\n      AllUsers to AdminsOnly in v47.0 or later.)\n      <options: AllUsers|AdminsOnly>\n\n  -t, --upgrade-type=<option>\n      [default: Mixed] Upgrade type for the package installation; available only\n      for unlocked packages.\n      <options: DeprecateOnly|Mixed|Delete>\n\n  -w, --wait=<value>\n      [default: 0 minutes] Number of minutes to wait for installation status.\n\n  --api-version=<value>\n      Override the api version used for api requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Install a version of a package in the target org.\n\n  To install a package, specify a specific version of the package using the 04t\n  package ID. The package and the version you specified installs in your default\n  target org unless you supply the username for a different target org.\n\n  For package upgrades, to specify options for component deprecation or deletion\n  of removed components, include an --upgrade-type value. To delete components\n  that can be safely deleted and deprecate the others, specify --upgrade-type\n  Mixed (the default). To deprecate all removed components, specify\n  --upgrade-type DeprecateOnly. To delete all removed components, except for\n  custom objects and custom fields, that don't have dependencies, specify\n  --upgrade-type Delete. (Note: This option can result in the loss of data that\n  is associated with the deleted components.) The default is Mixed.\n\nALIASES\n  $ sfdx force package beta install\n  $ sfdx force package install\n\nEXAMPLES\n  Install a package version with the specified ID in the org with username\n  \"me@example.com\":\n\n    $ sfdx package install --package 04t... --target-org me@example.com\n\n  Install a package version with the specified alias into your default org:\n\n    $ sfdx package install --package awesome_package_alias\n\n  Install a package version with an alias that includes spaces into your\n  default org:\n\n    $ sfdx package install --package \"Awesome Package Alias\"\n\n  Install an unlocked package version with the specified ID and deprecate all\n  removed components:\n\n    $ sfdx package install --package 04t... --upgrade-type DeprecateOnly\n\nFLAG DESCRIPTIONS\n  -a, --apex-compile=all|package\n\n    Compile all Apex in the org and package, or only Apex in the package;\n    unlocked packages only.\n\n    Applies to unlocked packages only. Specifies whether to compile all Apex in\n    the org and package, or only the Apex in the package.\n\n    For package installs into production orgs, or any org that has Apex Compile\n    on Deploy enabled, the platform compiles all Apex in the org after the\n    package install or upgrade operation completes.\n\n    This approach assures that package installs and upgrades don’t impact the\n    performance of an org, and is done even if --apex-compile package is\n    specified.\n\n  -r, --no-prompt  Don't prompt for confirmation.\n\n    Allows the following without an explicit confirmation response: 1) Remote\n    Site Settings and Content Security Policy websites to send or receive data,\n    and 2) --upgrade-type Delete to proceed.\n\n  -t, --upgrade-type=DeprecateOnly|Mixed|Delete\n\n    Upgrade type for the package installation; available only for unlocked\n    packages.\n\n    For package upgrades, specifies whether to mark all removed components as\n    deprecated (DeprecateOnly), to delete removed components that can be safely\n    deleted and deprecate the others (Mixed), or to delete all removed\n    components, except for custom objects and custom fields, that don't have\n    dependencies (Delete). The default is Mixed. Can specify DeprecateOnly or\n    Delete only for unlocked package upgrades.\n\nCOMMANDS\n  package install report  Retrieve the status of a package installation request\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_161.txt"}}],["78a10c93-9710-42a6-b0e3-9a6da89a3a9e",{"pageContent":"\n\nRetrieve the status of a package installation request.\n\nUSAGE\n  $ sfdx package install report -o <value> -i <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -i, --request-id=<value>  (required) ID of the package install request you\n                            want to check; starts with 0Hf.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package beta install report\n  $ sfdx force package install report\n\nEXAMPLES\n  Retrieve the status of a package installation request with the specified ID\n  on your default org:\n\n    $ sfdx package install report --request-id 0Hf...\n\n  Similar to previous example, except use the org with username\n  me@example.com:\n\n    $ sfdx package install report --request-id 0Hf... --target-org \\\n      me@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_162.txt"}}],["d97ff068-0216-409b-8654-931472701c7e",{"pageContent":"\n\nList the org’s installed packages.\n\nUSAGE\n  $ sfdx package installed list -o <value> [--json] [--api-version <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package beta installed list\n  $ sfdx force package installed list\n\nEXAMPLES\n  List the installed packages in your default org:\n\n    $ sfdx package installed list\n\n  List the installed packages in the org with username me@example.com:\n\n    $ sfdx package installed list --target-org me@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_163.txt"}}],["66859ecf-6466-419d-be40-432afb922413",{"pageContent":"\n\nList all packages in the Dev Hub org.\n\nUSAGE\n  $ sfdx package list -v <value> [--json] [--api-version <value>]\n    [--verbose]\n\nFLAGS\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n  --verbose                     Display extended package detail.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List all packages in the Dev Hub org.\n\n  Description\n\nALIASES\n  $ sfdx force package beta list\n  $ sfdx force package list\n\nEXAMPLES\n  List all packages in the specified Dev Hub org:\n\n    $ sfdx package list --target-dev-hub devhub@example.com\n\n  List all packages details in the specified Dev Hub org, and show extended\n  details about each package:\n\n    $ sfdx package list --target-dev-hub devhub@example.com --verbose\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_164.txt"}}],["8a6194ce-c1c5-4f2f-8d4e-527350af62f1",{"pageContent":"\n\nUninstall a second-generation package from the target org.\n\nUSAGE\n  $ sfdx package uninstall -o <value> -p <value> [--json] [--api-version\n    <value>] [-w <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -p, --package=<value>     (required) ID (starts with 04t) or alias of the\n                            package version to uninstall.\n  -w, --wait=<value>        [default: 0 minutes] Number of minutes to wait for\n                            uninstall status.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Uninstall a second-generation package from the target org.\n\n  Specify the package ID for a second-generation package.\n\n  To list the org’s installed packages, run \"sfdx package installed list\".\n\n  To uninstall a first-generation package, from Setup, enter Installed Packages\n  in the Quick Find box, then select Installed Packages.\n\nALIASES\n  $ sfdx force package beta uninstall\n  $ sfdx force package uninstall\n\nEXAMPLES\n  Uninstall a package with specified ID from an org with username\n  me@example.com:\n\n    $ sfdx package uninstall --package 04t... --target-org me@example.com\n\n  Uninstall a package with the specified alias from your default org:\n\n    $ sfdx package uninstall --package undesirable_package_alias\n\n  Uninstall a package with an alias that contains spaces from your default\n  org:\n\n    $ sfdx package uninstall --package \"Undesirable Package Alias\"\n\nCOMMANDS\n  package uninstall report  Retrieve the status of a package uninstall request\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_165.txt"}}],["de501a81-4221-4802-a866-3bb67fb35b2c",{"pageContent":"\n\nRetrieve the status of a package uninstall request.\n\nUSAGE\n  $ sfdx package uninstall report -o <value> -i <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -i, --request-id=<value>  (required) ID of the package uninstall request you\n                            want to check; starts with 06y.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package beta uninstall report\n  $ sfdx force package uninstall report\n\nEXAMPLES\n  Retrieve the status of a package uninstall in your default org using the\n  specified request ID:\n\n    $ sfdx package uninstall report --request-id 06y...\n\n  Similar to previous example, but use the org with username me@example.com:\n\n    $ sfdx package uninstall report --request-id 06y... --target-org \\\n      me@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_166.txt"}}],["81800308-2f9f-406b-96e8-ce991155b0a1",{"pageContent":"\n\nUpdate package details.\n\nUSAGE\n  $ sfdx package update -v <value> -p <value> [--json] [--api-version\n    <value>] [-n <value>] [-d <value>] [-o <value>]\n\nFLAGS\n  -d, --description=<value>                  New description of the package.\n  -n, --name=<value>                         New name of the package.\n  -o, --error-notification-username=<value>  Active Dev Hub user designated to\n                                             receive email notifications for\n                                             package errors.\n  -p, --package=<value>                      (required) ID (starts with 0Ho) or\n                                             alias of the package to update.\n  -v, --target-dev-hub=<value>               (required) Username or alias of the\n                                             Dev Hub org.\n  --api-version=<value>                      Override the api version used for\n                                             api requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Update package details.\n\n  Specify a new value for each option you want to update.\n\n  Run \"sfdx package list\" to list all packages in the Dev Hub org.\n\nALIASES\n  $ sfdx force package beta update\n  $ sfdx force package update\n\nEXAMPLES\n  Update the name of the package with the specified alias; uses your default\n  Dev Hub org:\n\n    $ sfdx package update --package \"Your Package Alias\" --name \"New Package \\\n      Name\"\n\n  Update the description of the package with the specified ID; uses the\n  specified Dev Hub org:\n\n    $ sfdx package update --package 0Ho... --description \"New Package \\\n      Description\" --target-dev-hub devhub@example.com\n\nFLAG DESCRIPTIONS\n  -o, --error-notification-username=<value>\n\n    Active Dev Hub user designated to receive email notifications for package\n    errors.\n\n    Email notifications include information about unhandled Apex exceptions, and\n    install, upgrade, or uninstall failures associated with your package\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_167.txt"}}],["06d3d63e-5cc4-459c-868e-3321443dd305",{"pageContent":"\n\nCreate a package version in the Dev Hub org.\n\nUSAGE\n  $ sfdx package version create -v <value> [--json] [--api-version <value>] [-b\n    <value>] [-c | --skip-validation] [-f <value>] [-k <value>] [-x] [-p\n    <value>] [-d <value>] [--post-install-script <value>] [--post-install-url\n    <value>] [--releasenotes-url <value>] [--skip-ancestor-check] [-t <value>]\n    [--uninstall-script <value>] [-e <value>] [-a <value>] [-n <value>] [-w\n    <value>] [--language <value>] [--verbose]\n\nFLAGS\n  -a, --version-name=<value>         Name of the package version to be created;\n                                     overrides the sfdx-project.json value.\n  -b, --branch=<value>               Name of the branch in your source control\n                                     system that the package version is based\n                                     on.\n  -c, --code-coverage                Calculate and store the code coverage\n                                     percentage by running the packaged Apex\n                                     tests included in this package version.\n  -d, --path=<value>                 Path to the directory that contains the\n                                     contents of the package.\n  -e, --version-description=<value>  Description of the package version to be\n                                     created; overrides the sfdx-project.json\n                                     value.\n  -f, --definition-file=<value>      Path to a definition file similar to\n                                     scratch org definition file that contains\n                                     the list of features and org preferences\n                                     that the metadata of the package version\n                                     depends on.\n  -k, --installation-key=<value>     Installation key for key-protected package.\n                                     (either --installation-key or\n                                     --installation-key-bypass is required)\n  -n, --version-number=<value>       Version number of the package version to be\n                                     created; overrides the sfdx-project.json\n                                     value.\n  -p, --package=<value>              ID (starts with 0Ho) or alias of the\n                                     package to create a version of.\n  -t, --tag=<value>                  Package version’s tag.\n  -v, --target-dev-hub=<value>       (required) Username or alias of the Dev Hub\n                                     org.\n  -w, --wait=<value>                 [default: 0 minutes] Number of minutes to\n                                     wait for the package version to be created.\n  -x, --installation-key-bypass      Bypass the installation key requirement.\n                                     (either --installation-key or\n                                     --installation-key-bypass is required)\n  --api-version=<value>              Override the api version used for api\n                                     requests made by this command\n  --language=<value>                 Language for the package.\n  --post-install-script=<value>      Name of the post-install script; applies to\n                                     managed packages only.\n  --post-install-url=<value>         Post-install instructions URL.\n  --releasenotes-url=<value>         Release notes URL.\n  --skip-ancestor-check              Overrides ancestry requirements, which\n                                     allows you to specify a package ancestor\n                                     that isn’t the highest released package\n                                     version.\n  --skip-validation                  Skip validation during package version\n                                     creation; you can’t promote unvalidated\n                                     package versions.\n  --uninstall-script=<value>         Uninstall script name; applies to managed\n                                     packages only.\n  --verbose                          Display verbose command output.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a package version in the Dev Hub org.\n\n  The package version is based on the package contents in the specified\n  directory.\n\n  To retrieve details about a package version create request, including status\n  and package version ID (04t), run \"sfdx package version create report -i\n  08c...\".\n\n  We recommend that you specify the --installation-key parameter to protect the\n  contents of your package and to prevent unauthorized installation of your\n  package.\n\n  To list package version creation requests in the org, run \"sfdx package\n  version create list\".\n  To promote a package version to released, you must use the --code-coverage\n  parameter. The package must also meet the code coverage requirements. This\n  requirement applies to both managed and unlocked packages.\n\n  We don’t calculate code coverage for org-dependent unlocked packages, or for\n  package versions that specify --skip-validation.\n\nALIASES\n  $ sfdx force package beta version create\n  $ sfdx force package version create\n\nEXAMPLES\n  Create a package version from the contents of the \"common\" directory and\n  give it an installation key of \"password123\"; uses your default Dev Hub org:\n\n    $ sfdx package version create --path common --installation-key \\\n      password123\n\n  Create a package version from a package with the specified alias; uses the\n  Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version create --package \"Your Package Alias\" \\\n      --installation-key password123 --target-dev-hub devhub@example.com\n\n  Create a package version from a package with the specified ID:\n\n    $ sfdx package version create --package 0Ho... --installation-key \\\n      password123\n\n  Create a package version and skip the validation step:\n\n    $ sfdx package version create --path common --installation-key \\\n      password123 --skip-validation\n\nFLAG DESCRIPTIONS\n  -c, --code-coverage\n\n    Calculate and store the code coverage percentage by running the packaged\n    Apex tests included in this package version.\n\n    Before you can promote and release a managed or unlocked package version,\n    the Apex code must meet a minimum 75% code coverage requirement. We don’t\n    calculate code coverage for org-dependent unlocked packages or for package\n    versions that specify --skip-validation.\n\n  -x, --installation-key-bypass\n\n    Bypass the installation key requirement. (either --installation-key or\n    --installation-key-bypass is required)\n\n    If you bypass this requirement, anyone can install your package.\n\n  --language=<value>  Language for the package.\n\n    Specify the language using a language code listed under \"Supported\n    Languages\" in Salesforce Help. If no language is specified, the language\n    defaults to the language of the Dev Hub user who created the package.\n\n  --post-install-script=<value>\n\n    Name of the post-install script; applies to managed packages only.\n\n    The post-install script is an Apex class within this package that is run in\n    the installing org after installations or upgrades of this package version.\n\n  --post-install-url=<value>  Post-install instructions URL.\n\n    The contents of the post-installation instructions URL are displayed in the\n    UI after installation of the package version.\n\n  --releasenotes-url=<value>  Release notes URL.\n\n    This link is displayed in the package installation UI to provide release\n    notes for this package version to subscribers.\n\n  --skip-validation\n\n    Skip validation during package version creation; you can’t promote\n    unvalidated package versions.\n\n    Skips validation of dependencies, package ancestors, and metadata during\n    package version creation. Skipping validation reduces the time it takes to\n    create a new package version, but you can promote only validated package\n    versions. Skipping validation can suppress important errors that can surface\n    at a later stage. You can specify skip validation or code coverage, but not\n    both. Code coverage is calculated during validation.\n\n  --uninstall-script=<value>\n\n    Uninstall script name; applies to managed packages only.\n\n    The uninstall script is an Apex class within this package that is run in the\n    installing org after uninstallations of this package.\n\n  --verbose  Display verbose command output.\n\n    Display verbose command output. When polling for the status of the creation,\n    this will output status and timeout data on a separate line for each poll\n    request, which is useful in CI systems where timeouts can occur with long\n    periods of no output from commands.\n\nCOMMANDS\n  package version create list    List package version creation requests.\n  package version create report  Retrieve details about a package version\n                                 creation request\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_168.txt"}}],["0a0dd91e-b939-42e8-8229-33aad87f52ef",{"pageContent":"\n\nList package version creation requests.\n\nUSAGE\n  $ sfdx package version create list -v <value> [--json] [--api-version <value>] [-c\n    <value>] [-s Queued|InProgress|Success|Error]\n\nFLAGS\n  -c, --created-last-days=<value>  Number of days since the request was created,\n                                   starting at 00:00:00 of first day to now. Use\n                                   0 for today.\n  -s, --status=<option>            Status of the version creation request, used\n                                   to filter the list.\n                                   <options: Queued|InProgress|Success|Error>\n  -v, --target-dev-hub=<value>     (required) Username or alias of the Dev Hub\n                                   org.\n  --api-version=<value>            Override the api version used for api\n                                   requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List package version creation requests.\n\n  Shows the details of each request to create a package version in the Dev Hub\n  org.\n\n  All filter parameters are applied using the AND logical operator (not OR).\n\n  To get information about a specific request, run \"sfdx package version create\n  report\" and supply the request ID.\n\nALIASES\n  $ sfdx force package beta version create list\n  $ sfdx force package version create list\n\nEXAMPLES\n  List all package version creation requests in your default Dev Hub org:\n\n    $ sfdx package version create list\n\n  List package version creation requests from the last 3 days in the Dev Hub\n  org with username devhub@example.com:\n\n    $ sfdx package version create list --created-last-days 3 \\\n      --target-dev-hub\n\n  List package version creation requests with status Error:\n\n    $ sfdx package version create list --status Error\n\n  List package version creation requests with status InProgress:\n\n    $ sfdx package version create list --status InProgress\n\n  List package version creation requests with status Success that were created\n  today:\n\n    $ sfdx package version create list --created-last-days 0 --status \\\n      Success\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_169.txt"}}],["a37f8c79-49ae-486c-b955-030051ac521a",{"pageContent":"\n\nLog out of a Salesforce org.\n\nUSAGE\n  $ sfdx auth logout [--json] [-a | -o <value>] [-p]\n\nFLAGS\n  -a, --all                 Include all authenticated orgs.\n  -o, --target-org=<value>  Username or alias of the target org.\n  -p, --no-prompt           Don't prompt for confirmation.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Log out of a Salesforce org.\n\n  If you run this command with no flags, it first displays a list of orgs you've\n  created or logged into, with none of the orgs selected. Use the arrow keys to\n  scroll through the list and the space bar to select the orgs you want to log\n  out of. Press Enter when you're done; the command asks for a final\n  confirmation before logging out of the selected orgs.\n\n  The process is similar if you specify --all, except that in the initial list\n  of orgs, they're all selected. Use --target-org to logout of a specific org.\n  In both these cases by default, you must still confirm that you want to log\n  out. Use --no-prompt to never be asked for confirmation when also using --all\n  or --target-org.\n\n  Be careful! If you log out of a scratch org without having access to its\n  password, you can't access the scratch org again, either through the CLI or\n  the Salesforce UI.\n\nALIASES\n  $ sfdx force auth logout\n  $ sfdx auth logout\n\nEXAMPLES\n  Interactively select the orgs to log out of:\n\n    $ sfdx auth logout\n\n  Log out of the org with username me@my.org:\n\n    $ sfdx auth logout --target-org me@my.org\n\n  Log out of all orgs after confirmation:\n\n    $ sfdx auth logout --all\n\n  Logout of the org with alias my-scratch and don't prompt for confirmation:\n\n    $ sfdx auth logout --target-org my-scratch --no-prompt\n\nFLAG DESCRIPTIONS\n  -a, --all  Include all authenticated orgs.\n\n    All orgs includes Dev Hubs, sandboxes, DE orgs, and expired, deleted, and\n    unknown-status scratch orgs\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_17.txt"}}],["befadc3f-3999-495d-a6ad-aa0b053609ce",{"pageContent":"\n\nRetrieve details about a package version creation request.\n\nUSAGE\n  $ sfdx package version create report -v <value> -i <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -i, --package-create-request-id=<value>  (required) ID (starts with 08c) of\n                                           the package version creation request\n                                           you want to display.\n  -v, --target-dev-hub=<value>             (required) Username or alias of the\n                                           Dev Hub org.\n  --api-version=<value>                    Override the api version used for api\n                                           requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Retrieve details about a package version creation request.\n\n  Specify the request ID for which you want to view details. If applicable, the\n  command displays errors related to the request.\n\n  To show all requests in the org, run \"sfdx package version create list\".\n\nALIASES\n  $ sfdx force package beta version create report\n  $ sfdx force package version create report\n\nEXAMPLES\n  Retrieve details about the package version creation request with the\n  specified ID; uses your default Dev Hub org:\n\n    $ sfdx package version create report --package-create-request-id 08c...\n\n  Retrieve details about the specified package version creation request in the\n  Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version create report --package-create-request-id 08c... \\\n      --target-dev-hub devhub@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_170.txt"}}],["e89be0fc-ec3c-4b35-b910-bde97a537b7e",{"pageContent":"\n\nDelete a package version.\n\nUSAGE\n  $ sfdx package version delete -v <value> -p <value> [--json] [--api-version\n    <value>] [-n]\n\nFLAGS\n  -n, --no-prompt               Don’t prompt before deleting the package\n                                version.\n  -p, --package=<value>         (required) ID (starts with 04t) or alias of the\n                                package version to delete.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete a package version.\n\n  Specify the ID or alias of the package version you want to delete.\n\nALIASES\n  $ sfdx force package beta version delete\n  $ sfdx force package version delete\n\nEXAMPLES\n  Delete a package version with the specified alias using your default Dev Hub\n  org:\n\n    $ sfdx package version delete --package \"Your Package Alias\"\n\n  Delete a package version with the specified ID using the Dev Hub org with\n  username \"devhub@example.com\":\n\n    $ sfdx package version delete --package 04t... --target-org \\\n      devhub@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_171.txt"}}],["604cab56-662e-4929-b73c-7b184f1ba835",{"pageContent":"\n\nDisplay the ancestry tree for a 2GP managed package version.\n\nUSAGE\n  $ sfdx package version displayancestry -v <value> -p <value> [--json] [--api-version\n    <value>] [--dot-code] [--verbose]\n\nFLAGS\n  -p, --package=<value>         (required) ID or alias of the package (starts\n                                with 0Ho) or package version (starts with 04t)\n                                to display ancestry for.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n  --dot-code                    Display the ancestry tree in DOT code.\n  --verbose                     Display both the package version ID (starts with\n                                04t) and the version number\n                                (major.minor.patch.build) in the ancestry tree.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package beta version displayancestry\n  $ sfdx force package version displayancestry\n\nEXAMPLES\n  Display the ancestry tree for a package version with the specified alias,\n  using your default Dev Hub org:\n\n    $ sfdx package version displayancestry --package package_version_alias\n\n  Similar to previous example, but display the output in DOT code:\n\n    $ sfdx package version displayancestry --package package_version_alias \\\n      --dot-code\n\n  Display the ancestry tree for a package with the specified ID, using the Dev\n  Hub org with username devhub@example.com:\n\n    $ sfdx package version displayancestry --package OHo... --target-dev-hub \\\n      devhub@example.com\n\n  Display the ancestry tree of a package version with the specified ID, using\n  your default Dev Hub org:\n\n    $ sfdx package version displayancestry --package 04t...\n\nFLAG DESCRIPTIONS\n  -p, --package=<value>\n\n    ID or alias of the package (starts with 0Ho) or package version (starts with\n    04t) to display ancestry for.\n\n    If you specify a package ID (starts with 0Ho) or alias, the ancestor tree\n    for every package version associated with the package ID is displayed. If\n    you specify a package version (starts with 04t) or alias, the ancestry tree\n    of the specified package version is displayed.\n\n  --dot-code  Display the ancestry tree in DOT code.\n\n    You can use the DOT code output in graph visualization software to create\n    tree visualizations\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_172.txt"}}],["ea55187e-873d-4df5-890a-17117f4d93e7",{"pageContent":"\n\nList all package versions in the Dev Hub org.\n\nUSAGE\n  $ sfdx package version list -v <value> [--json] [--api-version <value>] [-c\n    <value>] [--concise] [-m <value>] [-p <value>] [-r] [-o <value>] [--verbose]\n\nFLAGS\n  -c, --created-last-days=<value>   Number of days since the request was\n                                    created, starting at 00:00:00 of first day\n                                    to now. Use 0 for today.\n  -m, --modified-last-days=<value>  Number of days since the items were\n                                    modified, starting at 00:00:00 of first day\n                                    to now. Use 0 for today.\n  -o, --order-by=<value>            Package version fields used to order the\n                                    list.\n  -p, --packages=<value>            Comma-delimited list of packages (aliases or\n                                    0Ho IDs) to list.\n  -r, --released                    Display released versions only\n                                    (IsReleased=true).\n  -v, --target-dev-hub=<value>      (required) Username or alias of the Dev Hub\n                                    org.\n  --api-version=<value>             Override the api version used for api\n                                    requests made by this command\n  --concise                         Display limited package version details.\n  --verbose                         Display extended package version details.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List all package versions in the Dev Hub org.\n\n  Description\n\nALIASES\n  $ sfdx force package beta version list\n  $ sfdx force package version list\n\nEXAMPLES\n  List package versions in your default Dev Hub org that were created in the\n  last 3 days; show only the released versions and order the list using the\n  PatchVersion field. Display extended details about each package version:\n\n    $ sfdx package version list --verbose --created-last-days 3 --released \\\n      --order-by PatchVersion\n\n  List the released package versions for the two specified packages that were\n  modified today; use the Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version list --packages 0Ho000000000000,0Ho000000000001 \\\n      --released --modified-last-days 0 --target-dev-hub devhub@example.com\n\n  List all released package versions in your default Dev Hub org:\n\n    $ sfdx package version list --released\n\n  List package versions that were modified today in your default Dev Hub org;\n  show limited details about each one:\n\n    $ sfdx package version list --concise --modified-last-days 0\n\n  List released package versions that were created in the last 3 days in your\n  default Dev Hub org; show limited details:\n\n    $ sfdx package version list --concise --created-last-days 3 --released\n\n  List released package versions that were modified today for the two packages\n  with specified aliases in your default Dev Hub org:\n\n    $ sfdx package version list --packages exp-mgr,exp-mgr-util --released \\\n      --modified-last-days 0\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_173.txt"}}],["c294163a-64a4-47a9-9fed-307ab2f459a5",{"pageContent":"\n\nPromote a package version to released.\n\nUSAGE\n  $ sfdx package version promote -v <value> -p <value> [--json] [--api-version\n    <value>] [-n]\n\nFLAGS\n  -n, --no-prompt               Don't prompt to confirm setting the package\n                                version as released.\n  -p, --package=<value>         (required) ID (starts with 04t) or alias of the\n                                package version to promote.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Promote a package version to released.\n\n  Supply the ID or alias of the package version you want to promote. Promotes\n  the package version to released status.\n\nALIASES\n  $ sfdx force package beta version promote\n  $ sfdx force package version promote\n\nEXAMPLES\n  Promote the package version with the specified ID to released; uses your\n  default Dev Hub org:\n\n    $ sfdx package version promote --package 04t...\n\n  Promote the package version with the specified alias to released; uses the\n  Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version promote --package awesome_package_alias \\\n      --target-dev-hub devhub@example.com\n\n  Promote the package version with an alias that has spaces to released:\n\n    $ sfdx package version promote --package \"Awesome Package Alias\"\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_174.txt"}}],["a1a75bdc-355a-4c6b-a5f0-d2bbcbb6d041",{"pageContent":"\n\nRetrieve details about a package version in the Dev Hub org.\n\nUSAGE\n  $ sfdx package version report -v <value> -p <value> [--json] [--api-version\n    <value>] [--verbose]\n\nFLAGS\n  -p, --package=<value>         (required) ID (starts with 04t) or alias of the\n                                package to retrieve details for.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n  --verbose                     Display extended package version details.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Retrieve details about a package version in the Dev Hub org.\n\n  To update package version values, run \"sfdx package version update\".\n\nALIASES\n  $ sfdx force package beta version report\n  $ sfdx force package version report\n\nEXAMPLES\n  Retrieve details about the package version with the specified ID from your\n  default Dev Hub org:\n\n    $ sfdx package version report --package 04t...\n\n  Retrieve details about the package version with the specified alias (that\n  contains spaces) from the Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version report --package \"Your Package Alias\" \\\n      --target-dev-hub devhub@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_175.txt"}}],["d62fafbc-16b7-4949-a2e9-f301ee707612",{"pageContent":"\n\nUpdate a package version.\n\nUSAGE\n  $ sfdx package version update -v <value> -p <value> [--json] [--api-version\n    <value>] [-a <value>] [-e <value>] [-b <value>] [-t <value>] [-k <value>]\n\nFLAGS\n  -a, --version-name=<value>         New package version name.\n  -b, --branch=<value>               New package version branch.\n  -e, --version-description=<value>  New package version description.\n  -k, --installation-key=<value>     New installation key for key-protected\n                                     package (default: null)\n  -p, --package=<value>              (required) ID (starts with 04t) or alias of\n                                     the package to update a version of.\n  -t, --tag=<value>                  New package version tag.\n  -v, --target-dev-hub=<value>       (required) Username or alias of the Dev Hub\n                                     org.\n  --api-version=<value>              Override the api version used for api\n                                     requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Update a package version.\n\n  Specify a new value for each option you want to update.\n\n  To display details about a package version, run \"sfdx package version\n  display\".\n\nALIASES\n  $ sfdx force package beta version update\n  $ sfdx force package version update\n\nEXAMPLES\n  Update the package version that has the specified alias (that contains\n  spaces) with a new installation key \"password123\"; uses your default Dev Hub\n  org:\n\n    $ sfdx package version update --package \"Your Package Alias\" \\\n      --installation-key password123\n\n  Update the package version that has the specified ID with a new branch and\n  tag; use the Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version update --package 04t... --branch main --tag \\\n      'Release 1.0.7' --target-dev-hub devhub@example.com\n\n  Update the package version that has the specified ID with a new description:\n\n    $ sfdx package version update --package 04t... --version-description \\\n      \"New Package Version Description\"\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_176.txt"}}],["3f506e5a-7062-4d87-b6b1-04e1578bf702",{"pageContent":"\n\nCreate a package.\n\nUSAGE\n  $ sfdx package create -v <value> -n <value> -t Managed|Unlocked -r <value>\n    [--json] [--api-version <value>] [-d <value>] [-e] [--org-dependent] [-o\n    <value>]\n\nFLAGS\n  -d, --description=<value>                  Description of the package.\n  -e, --no-namespace                         Create the package with no\n                                             namespace; available only for\n                                             unlocked packages.\n  -n, --name=<value>                         (required) Name of the package to\n                                             create.\n  -o, --error-notification-username=<value>  Active Dev Hub user designated to\n                                             receive email notifications for\n                                             package errors.\n  -r, --path=<value>                         (required) Path to directory that\n                                             contains the contents of the\n                                             package.\n  -t, --package-type=<option>                (required) Type of package.\n                                             <options: Managed|Unlocked>\n  -v, --target-dev-hub=<value>               (required) Username or alias of the\n                                             Dev Hub org.\n  --api-version=<value>                      Override the api version used for\n                                             api requests made by this command\n  --org-dependent                            Depends on unpackaged metadata in\n                                             the installation org; applies to\n                                             unlocked packages only.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a package.\n\n  First, use this command to create a package. Then create a package version.\n\n  If you don’t have a namespace defined in your sfdx-project.json file, use\n  --no-namespace.\n\n  Your --name value must be unique within your namespace.\n\n  Run 'sfdx package list to list all packages in the Dev Hub org.\n\nALIASES\n  $ sfdx force package beta create\n  $ sfdx force package create\n\nEXAMPLES\n  Create an unlocked package from the files in the \"force-app\" directory; uses\n  your default Dev Hub org:\n\n    $ sfdx package create --name MyUnlockedPackage --package-type Unlocked \\\n      --path force-app\n\n  Create a managed packaged from the \"force-app\" directory files, give the\n  package a description, and use the specified Dev Hub org:\n\n    $ sfdx package create --name MyManagedPackage --description \"Your \\\n      Package Descripton\" --package-type Managed --path force-app \\\n      --target-dev-hub devhub@example.com\n\nFLAG DESCRIPTIONS\n  -e, --no-namespace\n\n    Create the package with no namespace; available only for unlocked packages.\n\n    This flag is useful when you’re migrating an existing org to packages. But\n    use a namespaced package for new metadata.\n\n  -o, --error-notification-username=<value>\n\n    Active Dev Hub user designated to receive email notifications for package\n    errors.\n\n    Email notifications include information about unhandled Apex exceptions, and\n    install, upgrade, or uninstall failures associated with your package.\n\n  -t, --package-type=Managed|Unlocked  Type of package.\n\n    The options for package type are Managed and Unlocked\n    (Managed=DeveloperManagedSubscriberManaged,\n    Unlocked=DeveloperControlledSubscriberEditable). These options determine\n    upgrade and editability rules.\n\n  --org-dependent\n\n    Depends on unpackaged metadata in the installation org; applies to unlocked\n    packages only.\n\n    Use Source Tracking in Sandboxes to develop your org-dependent unlocked\n    package. For more information, see \"Create Org-Dependent Unlocked Packages\"\n    in the Salesforce DX Developer Guide\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_177.txt"}}],["4cdad702-b72f-4f5b-88d7-70b9149c8511",{"pageContent":"\n\nDelete a package.\n\nUSAGE\n  $ sfdx package delete -v <value> -p <value> [--json] [--api-version\n    <value>] [-n]\n\nFLAGS\n  -n, --no-prompt               Don’t prompt before deleting the package.\n  -p, --package=<value>         (required) ID (starts with 0Ho) or alias of the\n                                package to delete.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete a package.\n\n  Specify the ID or alias of the package you want to delete.\n\n  Delete unlocked and second-generation managed packages. Before you delete a\n  package, first delete all associated package versions.\n\nALIASES\n  $ sfdx force package beta delete\n  $ sfdx force package delete\n\nEXAMPLES\n  Delete a package using its alias from your default Dev Hub org:\n\n    $ sfdx package delete --package \"Your Package Alias\"\n\n  Delete a package using its ID from the specified Dev Hub org:\n\n    $ sfdx package delete --package 0Ho... --target-dev-hub \\\n      devhub@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_178.txt"}}],["1c36cfa0-8325-405c-b857-011c2c383f24",{"pageContent":"\n\nInstall a version of a package in the target org.\n\nUSAGE\n  $ sfdx package install -o <value> -p <value> [--json] [--api-version\n    <value>] [-w <value>] [-k <value>] [-b <value>] [-r] [-a all|package] [-s\n    AllUsers|AdminsOnly] [-t DeprecateOnly|Mixed|Delete]\n\nFLAGS\n  -a, --apex-compile=<option>\n      [default: all] Compile all Apex in the org and package, or only Apex in the\n      package; unlocked packages only.\n      <options: all|package>\n\n  -b, --publish-wait=<value>\n      [default: 0 minutes] Maximum number of minutes to wait for the Subscriber\n      Package Version ID to become available in the target org before canceling\n      the install request.\n\n  -k, --installation-key=<value>\n      Installation key for key-protected package (default: null).\n\n  -o, --target-org=<value>\n      (required) Username or alias of the target org.\n\n  -p, --package=<value>\n      (required) ID (starts with 04t) or alias of the package version to install.\n\n  -r, --no-prompt\n      Don't prompt for confirmation.\n\n  -s, --security-type=<option>\n      [default: AdminsOnly] Security access type for the installed package.\n      (deprecation notice: The default --security-type value will change from\n      AllUsers to AdminsOnly in v47.0 or later.)\n      <options: AllUsers|AdminsOnly>\n\n  -t, --upgrade-type=<option>\n      [default: Mixed] Upgrade type for the package installation; available only\n      for unlocked packages.\n      <options: DeprecateOnly|Mixed|Delete>\n\n  -w, --wait=<value>\n      [default: 0 minutes] Number of minutes to wait for installation status.\n\n  --api-version=<value>\n      Override the api version used for api requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Install a version of a package in the target org.\n\n  To install a package, specify a specific version of the package using the 04t\n  package ID. The package and the version you specified installs in your default\n  target org unless you supply the username for a different target org.\n\n  For package upgrades, to specify options for component deprecation or deletion\n  of removed components, include an --upgrade-type value. To delete components\n  that can be safely deleted and deprecate the others, specify --upgrade-type\n  Mixed (the default). To deprecate all removed components, specify\n  --upgrade-type DeprecateOnly. To delete all removed components, except for\n  custom objects and custom fields, that don't have dependencies, specify\n  --upgrade-type Delete. (Note: This option can result in the loss of data that\n  is associated with the deleted components.) The default is Mixed.\n\nALIASES\n  $ sfdx force package beta install\n  $ sfdx force package install\n\nEXAMPLES\n  Install a package version with the specified ID in the org with username\n  \"me@example.com\":\n\n    $ sfdx package install --package 04t... --target-org me@example.com\n\n  Install a package version with the specified alias into your default org:\n\n    $ sfdx package install --package awesome_package_alias\n\n  Install a package version with an alias that includes spaces into your\n  default org:\n\n    $ sfdx package install --package \"Awesome Package Alias\"\n\n  Install an unlocked package version with the specified ID and deprecate all\n  removed components:\n\n    $ sfdx package install --package 04t... --upgrade-type DeprecateOnly\n\nFLAG DESCRIPTIONS\n  -a, --apex-compile=all|package\n\n    Compile all Apex in the org and package, or only Apex in the package;\n    unlocked packages only.\n\n    Applies to unlocked packages only. Specifies whether to compile all Apex in\n    the org and package, or only the Apex in the package.\n\n    For package installs into production orgs, or any org that has Apex Compile\n    on Deploy enabled, the platform compiles all Apex in the org after the\n    package install or upgrade operation completes.\n\n    This approach assures that package installs and upgrades don’t impact the\n    performance of an org, and is done even if --apex-compile package is\n    specified.\n\n  -r, --no-prompt  Don't prompt for confirmation.\n\n    Allows the following without an explicit confirmation response: 1) Remote\n    Site Settings and Content Security Policy websites to send or receive data,\n    and 2) --upgrade-type Delete to proceed.\n\n  -t, --upgrade-type=DeprecateOnly|Mixed|Delete\n\n    Upgrade type for the package installation; available only for unlocked\n    packages.\n\n    For package upgrades, specifies whether to mark all removed components as\n    deprecated (DeprecateOnly), to delete removed components that can be safely\n    deleted and deprecate the others (Mixed), or to delete all removed\n    components, except for custom objects and custom fields, that don't have\n    dependencies (Delete). The default is Mixed. Can specify DeprecateOnly or\n    Delete only for unlocked package upgrades.\n\nCOMMANDS\n  package install report  Retrieve the status of a package installation request\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_179.txt"}}],["6c09629f-79de-40f3-b8f4-632f7dbd2ea5",{"pageContent":"\n\nAuthorize an org using a Salesforce DX authorization URL stored in a file.\n\nUSAGE\n  $ sfdx auth sfdxurl store -f <value> [--json] [-d] [-s] [-a <value>]\n\nFLAGS\n  -a, --alias=<value>          Alias for the org.\n  -d, --set-default-dev-hub    Set the authenticated org as the default Dev Hub.\n  -f, --sfdx-url-file=<value>  (required) Path to a file that contains the\n                               Salesforce DX authorization URL.\n  -s, --set-default            Set the authenticated org as the default that all\n                               org-related commands run against.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Authorize an org using a Salesforce DX authorization URL stored in a file.\n\n  The Salesforce DX (SFDX) authorization URL must have the format\n  \"force://<clientId>:<clientSecret>:<refreshToken>@<instanceUrl>\". NOTE: The\n  SFDX authorization URL uses the \"force\" protocol, and not \"http\" or \"https\".\n  Also, the \"instanceUrl\" inside the SFDX authorization URL doesn't include the\n  protocol (\"https://\").\n\n  You have three options when creating the authorization file. The easiest\n  option is to redirect the output of the \"sfdx org display --verbose --json\"\n  command into a file. For example, using an org with alias my-org that you've\n  already authorized:\n\n  $ sfdx org display --target-org my-org --verbose --json > authFile.json\n\n  The resulting JSON file contains the URL in the \"sfdxAuthUrl\" property of the\n  \"result\" object. You can then reference the file when running this command:\n\n  $ sfdx auth sfdxurl store --sfdx-url-file authFile.json\n\n  NOTE: The \"sfdx org display --verbose\" command displays the refresh token only\n  for orgs authorized with the web server flow, and not the JWT bearer flow.\n\n  You can also create a JSON file that has a top-level property named\n  sfdxAuthUrl whose value is the authorization URL. Finally, you can create a\n  normal text file that includes just the URL and nothing else.\n\nALIASES\n  $ sfdx force auth sfdxurl store\n  $ sfdx auth sfdxurl store\n\nEXAMPLES\n  Authorize an org using the SFDX authorization URL in the files/authFile.json\n  file:\n\n    $ sfdx auth sfdxurl store --sfdx-url-file files/authFile.json\n\n  Similar to previous example, but set the org as your default and give it an\n  alias MyDefaultOrg:\n\n    $ sfdx auth sfdxurl store --sfdx-url-file files/authFile.json \\\n      --set-default --alias MyDefaultOrg\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_18.txt"}}],["a4d352b4-58a7-43d5-93bd-27f301e03b76",{"pageContent":"\n\nRetrieve the status of a package installation request.\n\nUSAGE\n  $ sfdx package install report -o <value> -i <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -i, --request-id=<value>  (required) ID of the package install request you\n                            want to check; starts with 0Hf.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package beta install report\n  $ sfdx force package install report\n\nEXAMPLES\n  Retrieve the status of a package installation request with the specified ID\n  on your default org:\n\n    $ sfdx package install report --request-id 0Hf...\n\n  Similar to previous example, except use the org with username\n  me@example.com:\n\n    $ sfdx package install report --request-id 0Hf... --target-org \\\n      me@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_180.txt"}}],["281e3d1a-f165-41cf-a0d3-cb56290e3c4a",{"pageContent":"\n\nList the org’s installed packages.\n\nUSAGE\n  $ sfdx package installed list -o <value> [--json] [--api-version <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package beta installed list\n  $ sfdx force package installed list\n\nEXAMPLES\n  List the installed packages in your default org:\n\n    $ sfdx package installed list\n\n  List the installed packages in the org with username me@example.com:\n\n    $ sfdx package installed list --target-org me@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_181.txt"}}],["fc0fcf7c-ad61-4368-8762-9c875cf1c723",{"pageContent":"\n\nList all packages in the Dev Hub org.\n\nUSAGE\n  $ sfdx package list -v <value> [--json] [--api-version <value>]\n    [--verbose]\n\nFLAGS\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n  --verbose                     Display extended package detail.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List all packages in the Dev Hub org.\n\n  Description\n\nALIASES\n  $ sfdx force package beta list\n  $ sfdx force package list\n\nEXAMPLES\n  List all packages in the specified Dev Hub org:\n\n    $ sfdx package list --target-dev-hub devhub@example.com\n\n  List all packages details in the specified Dev Hub org, and show extended\n  details about each package:\n\n    $ sfdx package list --target-dev-hub devhub@example.com --verbose\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_182.txt"}}],["ede87b12-b2c9-4a34-bf47-5ce4e051c8a0",{"pageContent":"\n\nUninstall a second-generation package from the target org.\n\nUSAGE\n  $ sfdx package uninstall -o <value> -p <value> [--json] [--api-version\n    <value>] [-w <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -p, --package=<value>     (required) ID (starts with 04t) or alias of the\n                            package version to uninstall.\n  -w, --wait=<value>        [default: 0 minutes] Number of minutes to wait for\n                            uninstall status.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Uninstall a second-generation package from the target org.\n\n  Specify the package ID for a second-generation package.\n\n  To list the org’s installed packages, run \"sfdx package installed list\".\n\n  To uninstall a first-generation package, from Setup, enter Installed Packages\n  in the Quick Find box, then select Installed Packages.\n\nALIASES\n  $ sfdx force package beta uninstall\n  $ sfdx force package uninstall\n\nEXAMPLES\n  Uninstall a package with specified ID from an org with username\n  me@example.com:\n\n    $ sfdx package uninstall --package 04t... --target-org me@example.com\n\n  Uninstall a package with the specified alias from your default org:\n\n    $ sfdx package uninstall --package undesirable_package_alias\n\n  Uninstall a package with an alias that contains spaces from your default\n  org:\n\n    $ sfdx package uninstall --package \"Undesirable Package Alias\"\n\nCOMMANDS\n  package uninstall report  Retrieve the status of a package uninstall request\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_183.txt"}}],["18f4b438-56c3-4c1a-9dff-ecf23e94ef12",{"pageContent":"\n\nRetrieve the status of a package uninstall request.\n\nUSAGE\n  $ sfdx package uninstall report -o <value> -i <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -i, --request-id=<value>  (required) ID of the package uninstall request you\n                            want to check; starts with 06y.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package beta uninstall report\n  $ sfdx force package uninstall report\n\nEXAMPLES\n  Retrieve the status of a package uninstall in your default org using the\n  specified request ID:\n\n    $ sfdx package uninstall report --request-id 06y...\n\n  Similar to previous example, but use the org with username me@example.com:\n\n    $ sfdx package uninstall report --request-id 06y... --target-org \\\n      me@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_184.txt"}}],["2497a45b-f902-4ff6-aea1-883848807ee7",{"pageContent":"\n\nUpdate package details.\n\nUSAGE\n  $ sfdx package update -v <value> -p <value> [--json] [--api-version\n    <value>] [-n <value>] [-d <value>] [-o <value>]\n\nFLAGS\n  -d, --description=<value>                  New description of the package.\n  -n, --name=<value>                         New name of the package.\n  -o, --error-notification-username=<value>  Active Dev Hub user designated to\n                                             receive email notifications for\n                                             package errors.\n  -p, --package=<value>                      (required) ID (starts with 0Ho) or\n                                             alias of the package to update.\n  -v, --target-dev-hub=<value>               (required) Username or alias of the\n                                             Dev Hub org.\n  --api-version=<value>                      Override the api version used for\n                                             api requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Update package details.\n\n  Specify a new value for each option you want to update.\n\n  Run \"sfdx package list\" to list all packages in the Dev Hub org.\n\nALIASES\n  $ sfdx force package beta update\n  $ sfdx force package update\n\nEXAMPLES\n  Update the name of the package with the specified alias; uses your default\n  Dev Hub org:\n\n    $ sfdx package update --package \"Your Package Alias\" --name \"New Package \\\n      Name\"\n\n  Update the description of the package with the specified ID; uses the\n  specified Dev Hub org:\n\n    $ sfdx package update --package 0Ho... --description \"New Package \\\n      Description\" --target-dev-hub devhub@example.com\n\nFLAG DESCRIPTIONS\n  -o, --error-notification-username=<value>\n\n    Active Dev Hub user designated to receive email notifications for package\n    errors.\n\n    Email notifications include information about unhandled Apex exceptions, and\n    install, upgrade, or uninstall failures associated with your package\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_185.txt"}}],["0e7f2294-49d7-4ab8-ad20-b5e797806fcf",{"pageContent":"\n\nCreate a package version in the Dev Hub org.\n\nUSAGE\n  $ sfdx package version create -v <value> [--json] [--api-version <value>] [-b\n    <value>] [-c | --skip-validation] [-f <value>] [-k <value>] [-x] [-p\n    <value>] [-d <value>] [--post-install-script <value>] [--post-install-url\n    <value>] [--releasenotes-url <value>] [--skip-ancestor-check] [-t <value>]\n    [--uninstall-script <value>] [-e <value>] [-a <value>] [-n <value>] [-w\n    <value>] [--language <value>] [--verbose]\n\nFLAGS\n  -a, --version-name=<value>         Name of the package version to be created;\n                                     overrides the sfdx-project.json value.\n  -b, --branch=<value>               Name of the branch in your source control\n                                     system that the package version is based\n                                     on.\n  -c, --code-coverage                Calculate and store the code coverage\n                                     percentage by running the packaged Apex\n                                     tests included in this package version.\n  -d, --path=<value>                 Path to the directory that contains the\n                                     contents of the package.\n  -e, --version-description=<value>  Description of the package version to be\n                                     created; overrides the sfdx-project.json\n                                     value.\n  -f, --definition-file=<value>      Path to a definition file similar to\n                                     scratch org definition file that contains\n                                     the list of features and org preferences\n                                     that the metadata of the package version\n                                     depends on.\n  -k, --installation-key=<value>     Installation key for key-protected package.\n                                     (either --installation-key or\n                                     --installation-key-bypass is required)\n  -n, --version-number=<value>       Version number of the package version to be\n                                     created; overrides the sfdx-project.json\n                                     value.\n  -p, --package=<value>              ID (starts with 0Ho) or alias of the\n                                     package to create a version of.\n  -t, --tag=<value>                  Package version’s tag.\n  -v, --target-dev-hub=<value>       (required) Username or alias of the Dev Hub\n                                     org.\n  -w, --wait=<value>                 [default: 0 minutes] Number of minutes to\n                                     wait for the package version to be created.\n  -x, --installation-key-bypass      Bypass the installation key requirement.\n                                     (either --installation-key or\n                                     --installation-key-bypass is required)\n  --api-version=<value>              Override the api version used for api\n                                     requests made by this command\n  --language=<value>                 Language for the package.\n  --post-install-script=<value>      Name of the post-install script; applies to\n                                     managed packages only.\n  --post-install-url=<value>         Post-install instructions URL.\n  --releasenotes-url=<value>         Release notes URL.\n  --skip-ancestor-check              Overrides ancestry requirements, which\n                                     allows you to specify a package ancestor\n                                     that isn’t the highest released package\n                                     version.\n  --skip-validation                  Skip validation during package version\n                                     creation; you can’t promote unvalidated\n                                     package versions.\n  --uninstall-script=<value>         Uninstall script name; applies to managed\n                                     packages only.\n  --verbose                          Display verbose command output.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a package version in the Dev Hub org.\n\n  The package version is based on the package contents in the specified\n  directory.\n\n  To retrieve details about a package version create request, including status\n  and package version ID (04t), run \"sfdx package version create report -i\n  08c...\".\n\n  We recommend that you specify the --installation-key parameter to protect the\n  contents of your package and to prevent unauthorized installation of your\n  package.\n\n  To list package version creation requests in the org, run \"sfdx package\n  version create list\".\n  To promote a package version to released, you must use the --code-coverage\n  parameter. The package must also meet the code coverage requirements. This\n  requirement applies to both managed and unlocked packages.\n\n  We don’t calculate code coverage for org-dependent unlocked packages, or for\n  package versions that specify --skip-validation.\n\nALIASES\n  $ sfdx force package beta version create\n  $ sfdx force package version create\n\nEXAMPLES\n  Create a package version from the contents of the \"common\" directory and\n  give it an installation key of \"password123\"; uses your default Dev Hub org:\n\n    $ sfdx package version create --path common --installation-key \\\n      password123\n\n  Create a package version from a package with the specified alias; uses the\n  Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version create --package \"Your Package Alias\" \\\n      --installation-key password123 --target-dev-hub devhub@example.com\n\n  Create a package version from a package with the specified ID:\n\n    $ sfdx package version create --package 0Ho... --installation-key \\\n      password123\n\n  Create a package version and skip the validation step:\n\n    $ sfdx package version create --path common --installation-key \\\n      password123 --skip-validation\n\nFLAG DESCRIPTIONS\n  -c, --code-coverage\n\n    Calculate and store the code coverage percentage by running the packaged\n    Apex tests included in this package version.\n\n    Before you can promote and release a managed or unlocked package version,\n    the Apex code must meet a minimum 75% code coverage requirement. We don’t\n    calculate code coverage for org-dependent unlocked packages or for package\n    versions that specify --skip-validation.\n\n  -x, --installation-key-bypass\n\n    Bypass the installation key requirement. (either --installation-key or\n    --installation-key-bypass is required)\n\n    If you bypass this requirement, anyone can install your package.\n\n  --language=<value>  Language for the package.\n\n    Specify the language using a language code listed under \"Supported\n    Languages\" in Salesforce Help. If no language is specified, the language\n    defaults to the language of the Dev Hub user who created the package.\n\n  --post-install-script=<value>\n\n    Name of the post-install script; applies to managed packages only.\n\n    The post-install script is an Apex class within this package that is run in\n    the installing org after installations or upgrades of this package version.\n\n  --post-install-url=<value>  Post-install instructions URL.\n\n    The contents of the post-installation instructions URL are displayed in the\n    UI after installation of the package version.\n\n  --releasenotes-url=<value>  Release notes URL.\n\n    This link is displayed in the package installation UI to provide release\n    notes for this package version to subscribers.\n\n  --skip-validation\n\n    Skip validation during package version creation; you can’t promote\n    unvalidated package versions.\n\n    Skips validation of dependencies, package ancestors, and metadata during\n    package version creation. Skipping validation reduces the time it takes to\n    create a new package version, but you can promote only validated package\n    versions. Skipping validation can suppress important errors that can surface\n    at a later stage. You can specify skip validation or code coverage, but not\n    both. Code coverage is calculated during validation.\n\n  --uninstall-script=<value>\n\n    Uninstall script name; applies to managed packages only.\n\n    The uninstall script is an Apex class within this package that is run in the\n    installing org after uninstallations of this package.\n\n  --verbose  Display verbose command output.\n\n    Display verbose command output. When polling for the status of the creation,\n    this will output status and timeout data on a separate line for each poll\n    request, which is useful in CI systems where timeouts can occur with long\n    periods of no output from commands.\n\nCOMMANDS\n  package version create list    List package version creation requests.\n  package version create report  Retrieve details about a package version\n                                 creation request\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_186.txt"}}],["266766ae-26b9-4ac4-a583-9acad3bc1378",{"pageContent":"\n\nList package version creation requests.\n\nUSAGE\n  $ sfdx package version create list -v <value> [--json] [--api-version <value>] [-c\n    <value>] [-s Queued|InProgress|Success|Error]\n\nFLAGS\n  -c, --created-last-days=<value>  Number of days since the request was created,\n                                   starting at 00:00:00 of first day to now. Use\n                                   0 for today.\n  -s, --status=<option>            Status of the version creation request, used\n                                   to filter the list.\n                                   <options: Queued|InProgress|Success|Error>\n  -v, --target-dev-hub=<value>     (required) Username or alias of the Dev Hub\n                                   org.\n  --api-version=<value>            Override the api version used for api\n                                   requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List package version creation requests.\n\n  Shows the details of each request to create a package version in the Dev Hub\n  org.\n\n  All filter parameters are applied using the AND logical operator (not OR).\n\n  To get information about a specific request, run \"sfdx package version create\n  report\" and supply the request ID.\n\nALIASES\n  $ sfdx force package beta version create list\n  $ sfdx force package version create list\n\nEXAMPLES\n  List all package version creation requests in your default Dev Hub org:\n\n    $ sfdx package version create list\n\n  List package version creation requests from the last 3 days in the Dev Hub\n  org with username devhub@example.com:\n\n    $ sfdx package version create list --created-last-days 3 \\\n      --target-dev-hub\n\n  List package version creation requests with status Error:\n\n    $ sfdx package version create list --status Error\n\n  List package version creation requests with status InProgress:\n\n    $ sfdx package version create list --status InProgress\n\n  List package version creation requests with status Success that were created\n  today:\n\n    $ sfdx package version create list --created-last-days 0 --status \\\n      Success\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_187.txt"}}],["9dfe28ea-e37c-4570-b563-9b4f74ac15bc",{"pageContent":"\n\nRetrieve details about a package version creation request.\n\nUSAGE\n  $ sfdx package version create report -v <value> -i <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -i, --package-create-request-id=<value>  (required) ID (starts with 08c) of\n                                           the package version creation request\n                                           you want to display.\n  -v, --target-dev-hub=<value>             (required) Username or alias of the\n                                           Dev Hub org.\n  --api-version=<value>                    Override the api version used for api\n                                           requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Retrieve details about a package version creation request.\n\n  Specify the request ID for which you want to view details. If applicable, the\n  command displays errors related to the request.\n\n  To show all requests in the org, run \"sfdx package version create list\".\n\nALIASES\n  $ sfdx force package beta version create report\n  $ sfdx force package version create report\n\nEXAMPLES\n  Retrieve details about the package version creation request with the\n  specified ID; uses your default Dev Hub org:\n\n    $ sfdx package version create report --package-create-request-id 08c...\n\n  Retrieve details about the specified package version creation request in the\n  Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version create report --package-create-request-id 08c... \\\n      --target-dev-hub devhub@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_188.txt"}}],["6bed6de2-1266-4a76-bc15-0c5f7638a2c9",{"pageContent":"\n\nDelete a package version.\n\nUSAGE\n  $ sfdx package version delete -v <value> -p <value> [--json] [--api-version\n    <value>] [-n]\n\nFLAGS\n  -n, --no-prompt               Don’t prompt before deleting the package\n                                version.\n  -p, --package=<value>         (required) ID (starts with 04t) or alias of the\n                                package version to delete.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete a package version.\n\n  Specify the ID or alias of the package version you want to delete.\n\nALIASES\n  $ sfdx force package beta version delete\n  $ sfdx force package version delete\n\nEXAMPLES\n  Delete a package version with the specified alias using your default Dev Hub\n  org:\n\n    $ sfdx package version delete --package \"Your Package Alias\"\n\n  Delete a package version with the specified ID using the Dev Hub org with\n  username \"devhub@example.com\":\n\n    $ sfdx package version delete --package 04t... --target-org \\\n      devhub@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_189.txt"}}],["2280da0f-382d-4cda-8712-c2c1b3e0c5d7",{"pageContent":"\n\nLog in to a Salesforce org using the web server flow.\n\nUSAGE\n  $ sfdx auth web login [--json] [-b chrome|edge|firefox] [-i <value>] [-r\n    <value>] [-d] [-s] [-a <value>]\n\nFLAGS\n  -a, --alias=<value>         Alias for the org.\n  -b, --browser=<option>      Browser in which to open the org.\n                              <options: chrome|edge|firefox>\n  -d, --set-default-dev-hub   Set the authenticated org as the default Dev Hub.\n  -i, --client-id=<value>     OAuth client ID (also called consumer key) of your\n                              custom connected app.\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n  -s, --set-default           Set the authenticated org as the default that all\n                              org-related commands run against.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Log in to a Salesforce org using the web server flow.\n\n  Opens a Salesforce instance URL in a web browser so you can enter your\n  credentials and log in to your org. After you log in, you can close the\n  browser window.\n\n  Logging into an org authorizes the CLI to run other commands that connect to\n  that org, such as deploying or retrieving metadata. You can log into many\n  types of orgs, such as sandboxes, Dev Hubs, Env Hubs, production orgs, and\n  scratch orgs.\n\n  We recommend that you set an alias when you log into an org. Aliases make it\n  easy to later reference this org when running commands that require it. If you\n  don’t set an alias, you use the username that you specified when you logged in\n  to the org. If you run multiple commands that reference the same org, consider\n  setting the org as your default. Use --set-default for your default scratch\n  org or sandbox, or --set-default-dev-hub for your default Dev Hub.\n\n  By default, this command uses the global out-of-the-box connected app in your\n  org. If you need more security or control, such as setting the refresh token\n  timeout or specifying IP ranges, create your own connected app using a digital\n  certificate. Make note of the consumer key (also called cliend id) that’s\n  generated for you. Then specify the consumer key with the --client-id flag.\n\nALIASES\n  $ sfdx force auth web login\n  $ sfdx auth web login\n\nEXAMPLES\n  Run the command with no flags to open the default Salesforce login page\n  (https://login.salesforce.com):\n\n    $ sfdx auth web login\n\n  Log in to your Dev Hub, set it as your default Dev Hub, and set an alias\n  that you reference later when you create a scratch org:\n\n    $ sfdx auth web login --set-default-dev-hub --alias dev-hub\n\n  Log in to a sandbox and set it as your default org:\n\n    $ sfdx auth web login --instance-url \\\n      https://MyDomainName--SandboxName.sandbox.my.salesforce.com \\\n      --set-default\n\n  Use --browser to specify a specific browser, such as Google Chrome:\n\n    $ sfdx auth web login --instance-url \\\n      https://MyDomainName--SandboxName.sandbox.my.salesforce.com \\\n      --set-default --browser chrome\n\n  Use your own connected app by specifying its consumer key (also called\n  client ID):\n\n    $ sfdx auth web login --instance-url \\\n      https://MyDomainName--SandboxName.sandbox.my.salesforce.com \\\n      --set-default --browser chrome --client-id 04580y4051234051\n\nFLAG DESCRIPTIONS\n  -b, --browser=chrome|edge|firefox  Browser in which to open the org.\n\n    If you don’t specify --browser, the command uses your default browser. The\n    exact names of the browser applications differ depending on the operating\n    system you're on; check your documentation for details.\n\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n\n    If you specify an --instance-url value, this value overrides the\n    sfdcLoginUrl value in your sfdx-project.json file.\n\n    To specify a My Domain URL, use the format\n    https://yourcompanyname.my.salesforce.com.\n\n    To specify a sandbox, set --instance-url to\n    https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_19.txt"}}],["d81ae91f-d159-4b9e-884f-0122d97afe7e",{"pageContent":"\n\nDisplay the ancestry tree for a 2GP managed package version.\n\nUSAGE\n  $ sfdx package version displayancestry -v <value> -p <value> [--json] [--api-version\n    <value>] [--dot-code] [--verbose]\n\nFLAGS\n  -p, --package=<value>         (required) ID or alias of the package (starts\n                                with 0Ho) or package version (starts with 04t)\n                                to display ancestry for.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n  --dot-code                    Display the ancestry tree in DOT code.\n  --verbose                     Display both the package version ID (starts with\n                                04t) and the version number\n                                (major.minor.patch.build) in the ancestry tree.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package beta version displayancestry\n  $ sfdx force package version displayancestry\n\nEXAMPLES\n  Display the ancestry tree for a package version with the specified alias,\n  using your default Dev Hub org:\n\n    $ sfdx package version displayancestry --package package_version_alias\n\n  Similar to previous example, but display the output in DOT code:\n\n    $ sfdx package version displayancestry --package package_version_alias \\\n      --dot-code\n\n  Display the ancestry tree for a package with the specified ID, using the Dev\n  Hub org with username devhub@example.com:\n\n    $ sfdx package version displayancestry --package OHo... --target-dev-hub \\\n      devhub@example.com\n\n  Display the ancestry tree of a package version with the specified ID, using\n  your default Dev Hub org:\n\n    $ sfdx package version displayancestry --package 04t...\n\nFLAG DESCRIPTIONS\n  -p, --package=<value>\n\n    ID or alias of the package (starts with 0Ho) or package version (starts with\n    04t) to display ancestry for.\n\n    If you specify a package ID (starts with 0Ho) or alias, the ancestor tree\n    for every package version associated with the package ID is displayed. If\n    you specify a package version (starts with 04t) or alias, the ancestry tree\n    of the specified package version is displayed.\n\n  --dot-code  Display the ancestry tree in DOT code.\n\n    You can use the DOT code output in graph visualization software to create\n    tree visualizations\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_190.txt"}}],["fceeaea1-2cd0-4f11-9505-1c2a1cb0ff12",{"pageContent":"\n\nList all package versions in the Dev Hub org.\n\nUSAGE\n  $ sfdx package version list -v <value> [--json] [--api-version <value>] [-c\n    <value>] [--concise] [-m <value>] [-p <value>] [-r] [-o <value>] [--verbose]\n\nFLAGS\n  -c, --created-last-days=<value>   Number of days since the request was\n                                    created, starting at 00:00:00 of first day\n                                    to now. Use 0 for today.\n  -m, --modified-last-days=<value>  Number of days since the items were\n                                    modified, starting at 00:00:00 of first day\n                                    to now. Use 0 for today.\n  -o, --order-by=<value>            Package version fields used to order the\n                                    list.\n  -p, --packages=<value>            Comma-delimited list of packages (aliases or\n                                    0Ho IDs) to list.\n  -r, --released                    Display released versions only\n                                    (IsReleased=true).\n  -v, --target-dev-hub=<value>      (required) Username or alias of the Dev Hub\n                                    org.\n  --api-version=<value>             Override the api version used for api\n                                    requests made by this command\n  --concise                         Display limited package version details.\n  --verbose                         Display extended package version details.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List all package versions in the Dev Hub org.\n\n  Description\n\nALIASES\n  $ sfdx force package beta version list\n  $ sfdx force package version list\n\nEXAMPLES\n  List package versions in your default Dev Hub org that were created in the\n  last 3 days; show only the released versions and order the list using the\n  PatchVersion field. Display extended details about each package version:\n\n    $ sfdx package version list --verbose --created-last-days 3 --released \\\n      --order-by PatchVersion\n\n  List the released package versions for the two specified packages that were\n  modified today; use the Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version list --packages 0Ho000000000000,0Ho000000000001 \\\n      --released --modified-last-days 0 --target-dev-hub devhub@example.com\n\n  List all released package versions in your default Dev Hub org:\n\n    $ sfdx package version list --released\n\n  List package versions that were modified today in your default Dev Hub org;\n  show limited details about each one:\n\n    $ sfdx package version list --concise --modified-last-days 0\n\n  List released package versions that were created in the last 3 days in your\n  default Dev Hub org; show limited details:\n\n    $ sfdx package version list --concise --created-last-days 3 --released\n\n  List released package versions that were modified today for the two packages\n  with specified aliases in your default Dev Hub org:\n\n    $ sfdx package version list --packages exp-mgr,exp-mgr-util --released \\\n      --modified-last-days 0\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_191.txt"}}],["5cc38b76-4306-44d3-b653-fc761544ba6c",{"pageContent":"\n\nPromote a package version to released.\n\nUSAGE\n  $ sfdx package version promote -v <value> -p <value> [--json] [--api-version\n    <value>] [-n]\n\nFLAGS\n  -n, --no-prompt               Don't prompt to confirm setting the package\n                                version as released.\n  -p, --package=<value>         (required) ID (starts with 04t) or alias of the\n                                package version to promote.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Promote a package version to released.\n\n  Supply the ID or alias of the package version you want to promote. Promotes\n  the package version to released status.\n\nALIASES\n  $ sfdx force package beta version promote\n  $ sfdx force package version promote\n\nEXAMPLES\n  Promote the package version with the specified ID to released; uses your\n  default Dev Hub org:\n\n    $ sfdx package version promote --package 04t...\n\n  Promote the package version with the specified alias to released; uses the\n  Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version promote --package awesome_package_alias \\\n      --target-dev-hub devhub@example.com\n\n  Promote the package version with an alias that has spaces to released:\n\n    $ sfdx package version promote --package \"Awesome Package Alias\"\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_192.txt"}}],["1fd189eb-7b69-416c-b868-797d955a9a90",{"pageContent":"\n\nRetrieve details about a package version in the Dev Hub org.\n\nUSAGE\n  $ sfdx package version report -v <value> -p <value> [--json] [--api-version\n    <value>] [--verbose]\n\nFLAGS\n  -p, --package=<value>         (required) ID (starts with 04t) or alias of the\n                                package to retrieve details for.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n  --verbose                     Display extended package version details.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Retrieve details about a package version in the Dev Hub org.\n\n  To update package version values, run \"sfdx package version update\".\n\nALIASES\n  $ sfdx force package beta version report\n  $ sfdx force package version report\n\nEXAMPLES\n  Retrieve details about the package version with the specified ID from your\n  default Dev Hub org:\n\n    $ sfdx package version report --package 04t...\n\n  Retrieve details about the package version with the specified alias (that\n  contains spaces) from the Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version report --package \"Your Package Alias\" \\\n      --target-dev-hub devhub@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_193.txt"}}],["efe4b168-5af3-4082-bd99-a1e7f92900e1",{"pageContent":"\n\nUpdate a package version.\n\nUSAGE\n  $ sfdx package version update -v <value> -p <value> [--json] [--api-version\n    <value>] [-a <value>] [-e <value>] [-b <value>] [-t <value>] [-k <value>]\n\nFLAGS\n  -a, --version-name=<value>         New package version name.\n  -b, --branch=<value>               New package version branch.\n  -e, --version-description=<value>  New package version description.\n  -k, --installation-key=<value>     New installation key for key-protected\n                                     package (default: null)\n  -p, --package=<value>              (required) ID (starts with 04t) or alias of\n                                     the package to update a version of.\n  -t, --tag=<value>                  New package version tag.\n  -v, --target-dev-hub=<value>       (required) Username or alias of the Dev Hub\n                                     org.\n  --api-version=<value>              Override the api version used for api\n                                     requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Update a package version.\n\n  Specify a new value for each option you want to update.\n\n  To display details about a package version, run \"sfdx package version\n  display\".\n\nALIASES\n  $ sfdx force package beta version update\n  $ sfdx force package version update\n\nEXAMPLES\n  Update the package version that has the specified alias (that contains\n  spaces) with a new installation key \"password123\"; uses your default Dev Hub\n  org:\n\n    $ sfdx package version update --package \"Your Package Alias\" \\\n      --installation-key password123\n\n  Update the package version that has the specified ID with a new branch and\n  tag; use the Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version update --package 04t... --branch main --tag \\\n      'Release 1.0.7' --target-dev-hub devhub@example.com\n\n  Update the package version that has the specified ID with a new description:\n\n    $ sfdx package version update --package 04t... --version-description \\\n      \"New Package Version Description\"\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_194.txt"}}],["3dc21235-f22f-4907-b171-0ecbb009de03",{"pageContent":"\n\nGenerate a Salesforce DX project.\n\nUSAGE\n  $ sfdx force project create -n <value> [--json] [-t standard|empty|analytics]\n    [-d <value>] [-s <value>] [-p <value>] [-x]\n\nFLAGS\n  -d, --output-dir=<value>           [default: .] Directory for saving the\n                                     created files.\n  -n, --name=<value>                 (required) Name of the generated project.\n  -p, --default-package-dir=<value>  [default: force-app] Default package\n                                     directory name.\n  -s, --namespace=<value>            Namespace associated with this project and\n                                     any connected scratch orgs.\n  -t, --template=<option>            [default: standard] Template to use for\n                                     project creation.\n                                     <options: standard|empty|analytics>\n  -x, --manifest                     Generate a manifest (package.xml) for\n                                     change-set based development.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a Salesforce DX project.\n\n  A Salesforce DX project has a specific structure and a configuration file\n  (sfdx-project.json) that identifies the directory as a Salesforce DX project.\n  This command generates the necessary configuration files and directories to\n  get you started.\n\n  By default, the generated sfdx-project.json file sets the sourceApiVersion\n  property to the default API version currently used by Salesforce CLI. To\n  specify a different version, set the apiVersion configuration variable. For\n  example: \"sf config set apiVersion=57.0 --global\".\n\nALIASES\n  $ sfdx force project create\n\nEXAMPLES\n  Generate a project called \"mywork\":\n\n    $ sfdx force project create --name mywork\n\n  Similar to previous example, but generate the files in a directory called\n  \"myapp\":\n\n    $ sfdx force project create --name mywork --default-package-dir myapp\n\n  Similar to prevoius example, but also generate a default package.xml\n  manifest file:\n\n    $ sfdx force project create --name mywork --default-package-dir myapp \\\n      --manifest\n\n  Generate a project with the minimum files and directories:\n\n    $ sfdx force project create --name mywork --template empty\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated project.\n\n    Generates a project directory with this name; any valid directory name is\n    accepted. Also sets the \"name\" property in the sfdx-project.json file to\n    this name.\n\n  -p, --default-package-dir=<value>  Default package directory name.\n\n    Metadata items such as classes and Lightning bundles are placed inside this\n    folder.\n\n  -t, --template=standard|empty|analytics  Template to use for project creation.\n\n    The template determines the sample configuration files and directories that\n    this command generates. For example, the empty template provides these files\n    and directory to get you started.\n\n    - .forceignore\n    - config/project-scratch-def.json\n    - sfdx-project.json\n    - package.json\n    - force-app (basic source directory structure)\n\n    The standard template provides a complete force-app directory structure so\n    you know where to put your source. It also provides additional files and\n    scripts, especially useful when using Salesforce Extensions for VS Code. For\n    example:\n\n    - .gitignore: Use Git for version control.\n    - .prettierrc and .prettierignore: Use Prettier to format your Aura\n    components.\n    - .vscode/extensions.json: When launched, Visual Studio Code, prompts you to\n    install the recommended extensions for your project.\n    - .vscode/launch.json: Configures Replay Debugger.\n    - .vscode/settings.json: Additional configuration settings.\n\n    The analytics template provides similar files and the\n    force-app/main/default/waveTemplates directory.\n\n  -x, --manifest\n\n    Generate a manifest (package.xml) for change-set based development.\n\n    Generates a default manifest (package.xml) for fetching Apex, Visualforce,\n    Lightning components, and static resources\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_195.txt"}}],["763e326a-6815-4dfa-865c-3061ecdac4be",{"pageContent":"\n\nDisplay the metadata for a standard or custom object or a Tooling API object.\n\nUSAGE\n  $ sfdx sobject describe -o <value> -s <value> [--json] [--api-version\n    <value>] [-t]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -s, --sobject=<value>     (required) API name of the object to describe.\n  -t, --use-tooling-api     Use Tooling API to display metadata for Tooling API\n                            objects.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display the metadata for a standard or custom object or a Tooling API object.\n\n  The metadata is displayed in JSON format. See this topic for a description of\n  each property: https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/\n  sforce_api_calls_describesobjects_describesobjectresult.htm.\n\n  This command displays metadata for Salesforce objects by default. Use the\n  --use-tooling-api flag to view metadata for a Tooling API object.\n\nALIASES\n  $ sfdx force schema sobject describe\n\nEXAMPLES\n  Display the metadata of the \"Account\" standard object in your default org:\n\n    $ sfdx sobject describe --sobject Account\n\n  Display the metadata of the \"MyObject__c\" custom object in the org with\n  alias \"my-scratch-org\":\n\n    $ sfdx sobject describe --sobject MyObject__c --target-org \\\n      my-scratch-org\n\n  Display the metadata of the ApexCodeCoverage Tooling API object in your\n  default org:\n\n    $ sfdx sobject describe --sobject ApexCodeCoverage --use-tooling-api\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_196.txt"}}],["8e963695-ff92-449d-9e4a-7d957e821310",{"pageContent":"\n\nList all Salesforce objects of a specified category.\n\nUSAGE\n  $ sfdx sobject list -o <value> [--json] [--api-version <value>] [-s\n    <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -s, --sobject=<value>     [default: ALL] Category of objects to list.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List all Salesforce objects of a specified category.\n\n  You can list the standard objects, custom objects, or all. The lists include\n  only Salesforce objects, not Tooling API objects.\n\nALIASES\n  $ sfdx force schema sobject list\n\nEXAMPLES\n  List all objects in your default org:\n\n    $ sfdx sobject list --sobject all\n\n  List only custom objects in the org with alias \"my-scratch-org\":\n\n    $ sfdx sobject list --sobject custom --target-org my-scratch-org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_197.txt"}}],["d525147c-47cc-4983-9649-d229cbb6a671",{"pageContent":"\n\nConvert source-formatted files into metadata that you can deploy using Metadata API.\n\nUSAGE\n  $ sfdx force source convert [--json] [--api-version <value>] [-r <value>] [-d\n    <value>] [-n <value>] [-p <value> | -x <value> | -m <value>]\n\nFLAGS\n  -d, --output-dir=<value>     [default: metadataPackage_1684336854808] Output\n                               directory to store the Metadata API–formatted\n                               files in.\n  -m, --metadata=<value>...    Metadata component names to convert.\n  -n, --package-name=<value>   Name of the package to associate with the\n                               metadata-formatted files.\n  -p, --source-dir=<value>...  Paths to the local source files to convert.\n  -r, --root-dir=<value>       Source directory other than the default package\n                               to convert.\n  -x, --manifest=<value>       Path to the manifest (package.xml) file that\n                               specifies the metadata types to convert.\n  --api-version=<value>        API Version to use in the generated project's\n                               manifest. By default, will use the version from\n                               sfdx-project.json\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Convert source-formatted files into metadata that you can deploy using\n  Metadata API.\n\n  To convert source-formatted files into the metadata format, so that you can\n  deploy them using Metadata API, run this command. Then deploy the metadata\n  using \"sfdx project deploy\".\n\n  To convert Metadata API–formatted files into the source format, run \"sfdx\n  project convert mdapi\".\n\n  To specify a package name that includes spaces, enclose the name in single\n  quotes.\n\n  To convert multiple components, either set multiple --metadata <name> flags or\n  a single --metadata flag with multiple names separated by spaces. Enclose\n  names that contain spaces in one set of double quotes. The same syntax applies\n  to --manifest and --source-dir.\n\nALIASES\n  $ sfdx force source convert\n\nEXAMPLES\n  Convert source-formatted files in the specified directory into\n  metadata-formatted files; writes converted files into a new directory:\n\n    $ sfdx force source convert --root-dir path/to/source\n\n  Similar to previous example, but writes converted files to the specified\n  output directory and associates the files with the specified package:\n\n    $ sfdx force source convert --root-dir path/to/source --output-dir \\\n      path/to/outputdir --package-name 'My Package'\n\nFLAG DESCRIPTIONS\n  -p, --source-dir=<value>...  Paths to the local source files to convert.\n\n    The supplied paths can be to a single file (in which case the operation is\n    applied to only one file) or to a folder (in which case the operation is\n    applied to all metadata types in the directory and its sub-directories).\n\n    If you specify this parameter, don’t specify --manifest or --metadata.\n\n  -x, --manifest=<value>\n\n    Path to the manifest (package.xml) file that specifies the metadata types to\n    convert.\n\n    If you specify this parameter, don’t specify --metadata or --source-dir.\n\n  --api-version=<value>\n\n    API Version to use in the generated project's manifest. By default, will use\n    the version from sfdx-project.json\n\n    Override the api version used for api requests made by this command\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_198.txt"}}],["56fc280a-89bc-4dbe-ab04-61f9427bd811",{"pageContent":"\n\nDelete source from your project and from a non-source-tracked org.\n\nUSAGE\n  $ sfdx project delete source -o <value> [--json] [--api-version <value>] [-w\n    <value>] [-l NoTestRun|RunLocalTests|RunAllTestsInOrg] [-r] [-m <value>] [-p\n    <value>] [-f [-t | -c]] [--verbose]\n\nFLAGS\n  -c, --check-only             Validate delete command but don't delete anything\n                               from the org or the local project.\n  -f, --force-overwrite        Ignore conflict warnings and overwrite changes to\n                               the org.\n  -l, --test-level=<option>    Deployment Apex testing level.\n                               <options:\n                               NoTestRun|RunLocalTests|RunAllTestsInOrg>\n  -m, --metadata=<value>...    Metadata components to delete.\n  -o, --target-org=<value>     (required) Username or alias of the target org.\n  -p, --source-dir=<value>...  Source file paths to delete.\n  -r, --no-prompt              Don't prompt for delete confirmation.\n  -t, --track-source           If the delete succeeds, update the source\n                               tracking information.\n  -w, --wait=<value>           [default: 33 minutes] Number of minutes to wait\n                               for the command to finish.\n  --api-version=<value>        Override the api version used for api requests\n                               made by this command\n  --verbose                    Verbose output of the delete result.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete source from your project and from a non-source-tracked org.\n\n  Use this command to delete components from orgs that don’t have source\n  tracking. To remove deleted items from orgs that have source tracking enabled,\n  \"sfdx project deploy start\".\n\n  When you run this command, both the local source file and the metadata\n  component in the org are deleted.\n\n  To delete multiple metadata components, either set multiple --metadata <name>\n  flags or a single --metadata flag with multiple names separated by spaces.\n  Enclose names that contain spaces in one set of double quotes. The same syntax\n  applies to --manifest and --source-dir.\n\nALIASES\n  $ sfdx force source delete\n\nEXAMPLES\n  Delete all local Apex source files and all Apex classes from the org with\n  alias \"my-scratch\":\n\n    $ sfdx project delete source --metadata ApexClass --target-org \\\n      my-scratch\n\n  Delete a specific Apex class and a Profile that has a space in it from your\n  default org; don't prompt for confirmation:\n\n    $ sfdx project delete source --metadata ApexClass:MyFabulousApexClass \\\n      --metadata \"Profile: My Profile\" --no-prompt\n\n  Run the tests that aren’t in any managed packages as part of the deletion;\n  if the delete succeeds, and the org has source-tracking enabled, update the\n  source tracking information:\n\n    $ sfdx project delete source --metadata ApexClass --test-level \\\n      RunLocalTests --track-source\n\n  Delete the Apex source files in a directory and the corresponding components\n  from your default org:\n\n    $ sfdx project delete source --source-dir force-app/main/default/classes\n\nFLAG DESCRIPTIONS\n  -c, --check-only\n\n    Validate delete command but don't delete anything from the org or the local\n    project.\n\n    IMPORTANT: Where possible, we changed noninclusive terms to align with our\n    company value of Equality. We maintained certain terms to avoid any effect\n    on customer implementations.\n\n    Validates the deleted metadata and runs all Apex tests, but prevents the\n    deletion from being saved to the org.\n\n    If you change a field type from Master-Detail to Lookup or vice versa, that\n    change isn’t supported when using the --chec-konly parameter to test a\n    deletion (validation). This kind of change isn’t supported for test\n    deletions to avoid the risk of data loss or corruption. If a change that\n    isn’t supported for test deletions is included in a deletion package, the\n    test deletion fails and issues an error.\n\n    If your deletion package changes a field type from Master-Detail to Lookup\n    or vice versa, you can still validate the changes prior to deploying to\n    Production by performing a full deletion to another test Sandbox. A full\n    deletion includes a validation of the changes as part of the deletion\n    process.\n\n    Note: A Metadata API deletion that includes Master-Detail relationships\n    deletes all detail records in the Recycle Bin in the following cases.\n\n    1. For a deletion with a new Master-Detail field, soft delete (send to the\n    Recycle Bin) all detail records before proceeding to delete the\n    Master-Detail field, or the deletion fails. During the deletion, detail\n    records are permanently deleted from the Recycle Bin and cannot be\n    recovered.\n\n    2. For a deletion that converts a Lookup field relationship to a\n    Master-Detail relationship, detail records must reference a master record or\n    be soft-deleted (sent to the Recycle Bin) for the deletion to succeed.\n    However, a successful deletion permanently deletes any detail records in the\n    Recycle Bin.\n\n  -l, --test-level=NoTestRun|RunLocalTests|RunAllTestsInOrg\n\n    Deployment Apex testing level.\n\n    Valid values are:\n\n    - NoTestRun — No tests are run. This test level applies only to deployments\n    to development environments, such as sandbox, Developer Edition, or trial\n    orgs. This test level is the default for development environments.\n    - RunLocalTests — All tests in your org are run, except the ones that\n    originate from installed managed and unlocked packages. This test level is\n    the default for production deployments that include Apex classes or\n    triggers.\n    - RunAllTestsInOrg — All tests in your org are run, including tests of\n    managed packages.\n\n    If you don’t specify a test level, the default behavior depends on the\n    contents of your deployment package and target org. For more information,\n    see “Running Tests in a Deployment” in the Metadata API Developer Guide.\n\n  -m, --metadata=<value>...  Metadata components to delete.\n\n    If you specify this parameter, don’t specify --source-dir.\n\n  -p, --source-dir=<value>...  Source file paths to delete.\n\n    The supplied paths can be a single file (in which case the operation is\n    applied to only one file) or a folder (in which case the operation is\n    applied to all metadata types in the directory and its sub-directories).\n\n    If you specify this parameter, don’t specify --metadata.\n\n  -w, --wait=<value>  Number of minutes to wait for the command to finish.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_199.txt"}}],["e023c295-ed17-4b48-b65d-741ee1f1cc15",{"pageContent":"\n\nSet one or more aliases on your local computer.\n\nUSAGE\n  $ sfdx alias set [--json]\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Set one or more aliases on your local computer.\n\n  Aliases are user-defined short names that make it easier to use the CLI. For\n  example, users often set an alias for a scratch org usernames because they're\n  long and unintuitive.  Check the --help of a CLI command to determine where\n  you can use an alias.\n\n  You can associate an alias with only one value at a time. If you set an alias\n  multiple times, the alias points to the most recent value. Aliases are global;\n  after you set an alias, you can use it in any Salesforce DX project on your\n  computer.\n\n  Use quotes to specify an alias value that contains spaces. You typically use\n  an equal sign to set your alias, although you don't need it if you're setting\n  a single alias in a command.\n\nALIASES\n  $ sfdx force alias set\n\nEXAMPLES\n  Set an alias for a scratch org username:\n\n    $ sfdx alias set my-scratch-org=test-sadbiytjsupn@example.com\n\n  Set multiple aliases with a single command:\n\n    $ sfdx alias set my-scratch-org=test-sadbiytjsupn@example.com \\\n      my-other-scratch-org=test-ss0xut7txzxf@example.com\n\n  Set an alias that contains spaces:\n\n    $ sfdx alias set my-alias='alias with spaces'\n\n  Set a single alias without using an equal sign:\n\n    $ sfdx alias set my-scratch-org test-ss0xut7txzxf@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_2.txt"}}],["f4c6047a-b7dd-4c93-ba71-0640ce4633bc",{"pageContent":"\n\ndisplay autocomplete installation instructions\n\nUSAGE\n  $ sfdx autocomplete [SHELL] [-r]\n\nARGUMENTS\n  SHELL  (zsh|bash|powershell) Shell type\n\nFLAGS\n  -r, --refresh-cache  Refresh cache (ignores displaying instructions)\n\nDESCRIPTION\n  display autocomplete installation instructions\n\nEXAMPLES\n  $ sfdx autocomplete\n\n  $ sfdx autocomplete bash\n\n  $ sfdx autocomplete zsh\n\n  $ sfdx autocomplete powershell\n\n  $ sfdx autocomplete --refresh-cache\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_20.txt"}}],["86fdd69a-4143-465f-be26-218572a21b6e",{"pageContent":"\n\nWe plan to deprecate this command in the future. Try using the \"project deploy start\" command instead.\nDeploy source to an org.\n\nUSAGE\n  $ sfdx force source deploy -u <value> [--json] [--api-version <value>]\n    [--soapdeploy] [-w <value>] [-o] [-g] [--purgeondelete -x <value>] [-q\n    <value> | -c | -l NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg\n    | -r <value> | -t] [--verbose] [-m <value>] [-p <value>]\n    [--predestructivechanges <value> ] [--postdestructivechanges <value> ] [-f ]\n    [--resultsdir <value>] [--coverageformatters clover|cobertura|html-spa|html|\n    json|json-summary|lcovonly|none|teamcity|text|text-summary] [--junit]\n\nFLAGS\n  -c, --checkonly\n      Validate the deployed metadata and run all Apex tests, but don't save to the\n      org.\n\n  -f, --forceoverwrite\n      Ignore conflict warnings and overwrite changes to the org.\n\n  -g, --ignorewarnings\n      Allow a deployment to complete successfully even if there are warnings.\n\n  -l, --testlevel=<option>\n      Deployment testing level.\n      <options: NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg>\n\n  -m, --metadata=<value>...\n      Comma-separated list of metadata component names.\n\n  -o, --ignoreerrors\n      Ignore any errors and don't roll back deployment.\n\n  -p, --sourcepath=<value>...\n      Comma-separated list of source file paths to deploy.\n\n  -q, --validateddeployrequestid=<value>\n      Deploy request ID of the validated deployment to run a Quick Deploy.\n\n  -r, --runtests=<value>...\n      Apex test classes to run if --testlevel RunSpecifiedTests.\n\n  -t, --tracksource\n      If the deploy succeeds, update source tracking information.\n\n  -u, --target-org=<value>\n      (required) Username or alias of the target org.\n\n  -w, --wait=<value>\n      [default: 33 minutes] Wait time for command to finish in minutes.\n\n  -x, --manifest=<value>\n      Complete path for the manifest (package.xml) file that specifies the\n      components to deploy.\n\n  --api-version=<value>\n      Override the api version used for api requests made by this command\n\n  --coverageformatters=clover,cobertura,html-spa,html,json,json-summary,lcovonly\n  ,none,teamcity,text,text-summary...\n      Format of the code coverage results.\n\n  --junit\n      Output JUnit test results.\n\n  --postdestructivechanges=<value>\n      File path for a manifest (destructiveChangesPost.xml) of components to\n      delete after the deploy.\n\n  --predestructivechanges=<value>\n      File path for a manifest (destructiveChangesPre.xml) of components to delete\n      before the deploy.\n\n  --purgeondelete\n      Specify that deleted components in the destructive changes manifest file are\n      immediately eligible for deletion rather than being stored in the Recycle\n      Bin.\n\n  --resultsdir=<value>\n      Output directory for code coverage and JUnit results; defaults to the deploy\n      ID.\n\n  --soapdeploy\n      Deploy metadata with SOAP API instead of REST API.\n\n  --verbose\n      Specify verbose output about the deploy result.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Deploy source to an org.\n\n  Use this command to deploy source (metadata that’s in source format) to an\n  org. To take advantage of change tracking with scratch orgs, use \"force source\n  push\". To deploy metadata that’s in metadata format, use \"force mdapi deploy\".\n\n  The source you deploy overwrites the corresponding metadata in your org. This\n  command does not attempt to merge your source with the versions in your org.\n\n  To run the command asynchronously, set --wait to 0, which immediately returns\n  the job ID. This way, you can continue to use the CLI. To check the status of\n  the job, use \"force source deploy report\".\n\n  If the comma-separated list you’re supplying contains spaces, enclose the\n  entire comma-separated list in one set of double quotes. On Windows, if the\n  list contains commas, also enclose the entire list in one set of double\n  quotes.\n\n  If you use the --manifest, --predestructivechanges, or\n  --postdestructivechanges parameters, run the \"force source manifest create\"\n  command to easily generate the different types of manifest files.\n\nEXAMPLES\n  Deploy the source files in a directory:\n\n    $ sfdx force source deploy --sourcepath path/to/source\n\n  Deploy a specific Apex class and the objects whose source is in a directory:\n\n    $ sfdx force source deploy --sourcepath \\\n      \"path/to/apex/classes/MyClass.cls,path/to/source/objects\"\n\n  Deploy source files in a comma-separated list that contains spaces:\n\n    $ sfdx force source deploy --sourcepath \\\n      \"path/to/objects/MyCustomObject/fields/MyField.field-meta.xml, \\\n      path/to/apex/classes\"\n\n  Deploy all Apex classes:\n\n    $ sfdx force source deploy --metadata ApexClass\n\n  Deploy a specific Apex class:\n\n    $ sfdx force source deploy --metadata ApexClass:MyApexClass\n\n  Deploy a specific Apex class and update source tracking files :\n\n    $ sfdx force source deploy --metadata ApexClass:MyApexClass \\\n      --tracksource\n\n  Deploy all custom objects and Apex classes:\n\n    $ sfdx force source deploy --metadata \"CustomObject,ApexClass\"\n\n  Deploy all Apex classes and two specific profiles (one of which has a space\n  in its name):\n\n    $ sfdx force source deploy --metadata \"ApexClass, Profile:My Profile, \\\n      Profile: AnotherProfile\"\n\n  Deploy all components listed in a manifest:\n\n    $ sfdx force source deploy --manifest path/to/package.xml\n\n  Run the tests that aren’t in any managed packages as part of a deployment:\n\n    $ sfdx force source deploy --metadata ApexClass --testlevel \\\n      RunLocalTests\n\n  Check whether a deployment would succeed (to prepare for Quick Deploy):\n\n    $ sfdx force source deploy --metadata ApexClass --testlevel \\\n      RunAllTestsInOrg -c\n\n  Deploy an already validated deployment (Quick Deploy):\n\n    $ sfdx force source deploy --validateddeployrequestid \\\n      0Af9A00000FTM6pSAH`\n\n  Run a destructive operation before the deploy occurs:\n\n    $ sfdx force source deploy --manifest package.xml \\\n      --predestructivechanges destructiveChangesPre.xml\n\n  Run a destructive operation after the deploy occurs:\n\n    $ sfdx force source deploy --manifest package.xml \\\n      --postdestructivechanges destructiveChangesPost.xml\n\nFLAG DESCRIPTIONS\n  -c, --checkonly\n\n    Validate the deployed metadata and run all Apex tests, but don't save to the\n    org.\n\n    IMPORTANT: Where possible, we changed noninclusive terms to align with our\n    company value of Equality. We maintained certain terms to avoid any effect\n    on customer implementations.\n\n    If you change a field type from Master-Detail to Lookup or vice versa, that\n    change isn’t supported when using the --checkonly parameter to test a\n    deployment (validation). This kind of change isn’t supported for test\n    deployments to avoid the risk of data loss or corruption. If a change that\n    isn’t supported for test deployments is included in a deployment package,\n    the test deployment fails and issues an error.\n\n    If your deployment package changes a field type from Master-Detail to Lookup\n    or vice versa, you can still validate the changes prior to deploying to\n    Production by performing a full deployment to another test Sandbox. A full\n    deployment includes a validation of the changes as part of the deployment\n    process.\n\n    Note: A Metadata API deployment that includes Master-Detail relationships\n    deletes all detail records in the Recycle Bin in the following cases.\n\n    1. For a deployment with a new Master-Detail field, soft delete (send to the\n    Recycle Bin) all detail records before proceeding to deploy the\n    Master-Detail field, or the deployment fails. During the deployment, detail\n    records are permanently deleted from the Recycle Bin and cannot be\n    recovered.\n\n    2. For a deployment that converts a Lookup field relationship to a\n    Master-Detail relationship, detail records must reference a master record or\n    be soft-deleted (sent to the Recycle Bin) for the deployment to succeed.\n    However, a successful deployment permanently deletes any detail records in\n    the Recycle Bin.\n\n  -g, --ignorewarnings\n\n    Allow a deployment to complete successfully even if there are warnings.\n\n    If a warning occurs and ignoreWarnings is set to true, the success field in\n    DeployMessage is true. When ignoreWarnings is set to false, success is set\n    to false, and the warning is treated like an error.\n\n  -l, --testlevel=NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg\n\n    Deployment testing level.\n\n    Valid values are:\n\n    - NoTestRun—No tests are run. This test level applies only to deployments to\n    development environments, such as sandbox, Developer Edition, or trial orgs.\n    This test level is the default for development environments.\n\n    - RunSpecifiedTests—Runs only the tests that you specify in the --runtests\n    option. Code coverage requirements differ from the default coverage\n    requirements when using this test level. Executed tests must comprise a\n    minimum of 75% code coverage for each class and trigger in the deployment\n    package. This coverage is computed for each class and trigger individually\n    and is different than the overall coverage percentage.\n\n    - RunLocalTests—All tests in your org are run, except the ones that\n    originate from installed managed and unlocked packages. This test level is\n    the default for production deployments that include Apex classes or\n    triggers.\n\n    - RunAllTestsInOrg—All tests in your org are run, including tests of managed\n    packages.\n\n    If you don’t specify a test level, the default behavior depends on the\n    contents of your deployment package. For more information, see “Running\n    Tests in a Deployment” in the Metadata API Developer Guide.\n\n  -m, --metadata=<value>...  Comma-separated list of metadata component names.\n\n    If you specify this parameter, don’t specify --manifest or --sourcepath.\n\n  -o, --ignoreerrors  Ignore any errors and don't roll back deployment.\n\n    Keep this parameter set to false when deploying to a production org. If set\n    to true, components without errors are deployed, and components with errors\n    are skipped.\n\n  -p, --sourcepath=<value>...\n\n    Comma-separated list of source file paths to deploy.\n\n    The supplied paths can be to a single file (in which case the operation is\n    applied to only one file) or to a folder (in which case the operation is\n    applied to all metadata types in the directory and its sub-directories).\n\n    If you specify this parameter, don’t specify --manifest or --metadata.\n\n  -q, --validateddeployrequestid=<value>\n\n    Deploy request ID of the validated deployment to run a Quick Deploy.\n\n    Deploying a validation helps you shorten your deployment time because tests\n    aren’t rerun. If you have a recent successful validation, you can deploy the\n    validated components without running tests. A validation doesn’t save any\n    components in the org. You use a validation only to check the success or\n    failure messages that you would receive with an actual deployment. To\n    validate your components, add the -c | --checkonly flag when you run \"force\n    mdapi deploy\". This flag sets the checkOnly=\"true\" parameter for your\n    deployment. Before deploying a recent validation, ensure that the following\n    requirements are met:\n\n    1. The components have been validated successfully for the target\n    environment within the last 10 days.\n\n    2. As part of the validation, Apex tests in the target org have passed.\n\n    3. Code coverage requirements are met.\n\n    * If all tests in the org or all local tests are run, overall code coverage\n    is at least 75%, and Apex triggers have some coverage.\n\n    * If specific tests are run with the RunSpecifiedTests test level, each\n    class and trigger that was deployed is covered by at least 75% individually.\n\n  -t, --tracksource  If the deploy succeeds, update source tracking information.\n\n    Doesn't delete locally deleted files from org unless you also specify\n    --predestructivechanges or --postdestructivechanges.\n\n  -w, --wait=<value>  Wait time for command to finish in minutes.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you.\n\n  -x, --manifest=<value>\n\n    Complete path for the manifest (package.xml) file that specifies the\n    components to deploy.\n\n    All child components are included.\n\n    If you specify this parameter, don’t specify --metadata or --sourcepath.\n\nCOMMANDS\n  force source deploy cancel  Cancel a source deployment.\n  force source deploy report  Check the status of a metadata deployment\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_200.txt"}}],["71bcad79-4ab1-4976-9967-a61bb11e4f40",{"pageContent":"\n\nWe plan to deprecate this command in the future. Try using the \"project deploy cancel\" command instead.\nCancel a source deployment.\n\nUSAGE\n  $ sfdx force source deploy cancel -o <value> [--json] [--api-version <value>] [-w\n    <value>] [-i <value>]\n\nFLAGS\n  -i, --jobid=<value>       Job ID of the deployment you want to cancel;\n                            defaults to your most recent CLI deployment if not\n                            specified.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -w, --wait=<value>        [default: 33 minutes] Number of minutes to wait for\n                            the command to complete and display results.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Cancel a source deployment.\n\n  Use this command to cancel a specified asynchronous source deployment. You can\n  also specify a wait time (in minutes) to check for updates to the canceled\n  deploy status.\n\n  To run the command asynchronously, set --wait to 0, which immediately returns\n  the job ID. This way, you can continue to use the CLI. To check the status of\n  the job, use \"force source deploy report\".\n\nEXAMPLES\n  Cancel a deployment and wait two minutes:\n\n    $ sfdx force source deploy cancel --wait 2\n\n  If you have multiple deployments in progress and want to cancel a specific\n  one, specify the job ID:\n\n    $ sfdx force source deploy cancel --jobid <jobid>\n\nFLAG DESCRIPTIONS\n  -w, --wait=<value>\n\n    Number of minutes to wait for the command to complete and display results.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_201.txt"}}],["996e3df4-8ed4-4c6e-9707-620b53c2fdc0",{"pageContent":"\n\nWe plan to deprecate this command in the future. Try using the \"project deploy start\" and \"project deploy report\" pair instead.\nCheck the status of a metadata deployment.\n\nUSAGE\n  $ sfdx force source deploy report -o <value> [--json] [--api-version <value>] [-w\n    <value>] [-i <value>] [--verbose] [--resultsdir <value>]\n    [--coverageformatters clover|cobertura|html-spa|html|json|json-summary|lcovo\n    nly|none|teamcity|text|text-summary] [--junit]\n\nFLAGS\n  -i, --jobid=<value>\n      Job ID of the deployment you want to check; defaults to your most recent CLI\n      deployment.\n\n  -o, --target-org=<value>\n      (required) Username or alias of the target org.\n\n  -w, --wait=<value>\n      [default: 33 minutes] Number of minutes to wait for the command to complete\n      and display results to the terminal window.\n\n  --api-version=<value>\n      Override the api version used for api requests made by this command\n\n  --coverageformatters=clover,cobertura,html-spa,html,json,json-summary,lcovonly\n  ,none,teamcity,text,text-summary...\n      Format of the code coverage results.\n\n  --junit\n      Output JUnit test results.\n\n  --resultsdir=<value>\n      Output directory for code coverage and JUnit results; defaults to the deploy\n      ID.\n\n  --verbose\n      Verbose output of deploy result.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Check the status of a metadata deployment.\n\n  Specify the job ID for the deploy you want to check. You can also specify a\n  wait time (minutes) to check for updates to the deploy status.\n\nEXAMPLES\n  Check the status of the most recent deployment on your default org:\n\n    $ sfdx force source deploy report\n\n  Check the status using the job ID; output JUnit test results and format code\n  coverage results in the specified format:\n\n    $ sfdx force source deploy report --jobid <id> --junit \\\n      --coverageformatters cobertura\n\nFLAG DESCRIPTIONS\n  -w, --wait=<value>\n\n    Number of minutes to wait for the command to complete and display results to\n    the terminal window.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_202.txt"}}],["94543998-327f-4251-9068-b26b352367d0",{"pageContent":"\n\nCheck your local project package directories for forceignored files.\n\nUSAGE\n  $ sfdx force source ignored list [--json] [-p <value>]\n\nFLAGS\n  -p, --source-dir=<value>  File or directory of files that the command checks\n                            for foreceignored files.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Check your local project package directories for forceignored files.\n\n  When deploying or retrieving metadata between your local project and an org,\n  you can specify the source files you want to exclude with a .forceignore file.\n  The .forceignore file structure mimics the .gitignore structure. Each line in\n  .forceignore specifies a pattern that corresponds to one or more files. The\n  files typically represent metadata components, but can be any files you want\n  to exclude, such as LWC configuration JSON files or tests.\n\nALIASES\n  $ sfdx force source ignored list\n\nEXAMPLES\n  List all the files in all package directories that are ignored:\n\n    $ sfdx force source ignored list\n\n  List all the files in a specific directory that are ignored:\n\n    $ sfdx force source ignored list --source-dir force-app\n\n  Check if a particular file is ignored:\n\n    $ sfdx force source ignored list --source-dir package.xml\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_203.txt"}}],["6ac9723b-6d30-498c-8047-7cc65ab5d319",{"pageContent":"\n\nCreate a project manifest that lists the metadata components you want to deploy or retrieve.\n\nUSAGE\n  $ sfdx force source manifest create [--json] [--api-version <value>] [-m <value>] [-p\n    <value>] [-n <value> | -t pre|post|destroy|package] [-c managed|unlocked\n    --from-org <value>] [-d <value>]\n\nFLAGS\n  -c, --include-packages=<option>...  Package types (managed, unlocked) whose\n                                      metadata is included in the manifest; by\n                                      default, metadata in packages is ignored.\n                                      <options: managed|unlocked>\n  -d, --output-dir=<value>            Directory to save the created manifest.\n  -m, --metadata=<value>...           Names of metadata components to include in\n                                      the manifest.\n  -n, --name=<value>                  Name of a custom manifest file to create.\n  -p, --source-dir=<value>...         Paths to the local source files to include\n                                      in the manifest.\n  -t, --type=<option>                 Type of manifest to create; the type\n                                      determines the name of the created file.\n                                      <options: pre|post|destroy|package>\n  --api-version=<value>               Override the api version used for api\n                                      requests made by this command\n  --from-org=<value>                  Username or alias of the org that contains\n                                      the metadata components from which to\n                                      build a manifest.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a project manifest that lists the metadata components you want to\n  deploy or retrieve.\n\n  Create a manifest from a list of metadata components (--metadata) or from one\n  or more local directories that contain source files (--source-dir). You can\n  specify either of these parameters, not both.\n\n  Use --type to specify the type of manifest you want to create. The resulting\n  manifest files have specific names, such as the standard package.xml or\n  destructiveChanges.xml to delete metadata. Valid values for this parameter,\n  and their respective file names, are:\n\n  * package : package.xml (default)\n  * pre : destructiveChangesPre.xml\n  * post : destructiveChangesPost.xml\n  * destroy : destructiveChanges.xml\n\n  See https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/m\n  eta_deploy_deleting_files.htm for information about these destructive manifest\n  files.\n\n  Use --name to specify a custom name for the generated manifest if the\n  pre-defined ones don’t suit your needs. You can specify either --type or\n  --name, but not both.\n\n  To include multiple metadata components, either set multiple --metadata <name>\n  flags or a single --metadata flag with multiple names separated by spaces.\n  Enclose names that contain spaces in one set of double quotes. The same syntax\n  applies to --include-packages and --source-dir.\n\nALIASES\n  $ sfdx force source manifest create\n\nEXAMPLES\n  Create a manifest for deploying or retrieving all Apex classes and custom\n  objects:\n\n    $ sfdx force source manifest create --metadata ApexClass --metadata \\\n      CustomObject\n\n  Create a manifest for deleting the specified Apex class:\n\n    $ sfdx force source manifest create --metadata ApexClass:MyApexClass \\\n      --type destroy\n\n  Create a manifest for deploying or retrieving all the metadata components in\n  the specified local directory; name the file myNewManifest.xml:\n\n    $ sfdx force source manifest create --source-dir force-app --name \\\n      myNewManifest\n\n  Create a manifest from the metadata components in the specified org and\n  include metadata in any unlocked packages:\n\n    $ sfdx force source manifest create --from-org test@myorg.com \\\n      --include-packages unlocked\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_204.txt"}}],["c3a605a9-5491-4d9a-b497-7c71f03a71d4",{"pageContent":"\n\nOpen your default scratch org, or another specified org, in a browser.\n\nUSAGE\n  $ sfdx org open -o <value> [--json] [--api-version <value>] [-b\n    chrome|edge|firefox | -r] [-p <value> | -f <value>]\n\nFLAGS\n  -b, --browser=<option>     Browser where the org opens.\n                             <options: chrome|edge|firefox>\n  -f, --source-file=<value>  Path to an ApexPage or FlexiPage to open in\n                             Lightning App Builder.\n  -o, --target-org=<value>   (required) Username or alias of the target org.\n  -p, --path=<value>         Navigation URL path to open a specific page.\n  -r, --url-only             Display navigation URL, but don’t launch browser.\n  --api-version=<value>      Override the api version used for api requests made\n                             by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Open your default scratch org, or another specified org, in a browser.\n\n  To open a specific page, specify the portion of the URL after\n  \"https://MyDomainName.my.salesforce.com/\" as the value for the --path flag.\n  For example, specify \"--path lightning\" to open Lightning Experience, or\n  specify \"--path /apex/YourPage\" to open a Visualforce page.\n\n  Use the --source-file to open a Lightning Page from your local project in\n  Lightning App Builder. Lightning page files have the suffix\n  .flexipage-meta.xml, and are stored in the \"flexipages\" directory.\n\n  To generate a URL but not launch it in your browser, specify --url-only.\n\n  To open in a specific browser, use the --browser flag. Supported browsers are\n  \"chrome\", \"edge\", and \"firefox\". If you don't specify --browser, the org opens\n  in your default browser.\n\nALIASES\n  $ sfdx force org open\n  $ sfdx force source open\n\nEXAMPLES\n  Open your default org in your default browser:\n\n    $ sfdx org open\n\n  Open the org with alias MyTestOrg1 in the Firefox browser:\n\n    $ sfdx org open --target-org MyTestOrg1 --browser firefox\n\n  Display the navigation URL for the Lightning Experience page for your\n  default org, but don't open the page in a browser:\n\n    $ sfdx org open --url-only --path lightning\n\n  Open a local Lightning page in your default org's Lightning App Builder:\n\n    $ sfdx org open --source-path \\\n      force-app/main/default/flexipages/Hello.flexipage-meta.xml\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_205.txt"}}],["7cc8c0e7-4d8f-479d-acce-9fbe535ce0d8",{"pageContent":"\n\nWe plan to deprecate this command in the future. Try using the \"project retrieve start\" command instead.\nPull changed source from the org to your project to keep them in sync.\n\nUSAGE\n  $ sfdx force source pull -o <value> [--json] [--verbose] [--api-version\n    <value>] [-f] [-w <value>]\n\nFLAGS\n  -f, --forceoverwrite      Ignore conflict warnings; changes in the org\n                            overwrite changes in the project.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -w, --wait=<value>        [default: 33 minutes] Number of minutes to wait for\n                            the command to complete and display results to the\n                            terminal window.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n  --verbose                 Display additional details about the command\n                            results.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Pull changed source from the org to your project to keep them in sync.\n\n  If the command detects a conflict, it displays the conflicts but does not\n  complete the process. After reviewing the conflict, rerun the command with the\n  --forceoverwrite parameter.\n\nEXAMPLES\n  Pull source from your default org:\n\n    $ sfdx force source pull\n\n  Pull source from the org with alias \"myscratch\"; ignore any conflicts and\n  overwrite the local project files with org changes; wait for only 5 minutes:\n\n    $ sfdx force source pull --target-org myscratch --wait 5 \\\n      --forceoverwrite\n\nFLAG DESCRIPTIONS\n  -w, --wait=<value>\n\n    Number of minutes to wait for the command to complete and display results to\n    the terminal window.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_206.txt"}}],["52329b04-8c33-4ef3-b5d7-f061e6446016",{"pageContent":"\n\nWe plan to deprecate this command in the future. Try using the \"project deploy start\" command instead.\nPush changed source from your project to an org to keep them in sync.\n\nUSAGE\n  $ sfdx force source push -o <value> [--json] [--api-version <value>] [-f] [-w\n    <value>] [-g] [--quiet]\n\nFLAGS\n  -f, --forceoverwrite      Ignore conflict warnings and push source anyway;\n                            changes in the project overwrite changes in the org.\n  -g, --ignorewarnings      Deploy changes even if warnings are generated.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -w, --wait=<value>        [default: 33 minutes] Number of minutes to wait for\n                            the command to complete and display results to the\n                            terminal window.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n  --quiet                   Minimize JSON and sdtout output on success.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Push changed source from your project to an org to keep them in sync.\n\n  If the command detects a conflict, it displays the conflicts but does not\n  complete the process. After reviewing the conflict, rerun the command with the\n  --forceoverwrite parameter.\n\nEXAMPLES\n  Push source to your default org:\n\n    $ sfdx force source push\n\n  Push source to the org with alias \"myscratch\"; ignore any conflicts and\n  overwrite with org with the local project changes; wait for only 5 minutes:\n\n    $ sfdx force source push --target-org myscratch --wait 5 \\\n      --forceoverwrite\n\nFLAG DESCRIPTIONS\n  -w, --wait=<value>\n\n    Number of minutes to wait for the command to complete and display results to\n    the terminal window.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_207.txt"}}],["2a6b78ee-a90b-4e2b-8031-08395bdc5205",{"pageContent":"\n\nWe plan to deprecate this command in the future. Try using the \"project retrieve start\" command instead.\nRetrieve source from an org.\n\nUSAGE\n  $ sfdx force source retrieve -o <value> [--json] [--api-version <value>] [-r\n    <value> | -n <value> | -p <value>] [-a <value>] [-w <value>] [-x <value> |\n    -m <value> | ] [-f -t] [--verbose]\n\nFLAGS\n  -a, --apiversion=<value>\n  -f, --forceoverwrite             Ignore conflict warnings and overwrite\n                                   changes to the project.\n  -m, --metadata=<value>...        Comma-separated list of names of metadata\n                                   components to retrieve from the org.\n  -n, --packagenames=<value>...    Comma-separated list of packages to retrieve.\n  -o, --target-org=<value>         (required) Username or alias of the target\n                                   org.\n  -p, --sourcepath=<value>...      Comma-separated list of file paths for source\n                                   to retrieve from the org.\n  -r, --retrievetargetdir=<value>  Root of the directory structure into which\n                                   the source files are retrieved.\n  -t, --tracksource                If the retrieve succeeds, update source\n                                   tracking information; doesn't delete local\n                                   files that were deleted in the org.\n  -w, --wait=<value>               [default: 33 minutes] Number of minutes to\n                                   wait for the command to complete and display\n                                   results to the terminal window.\n  -x, --manifest=<value>           Complete path for the manifest (package.xml)\n                                   file that specifies the components to\n                                   retrieve.\n  --api-version=<value>            Override the api version used for api\n                                   requests made by this command\n  --verbose                        Verbose output of retrieve result.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Retrieve source from an org.\n\n  Use this command to retrieve source (metadata that’s in source format) from an\n  org. To take advantage of change tracking with scratch orgs, use \"force source\n  pull\". To retrieve metadata that’s in metadata format, use \"force mdapi\n  retrieve\".\n\n  The source you retrieve overwrites the corresponding source files in your\n  local project. This command does not attempt to merge the source from your org\n  with your local source files.\n\n  If the comma-separated list you’re supplying contains spaces, enclose the\n  entire comma-separated list in one set of double quotes. On Windows, if the\n  list contains commas, also enclose it in one set of double quotes.\n\nEXAMPLES\n  Retrieve the source files in a directory from your default org:\n\n    $ sfdx force source retrieve --sourcepath path/to/source\n\n  Retrieve a specific Apex class and the objects whose source is in a\n  directory from an org with alias \"myscratch\":\n\n    $ sfdx force source retrieve --sourcepath \\\n      \"path/to/apex/classes/MyClass.cls,path/to/source/objects\" --target-org \\\n      myscratch\n\n  Retrieve source files in a comma-separated list that contains spaces:\n\n    $ sfdx force source retrieve --sourcepath \\\n      \"path/to/objects/MyCustomObject/fields/MyField.field-meta.xml, \\\n      path/to/apex/classes\"\n\n  Retrieve all Apex classes:\n\n    $ sfdx force source retrieve --metadata ApexClass\n\n  Retrieve a specific Apex class:\n\n    $ sfdx force source retrieve --metadata ApexClass:MyApexClass\n\n  Retrieve a specific Apex class and update source tracking files:\n\n    $ sfdx force source retrieve --metadata ApexClass:MyApexClass \\\n      --tracksource\n\n  Retrieve all custom objects and Apex classes:\n\n    $ sfdx force source retrieve --metadata \"CustomObject,ApexClass\"\n\n  Retrieve all Apex classes and two specific profiles (one of which has a\n  space in its name):\n\n    $ sfdx force source retrieve --metadata \"ApexClass, Profile:My Profile, \\\n      Profile: AnotherProfile\"\n\n  Retrieve all metadata components listed in a manifest:\n\n    $ sfdx force source retrieve --manifest path/to/package.xml\n\n  Retrieve metadata from a package or multiple packages:\n\n    $ sfdx force source retrieve --packagenames MyPackageName\n    $ sfdx force source retrieve --packagenames \"Package1, PackageName With \\\n      Spaces, Package3\"\n\n  Retrieve all metadata from a package and specific components that aren’t in\n  the package, specify both -n | --packagenames and one other scoping\n  parameter:\n\n    $ sfdx force source retrieve --packagenames MyPackageName --sourcepath \\\n      path/to/apex/classes\n    $ sfdx force source retrieve --packagenames MyPackageName --metadata \\\n      ApexClass:MyApexClass\n    $ sfdx force source retrieve --packagenames MyPackageName --manifest \\\n      path/to/package.xml\n\n  Retrieve source files to a given directory instead of the default package\n  directory specified in sfdx-project.json:\n\n    $ sfdx force source retrieve --metadata \"StandardValueSet:TaskStatus\" \\\n      --retrievetargetdir path/to/unpackaged\n\nFLAG DESCRIPTIONS\n  -m, --metadata=<value>...\n\n    Comma-separated list of names of metadata components to retrieve from the\n    org.\n\n    If you specify this parameter, don’t specify --manifest or --sourcepath.\n\n  -p, --sourcepath=<value>...\n\n    Comma-separated list of file paths for source to retrieve from the org.\n\n    The supplied paths can be to a single file (in which case the operation is\n    applied to only one file) or to a folder (in which case the operation is\n    applied to all source files in the directory and its sub-directories).\n\n    If you specify this parameter, don’t specify --manifest or --metadata.\n\n  -r, --retrievetargetdir=<value>\n\n    Root of the directory structure into which the source files are retrieved.\n\n    If the target directory matches one of the package directories in your\n    sfdx-project.json file, the command fails.\n\n    Running the command multiple times with the same target adds new files and\n    overwrites existing files.\n\n  -w, --wait=<value>\n\n    Number of minutes to wait for the command to complete and display results to\n    the terminal window.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you.\n\n  -x, --manifest=<value>\n\n    Complete path for the manifest (package.xml) file that specifies the\n    components to retrieve.\n\n    If you specify this parameter, don’t specify --metadata or --sourcepath\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_208.txt"}}],["bda1d425-57e7-4f46-a62d-9c20e7f8bf16",{"pageContent":"\n\nWe plan to deprecate this command in the future. Try using the \"project retrieve/deploy preview\" command instead.\nList changes that have been made locally, in an org, or both.\n\nUSAGE\n  $ sfdx force source status -o <value> [--json] [--api-version <value>] [-l |\n    -r] [--concise]\n\nFLAGS\n  -l, --local               List the changes that have been made locally.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -r, --remote              List the changes that have been made in the org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n  --concise                 Show only the changes that will be pushed or pulled;\n                            omits files that are forceignored.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nEXAMPLES\n  List changes that have been made locally but not in the org with alias\n  \"myscratch\":\n\n    $ sfdx force source status --local --target-org myscratch\n\n  List changes that have been made in your default org but aren't reflected in\n  your local project:\n\n    $ sfdx force source status --remote\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_209.txt"}}],["e136e9b2-d74e-46cb-bac9-712c575f3352",{"pageContent":"\n\nGenerate a new custom metadata type in the current project.\n\nUSAGE\n  $ sfdx cmdt create -n <value> [--json] [-l <value>] [-p <value>] [-v\n    PackageProtected|Protected|Public] [-d <value>]\n\nFLAGS\n  -d, --output-directory=<value>  Directory to store the newly-created custom\n                                  metadata type files\n  -l, --label=<value>             Label for the custom metadata type.\n  -n, --type-name=<value>         (required) Unique object name for the custom\n                                  metadata type.\n  -p, --plural-label=<value>      Plural version of the label value; if blank,\n                                  uses label.\n  -v, --visibility=<option>       [default: Public] Who can see the custom\n                                  metadata type.\n                                  <options: PackageProtected|Protected|Public>\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a new custom metadata type in the current project.\n\n  This command creates a metadata file that describes the new custom metadata\n  type. By default, the file is created in the MyCustomType__mdt directory in\n  the current directory, where MyCustomType is the value of the required\n  --type-name flag. Use the --output-directory to generate the file in a package\n  directory with other custom metadata types, such as\n  \"force-app/main/default/objects\".\n\nALIASES\n  $ sfdx force cmdt create\n  $ sfdx cmdt create\n\nEXAMPLES\n  Generate a custom metadata type with developer name 'MyCustomType'; this\n  name is also used as the label:\n\n    $ sfdx cmdt create --type-name MyCustomType\n\n  Generate a protected custom metadata type with a specific label:\n\n    $ sfdx cmdt create --type-name MyCustomType --label \"Custom Type\" \\\n      --plural-label \"Custom Types\" --visibility Protected\n\nFLAG DESCRIPTIONS\n  -d, --output-directory=<value>\n\n    Directory to store the newly-created custom metadata type files\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --type-name=<value>  Unique object name for the custom metadata type.\n\n    The name can contain only underscores and alphanumeric characters, and must\n    be unique in your org. It must begin with a letter, not include spaces, not\n    end with an underscore, and not contain two consecutive underscores.\n\n  -v, --visibility=PackageProtected|Protected|Public\n\n    Who can see the custom metadata type.\n\n    For more information on what each option means, see this topic in Salesforce\n    Help: https://help.salesforce.com/s/articleView?id=sf.custommetadatatypes_ui\n    _create.htm&type=5\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_21.txt"}}],["545bc484-e4de-4a13-a550-92d9585eb8cb",{"pageContent":"\n\nDelete all local source tracking information.\n\nUSAGE\n  $ sfdx project delete tracking -o <value> [--json] [--api-version <value>]\n  [-p]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -p, --no-prompt           Don't prompt for source tracking override\n                            confirmation.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete all local source tracking information.\n\n  WARNING: This command deletes or overwrites all existing source tracking\n  files. Use with extreme caution.\n\n  Deletes all local source tracking information. When you next run 'project\n  deploy preview', Salesforce CLI displays all local and remote files as\n  changed, and any files with the same name are listed as conflicts.\n\nALIASES\n  $ sfdx force source tracking clear\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_210.txt"}}],["a8112f8d-8db8-4617-9717-63c119826bbf",{"pageContent":"\n\nReset local and remote source tracking.\n\nUSAGE\n  $ sfdx project reset tracking -o <value> [--json] [--api-version <value>] [-r\n    <value>] [-p]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -p, --no-prompt           Don't prompt for source tracking override\n                            confirmation.\n  -r, --revision=<value>    SourceMember revision counter number to reset to.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Reset local and remote source tracking.\n\n  WARNING: This command deletes or overwrites all existing source tracking\n  files. Use with extreme caution.\n\n  Resets local and remote source tracking so that Salesforce CLI no longer\n  registers differences between your local files and those in the org. When you\n  next run 'project deploy preview', Salesforce CLI returns no results, even\n  though conflicts might actually exist. Salesforce CLI then resumes tracking\n  new source changes as usual.\n\n  Use the --revision parameter to reset source tracking to a specific revision\n  number of an org source member. To get the revision number, query the\n  SourceMember Tooling API object with the 'data soql' command. For example:\n\n  sfdx data query --query \"SELECT MemberName, MemberType, RevisionCounter FROM\n  SourceMember\" --use-tooling-api\n\nALIASES\n  $ sfdx force source tracking reset\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_211.txt"}}],["778f0739-a54c-48da-a0c1-b70d1dd417f3",{"pageContent":"\n\nGenerate a static resource.\n\nUSAGE\n  $ sfdx force staticresource create -n <value> [--json] [--type <value>] [-d <value>]\n    [--api-version <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -n, --name=<value>        (required) Name of the generated static resource.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n  --type=<value>            [default: application/zip] Content type (mime type)\n                            of the generated static resource.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a static resource.\n\n  Generates the metadata resource file in the specified directory or the current\n  working directory. Static resource files must be contained in a parent\n  directory called \"staticresources\" in your package directory. Either run this\n  command from an existing directory of this name, or use the --output-dir flag\n  to create one or point to an existing one.\n\nALIASES\n  $ sfdx force staticresource create\n\nEXAMPLES\n  Generate the metadata file for a static resource called MyResource in the\n  current directory:\n\n    $ sfdx force staticresource create --name MyResource\n\n  Similar to previous example, but specifies a MIME type of application/json:\n\n    $ sfdx force staticresource create --name MyResource --type \\\n      application/json\n\n  Generate the resource file in the \"force-app/main/default/staticresources\"\n  directory:\n\n    $ sfdx force staticresource create --name MyResource --output-dir \\\n      force-app/main/default/staticresources\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated static resource.\n\n    This name can contain only underscores and alphanumeric characters, and must\n    be unique in your org. It must begin with a letter, not include spaces, not\n    end with an underscore, and not contain two consecutive underscores.\n\n  --type=<value>  Content type (mime type) of the generated static resource.\n\n    Must be a valid MIME type such as application/json, application/javascript,\n    application/zip, text/plain, text/css, etc\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_212.txt"}}],["014f0aaa-384a-4d2b-83c6-b1170652dfd0",{"pageContent":"\n\nCreate a user for a scratch org.\n\nUSAGE\n  $ sfdx org create user -o <value> [--json] [-a <value>] [-f <value>] [-s]\n    [--api-version <value>]\n\nFLAGS\n  -a, --set-alias=<value>        Set an alias for the created username to\n                                 reference in other CLI commands.\n  -f, --definition-file=<value>  File path to a user definition file for\n                                 customizing the new user.\n  -o, --target-org=<value>       (required) Username or alias of the target org.\n  -s, --set-unique-username      Force the username, if specified in the\n                                 definition file or at the command line, to be\n                                 unique by appending the org ID.\n  --api-version=<value>          Override the api version used for api requests\n                                 made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a user for a scratch org.\n\n  A scratch org includes one administrator user by default. For testing\n  purposes, however, you sometimes need to create additional users.\n\n  The easiest way to create a user is to let this command assign default or\n  generated characteristics to the new user. If you want to customize your new\n  user, create a definition file and specify it with the --definition-file flag.\n  In the file, you can include all the User sObject (SSalesforce object) fields\n  and Salesforce DX-specific options, as described in \"User Definition File for\n  Customizing a Scratch Org User\" (https://developer.salesforce.com/docs/atlas.e\n  n-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_users_def_file.htm). You can\n  also specify these options on the command line.\n\n  If you don't customize your new user, this command creates a user with the\n  following default characteristics:\n\n  * The username is the existing administrator’s username prepended with a\n  timestamp, such as 1505759162830_test-wvkpnfm5z113@example.com.\n  * The user’s profile is Standard User.\n  * The values of the required fields of the User sObject are the corresponding\n  values of the administrator user.\n  * The user has no password.\n\n  Use the --set-alias flag to assign a simple name to the user that you can\n  reference in later CLI commands. This alias is local and different from the\n  Alias field of the User sObject record of the new user, which you set in the\n  Setup UI.\n\n  When this command completes, it displays the new username and user ID. Run the\n  \"org display user\" command to get more information about the new user.\n\n  For more information about user limits, defaults, and other considerations\n  when creating a new scratch org user, see https://developer.salesforce.com/doc\n  s/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_users.htm.\n\nALIASES\n  $ sfdx force user create\n\nEXAMPLES\n  Create a user for your default scratch org and let this command generate a\n  username, user ID, and other characteristics:\n\n    $ sfdx org create user\n\n  Create a user with alias \"testuser1\" using a user definition file. Set the\n  \"profileName\" option to \"Chatter Free User\", which overrides the value in\n  the defintion file if it also exists there. Create the user for the scratch\n  org with alias \"my-scratch\":\n\n    $ sfdx org create user --set-alias testuser1 --definition-file \\\n      config/project-user-def.json profileName='Chatter Free User' \\\n      --target-org my-scratch\n\n  Create a user by specifying the username, email, and perm set assignment at\n  the command line; command fails if the username already exists in\n  Salesforce:\n\n    $ sfdx org create user username=testuser1@my.org email=me@my.org \\\n      permsets=DreamHouse\n\n  Create a user with a definition file, set the email value as specified\n  (overriding any value in the definition file), and generate a password for\n  the user. If the username in the definition file isn't unique, the command\n  appends the org ID to make it unique:\n\n    $ sfdx org create user --definition-file config/project-user-def.json \\\n      email=me@my.org generatepassword=true --set-unique-username\n\nFLAG DESCRIPTIONS\n  -f, --definition-file=<value>\n\n    File path to a user definition file for customizing the new user.\n\n    The user definition file uses JSON format and can include any Salesforce\n    User sObject field and Salesforce DX-specific options. See\n    https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfd\n    x_dev_scratch_orgs_users_def_file.htm for more information.\n\n  -s, --set-unique-username\n\n    Force the username, if specified in the definition file or at the command\n    line, to be unique by appending the org ID.\n\n    The new user’s username must be unique across all Salesforce orgs and in the\n    form of an email address. If you let this command generate a username for\n    you, it's guaranteed to be unique. If you specify an existing username in a\n    definition file, the command fails. Set this flag to force the username to\n    be unique; as a result, the username might be different than what you\n    specify in the definition file\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_213.txt"}}],["c6107ebc-fd81-4a80-9f60-e1c5fbb4f3be",{"pageContent":"\n\nDisplay information about a Salesforce user.\n\nUSAGE\n  $ sfdx org display user -o <value> [--json] [--api-version <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display information about a Salesforce user.\n\n  Output includes the profile name, org ID, access token, instance URL, login\n  URL, and alias if applicable. The displayed alias is local and different from\n  the Alias field of the User sObject record of the new user, which you set in\n  the Setup UI.\n\nALIASES\n  $ sfdx force user display\n\nEXAMPLES\n  Display information about the admin user of your default scratch org:\n\n    $ sfdx org display user\n\n  Display information about the specified user and output in JSON format:\n\n    $ sfdx org display user --target-org me@my.org --json\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_214.txt"}}],["0ee5815c-e8ad-43f3-a357-409baf8ac636",{"pageContent":"\n\nList all locally-authenticated users of an org.\n\nUSAGE\n  $ sfdx org list users -o <value> [--json] [--api-version <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List all locally-authenticated users of an org.\n\n  For scratch orgs, the list includes any users you've created with the \"org\n  create user\" command; the original scratch org admin user is marked with\n  \"(A)\". For other orgs, the list includes the users you used to authenticate to\n  the org.\n\nALIASES\n  $ sfdx force user list\n\nEXAMPLES\n  List the locally-authenticated users of your default org:\n\n    $ sfdx org list users\n\n  List the locally-authenticated users of the specified org:\n\n    $ sfdx org list users --target-org me@my.org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_215.txt"}}],["9dcb6279-4510-4ced-9ac6-f45449806e03",{"pageContent":"\n\nGenerate a random password for scratch org users.\n\nUSAGE\n  $ sfdx force user password generate -u <value> [--json] [-o <value>] [-l <value>] [-c\n    <value>] [--api-version <value>]\n\nFLAGS\n  -c, --complexity=<value>       [default: 5] Level of password complexity or\n                                 strength; the higher the value, the stronger\n                                 the password.\n  -l, --length=<value>           [default: 13] Number of characters in the\n                                 generated password; valid values are between 8\n                                 and 100.\n  -o, --on-behalf-of=<value>...  Comma-separated list of usernames or aliases to\n                                 assign the password to.\n  -u, --target-org=<value>       (required) Scratch org alias or login user.\n  --api-version=<value>          Override the api version used for api requests\n                                 made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a random password for scratch org users.\n\n  By default, new scratch orgs contain one admin user with no password. Use this\n  command to generate or change a password for any scratch org user. After it's\n  set, you can’t unset a password, you can only change it.\n\n  To change the password strength, set the --complexity flag to a value between\n  0 and 5. Each value specifies the types of characters used in the generated\n  password:\n\n  0 - lower case letters only\n  1 - lower case letters and numbers only\n  2 - lower case letters and symbols only\n  3 - lower and upper case letters and numbers only\n  4 - lower and upper case letters and symbols only\n  5 - lower and upper case letters and numbers and symbols only\n\n  To see a password that was previously generated, run \"org display user\".\n\nEXAMPLES\n  Generate a password for the original admin user of your default scratch org:\n\n    $ sfdx force user password generate\n\n  Generate a password that contains 12 characters for the original admin user\n  of the scratch org with alias \"my-scratch\":\n\n    $ sfdx force user password generate --length 12 --target-org my-scratch\n\n  Generate a password for your default scratch org admin user that uses lower\n  and upper case letters and numbers only:\n\n    $ sfdx force user password generate --complexity 3\n\n  Generate a password for the specified users in the default scratch org:\n\n    $ sfdx force user password generate --on-behalf-of user1@my.org \\\n      --on-behalf-of user2@my.org --on-behalf-of user3@my.org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_216.txt"}}],["0f83302c-ab70-4a2e-b61a-fa9de9b8b4aa",{"pageContent":"\n\nGenerate a Visualforce Component.\n\nUSAGE\n  $ sfdx force visualforce component create -n <value> -l <value> [--json] [-t\n    DefaultVFComponent] [-d <value>] [--api-version <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -l, --label=<value>       (required) Visualforce Component label.\n  -n, --name=<value>        (required) Name of the generated Visualforce\n                            Component.\n  -t, --template=<option>   [default: DefaultVFComponent] Template to use for\n                            file creation.\n                            <options: DefaultVFComponent>\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a Visualforce Component.\n\n  The command generates the .Component file and associated metadata file in the\n  specified directory or the current working directory by default.\n\nALIASES\n  $ sfdx force visualforce component create\n\nEXAMPLES\n  Generate the metadata files for a Visualforce component in the current\n  directory:\n\n    $ sfdx force visualforce component create --name mycomponent --label \\\n      mylabel\n\n  Similar to previous example, but generate the files in the directory\n  \"force-app/main/default/components\":\n\n    $ sfdx force visualforce component create --name mycomponent --label \\\n      mylabel --output-dir components\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Visualforce Component.\n\n    The name can be up to 40 characters and must start with a letter.\n\n  -t, --template=DefaultVFComponent  Template to use for file creation.\n\n    Supplied parameter values or default values are filled into a copy of the\n    template\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_217.txt"}}],["97b7cb22-c660-41bf-a25b-cc5043006b6a",{"pageContent":"\n\nGenerate a Visualforce Page.\n\nUSAGE\n  $ sfdx force visualforce page create -n <value> -l <value> [--json] [-d <value>]\n    [--api-version <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -l, --label=<value>       (required) Visualforce Page label.\n  -n, --name=<value>        (required) Name of the generated Visualforce Page.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a Visualforce Page.\n\n  The command generates the .Page file and associated metadata file in the\n  specified directory or the current working directory by default.\n\nALIASES\n  $ sfdx force visualforce page create\n\nEXAMPLES\n  Generate the metadata files for a Visualforce page in the current directory:\n\n    $ sfdx force visualforce page create --name mypage --label mylabel\n\n  Similar to previous example, but generate the files in the directory\n  \"force-app/main/default/pages\":\n\n    $ sfdx force visualforce page create --name mypage --label mylabel \\\n      --output-dir pages\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Visualforce Page.\n\n    The name can be up to 40 characters and must start with a letter\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_218.txt"}}],["3b9d5c11-f81f-42a2-be88-1c8aed9162c4",{"pageContent":"\n\nThis command is in beta.\n\nGenerate metadata source files for a new custom field on a specified object.\n\nUSAGE\n  $ sfdx generate metadata field -l <value> [-o <value>]\n\nFLAGS\n  -l, --label=<value>   (required) The field's label.\n  -o, --object=<value>  The directory that contains the object's source files.\n\nDESCRIPTION\n  Generate metadata source files for a new custom field on a specified object.\n\n  This command is interactive and must be run in a Salesforce DX project\n  directory. You're required to specify the field's label with the \"--label\"\n  flag. The command uses this label to provide intelligent suggestions for other\n  field properties, such as its API name.\n\n  You can generate a custom field on either a standard object, such as Account,\n  or a custom object. In both cases, the source files for the object must\n  already exist in your local project before you run this command. If you create\n  a relationship field, the source files for the parent object must also exist\n  in your local directory.  Use the command \"sf metadata retrieve -m\n  CustomObject:<object>\" to retrieve source files for both standard and custom\n  objects from your org.  To create a custom object, run the \"sf generate\n  metadata sobject\" command or use the Object Manager UI in your Salesforce org.\n\nALIASES\n  $ sfdx generate metadata field\n\nEXAMPLES\n  Create a field with the specified label; the command prompts you for the\n  object:\n\n    $ sfdx generate metadata field --label \"My Field\"\n\n  Specify the local path to the object's folder:\n\n    $ sfdx generate metadata field --label \"My Field\" --object \\\n      force-app/main/default/objects/MyObject__c\n\nFLAG DESCRIPTIONS\n  -o, --object=<value>  The directory that contains the object's source files.\n\n    The object source files in your local project are grouped in a directoy with\n    the same name as the object. Custom object names always end in \"__c\". An\n    example of the object directory for the Account standard object is\n    \"force-app/main/default/objects/Account\" An example custom object directory\n    is \"force-app/main/default/objects/MyObject__c\"\n\n    If you don't specify this flag, the command prompts you to choose from your\n    local objects\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_219.txt"}}],["2d99009b-7497-4e9f-a1f5-03e903e91594",{"pageContent":"\n\nGenerate a field for a custom metadata type based on the provided field type.\n\nUSAGE\n  $ sfdx cmdt field create -n <value> -f\n    Checkbox|Date|DateTime|Email|Number|Percent|Phone|Picklist|Text|TextArea|Lon\n    gTextArea|Url [--json] [-p <value>] [-s <value>] [-l <value>] [-d <value>]\n\nFLAGS\n  -d, --output-directory=<value>    Directory to store newly-created field\n                                    definition files.\n  -f, --type=<option>               (required) Type of the field.\n                                    <options: Checkbox|Date|DateTime|Email|Numbe\n                                    r|Percent|Phone|Picklist|Text|TextArea|LongT\n                                    extArea|Url>\n  -l, --label=<value>               Label for the field.\n  -n, --name=<value>                (required) Unique name for the field.\n  -p, --picklist-values=<value>...  Picklist values; required for picklist\n                                    fields.\n  -s, --decimal-places=<value>      Number of decimal places to use for number\n                                    or percent fields.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a field for a custom metadata type based on the provided field type.\n\n  Similar to a custom object, a custom metadata type has a list of custom fields\n  that represent aspects of the metadata.\n\n  This command creates a metadata file that describes the new custom metadata\n  type field. By default, the file is created in a \"fields\" directory in the\n  current directory. Use the --output-directory to generate the file in the\n  directory that contains the custom metadata type metdata files, such as\n  \"force-app/main/default/objects/MyCmdt__mdt\" for the custom metadata type\n  called MyCmdt.\n\nALIASES\n  $ sfdx force cmdt field create\n  $ sfdx cmdt field create\n\nEXAMPLES\n  Generate a metadata file for a custom checkbox field and add the file to the\n  MyCmdt__mdt/fields directory:\n\n    $ sfdx cmdt field create --name MyCheckboxField --type Checkbox \\\n      --output-directory force-app/main/default/objects/MyCmdt__mdt\n\n  Generate a metadata file for a custom picklist field and add a few values:\n\n    $ sfdx cmdt field create --name MyPicklistField --type Picklist \\\n      --picklist-values A --picklist-values B --picklist-values C \\\n      --output-directory force-app/main/default/objects/MyCmdt__mdt\n\n  Generate a metadata file for a custom number field and specify 2 decimal\n  places:\n\n    $ sfdx cmdt field create --name MyNumberField --type Number \\\n      --decimal-places 2 --output-directory \\\n      force-app/main/default/objects/MyCmdt__mdt\n\nFLAG DESCRIPTIONS\n  -d, --output-directory=<value>\n\n    Directory to store newly-created field definition files.\n\n    New files are automatically created in the \"fields\" directory. The location\n    can be an absolute path or relative to the current working directory. The\n    default is the current directory.\n\n  -f, --type=Checkbox|Date|DateTime|Email|Number|Percent|Phone|Picklist|Text|TextArea|LongTextArea|Url\n\n    Type of the field.\n\n    You can't use this command to create a custom metadata type field of type\n    \"Metadata Relationship\". Use the Salesforce Setup UI instead.\n\n  -s, --decimal-places=<value>\n\n    Number of decimal places to use for number or percent fields.\n\n    The value must be greater than or equal to zero. Default value is 0\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_22.txt"}}],["9f49e713-1803-4f1a-88ad-2e0b70f7b24e",{"pageContent":"\n\nThis command is in beta.\n\nGenerate metadata source files for a new platform event.\n\nUSAGE\n  $ sfdx generate metadata platformevent -l <value>\n\nFLAGS\n  -l, --label=<value>  (required) The platform event's label.\n\nDESCRIPTION\n  Generate metadata source files for a new platform event.\n\n  This command is interactive and must be run in a Salesforce DX project\n  directory. You're required to specify the event's label with the \"--label\"\n  flag. The command uses this label to provide intelligent suggestions for other\n  event properties, such as its API name.\n\nALIASES\n  $ sfdx generate metadata platformevent\n\nEXAMPLES\n  Create a platform event with the specified label:\n\n    $ sfdx generate metadata platformevent --label \"My Platform Event\"\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_220.txt"}}],["03d97eda-7244-4e59-98d4-a8800afba03b",{"pageContent":"\n\nThis command is in beta.\n\nGenerate metadata source files for a new custom object.\n\nUSAGE\n  $ sfdx generate metadata sobject -l <value> [-f]\n\nFLAGS\n  -f, --use-default-features  Enable all optional features without prompting.\n  -l, --label=<value>         (required) The custom object's label.\n\nDESCRIPTION\n  Generate metadata source files for a new custom object.\n\n  This command is interactive and must be run in a Salesforce DX project\n  directory. You're required to specify the object's label with the \"--label\"\n  flag. The command uses this label to provide intelligent suggestions for other\n  object properties, such as its API name and plural label.\n\n  All Salesforce objects are required to have a Name field, so this command also\n  prompts you for the label and type of the Name field. Run the \"sf metadata\n  generate field\" command to create additional fields for the object.\n\n  To reduce the number of prompts, use the \"--use-default-features\" flag to\n  automatically enable some features, such as reporting and search on the\n  object.\n\nALIASES\n  $ sfdx generate metadata sobject\n\nEXAMPLES\n  Create a custom object with the specified label and be prompted for\n  additional information:\n\n    $ sfdx generate metadata sobject --label \"My Object\"\n\n  Create a custom object and enable optional features without prompting:\n\n    $ sfdx generate metadata sobject --label \"My Object\" \\\n      --use-default-features\n\nFLAG DESCRIPTIONS\n  -f, --use-default-features  Enable all optional features without prompting.\n\n    Enables these features:\n\n    * Search: Allows users to find the custom object's records when they search,\n    including SOSL.\n    * Feeds: Enables feed tracking.\n    * Reports: Allows reporting of the data in the custom object records.\n    * History: Enables object history tracking.\n    * Activities: Allows users to associate tasks and scheduled calendar events\n    related to the custom object records.\n    * Bulk API: With Sharing and Streaming API, classifies the custom object as\n    an Enterprise Application object.\n    * Sharing: With Bulk API and Streaming API, classifies the custom object as\n    an Enterprise Application object.\n    * Streaming API: With Bulk API and Sharing, classifies the custom object as\n    an Enterprise Application object\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_221.txt"}}],["09f002f6-b87d-4cfa-90c5-ec447f755d0f",{"pageContent":"\n\nThis command is in beta.\n\nGenerate the metadata source files for a new custom tab on a custom object.\n\nUSAGE\n  $ sfdx generate metadata tab -o <value> -d <value> -i <value> [--json]\n\nFLAGS\n  -d, --directory=<value>  (required) Path to a \"tabs\" directory that will\n                           contain the source files for your new tab.\n  -i, --icon=<value>       (required) [default: 1] Number from 1 to 100 that\n                           specifies the color scheme and icon for the custom\n                           tab.\n  -o, --object=<value>     (required) API name of the custom object you're\n                           generating a tab for.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate the metadata source files for a new custom tab on a custom object.\n\n  Custom tabs let you display custom object data or other web content in\n  Salesforce. Custom tabs appear in Salesforce as an item in the app’s\n  navigation bar and in the App Launcher.\n\n  This command must be run in a Salesforce DX project directory. You must pass\n  all required information to it with the required flags. The source files for\n  the custom object for which you're generating a tab don't need to exist in\n  your local project.\n\nALIASES\n  $ sfdx generate metadata tab\n\nEXAMPLES\n  Create a tab on the MyObject__c custom object:\n\n    $ sfdx generate metadata tab --object MyObject__c --icon 54 --directory \\\n      force-app/main/default/tabs\n\nFLAG DESCRIPTIONS\n  -i, --icon=<value>\n\n    Number from 1 to 100 that specifies the color scheme and icon for the custom\n    tab.\n\n    See https://lightningdesignsystem.com/icons/\\#custom for the available\n    icons.\n\n  -o, --object=<value>\n\n    API name of the custom object you're generating a tab for.\n\n    The API name for a custom object always ends in \"__c\", such as\n    \"MyObject__c\"\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_222.txt"}}],["43bae684-3e0a-43f9-bc84-1ae814443f65",{"pageContent":"\n\nSalesforce CLI\n\nVERSION\n  sfdx-cli/7.202.7 wsl-x64 node-v20.2.0\n\nUSAGE\n  $ sfdx [COMMAND]\n\nTOPICS\n  alias            Use the alias commands to manage your aliases.\n  analytics        Work with analytics assets.\n  apex             Use the apex commands to create Apex classes, execute\n                   anonymous blocks, view your logs, run Apex tests, and view\n                   Apex test results.\n  cmdt             Generate custom metadata types and their records.\n  community        Create and publish an Experience Cloud site.\n  config           Commands to configure Salesforce CLI.\n  data             Manage records in your org.\n  deploy           Deploy a project interactively to any Salesforce environment.\n  dev              Audit messages in a plugin's messages directory to locate\n                   unused messages and missing messages that have references in\n                   source code.\n  force            Legacy commands for backward compatibility.\n  info             Access Salesforce CLI information from the command line.\n  lightning        Work with Lightning Web and Aura components.\n  limits           Display an org’s limits.\n  org              Commands to manage org shapes and snapshots.\n  package          Commands to develop and install unlocked packages and managed\n                   2GP packages.\n  package1         Commands to develop first-generation managed and unmanaged\n                   packages.\n  plugins          list installed plugins\n  project          Work with projects, such as deploy and retrieve metadata.\n  scanner          scan code to detect code quality issues and security\n                   vulnerabilities\n  schema           Generate metadata source files for a new custom field on a\n                   specified object.\n  sobject          Commands to interact with Salesforce objects.\n  static-resource  Work with static resources.\n  update           update the sfdx CLI\n  version\n  visualforce      Work with Visualforce components.\n\nCOMMANDS\n  autocomplete  display autocomplete installation instructions\n  commands      list all the commands\n  deploy        Deploy a project interactively to any Salesforce environment.\n  doctor        Gather CLI configuration data and run diagnostic tests to\n                discover and report potential problems in your environment.\n  help          Display help for sfdx.\n  plugins       List installed plugins.\n  search        Search for a command.\n  update        update the sfdx CLI\n  version\n  whatsnew      Display Salesforce CLI release notes on the command line.\n  which         Show which plugin a command is in\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_223.txt"}}],["45b55603-0dc2-4038-a758-aa7508dec572",{"pageContent":"\n\nDisplay Salesforce CLI release notes on the command line.\n\nUSAGE\n  $ sfdx info releasenotes display [--json] [-v <value>]\n\nFLAGS\n  -v, --version=<value>  CLI version or tag for which to display release notes.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display Salesforce CLI release notes on the command line.\n\n  By default, this command displays release notes for the currently installed\n  CLI version on your computer. Use the --version flag to view release notes for\n  a different release.\n\nALIASES\n  $ sfdx whatsnew\n\nEXAMPLES\n  Display release notes for the currently installed CLI version:\n\n    $ sfdx info releasenotes display stable, stable-rc, latest, latest-rc, \\\n      rc\n\n  Display release notes for CLI version 7.120.0:\n\n    $ sfdx info releasenotes display --version 7.120.0 stable, stable-rc, \\\n      latest, latest-rc, rc\n\n  Display release notes for the CLI version that corresponds to a tag (stable,\n  stable-rc, latest, latest-rc, rc):\n\n    $ sfdx info releasenotes display --version latest\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_224.txt"}}],["f6e52e79-50a9-4fa9-b537-4b2409485576",{"pageContent":"\n\nGenerate a Lightning App.\n\nUSAGE\n  $ sfdx lightning generate app -n <value> [--json] [-t DefaultLightningApp] [-d\n    <value>] [--api-version <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -n, --name=<value>        (required) Name of the generated Lightning App.\n  -t, --template=<option>   [default: DefaultLightningApp] Template to use for\n                            file creation.\n                            <options: DefaultLightningApp>\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a Lightning App.\n\n  Generates a Lightning App bundle in the specified directory or the current\n  working directory. The bundle consists of multiple files in a folder with the\n  designated name.\n\nALIASES\n  $ sfdx force lightning app create\n\nEXAMPLES\n  Generate the metadata files for a Lightning app bundle called \"myapp\" in the\n  current directory:\n\n    $ sfdx lightning generate app --name myapp\n\n  Similar to the previous example, but generate the files in the\n  \"force-app/main/default/aura\" directory:\n\n    $ sfdx lightning generate app --name myapp --output-dir \\\n      force-app/main/default/aura\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Lightning App.\n\n    The name can be up to 40 characters and must start with a letter.\n\n  -t, --template=DefaultLightningApp  Template to use for file creation.\n\n    Supplied parameter values or default values are filled into a copy of the\n    template\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_225.txt"}}],["505fd76a-8606-4436-abd6-8fe661de9f09",{"pageContent":"\n\nGenerate a bundle for an Aura component or a Lightning web component.\n\nUSAGE\n  $ sfdx lightning generate component -n <value> [--json] [-t\n    default|analyticsDashboard|analyticsDashboardWithStep] [-d <value>]\n    [--api-version <value>] [--type aura|lwc]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -n, --name=<value>        (required) Name of the generated Lightning\n                            Component.\n  -t, --template=<option>   [default: default] Template to use for file\n                            creation.\n                            <options: default|analyticsDashboard|analyticsDashbo\n                            ardWithStep>\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n  --type=<option>           [default: aura] Type of the component bundle.\n                            <options: aura|lwc>\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a bundle for an Aura component or a Lightning web component.\n\n  Generates the bundle in the specified directory or the current working\n  directory. The bundle consists of multiple files in a directory with the\n  designated name.  Lightning web components are contained in the directory with\n  name \"lwc\", Aura components in \"aura\".\n\n  To generate a Lightning web component, pass \"--type lwc\" to the command. If\n  you don’t specify --type, Salesforce CLI generates an Aura component by\n  default.\n\nALIASES\n  $ sfdx force lightning component create\n\nEXAMPLES\n  Generate the metadata files for an Aura component bundle in the current\n  directory:\n\n    $ sfdx lightning generate component --name mycomponent\n\n  Generate a Lightning web component bundle in the current directory:\n\n    $ sfdx lightning generate component --name mycomponent --type lwc\n\n  Generate an Aura component bundle in the \"force-app/main/default/aura\"\n  directory:\n\n    $ sfdx lightning generate component --name mycomponent --output-dir \\\n      force-app/main/default/aura\n\n  Generate a Lightning web component bundle in the\n  \"force-app/main/default/lwc\" directory:\n\n    $ sfdx lightning generate component --name mycomponent --type lwc \\\n      --output-dir force-app/main/default/lwc\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Lightning Component.\n\n    The name can be up to 40 characters and must start with a letter.\n\n  -t, --template=default|analyticsDashboard|analyticsDashboardWithStep\n\n    Template to use for file creation.\n\n    Supplied parameter values or default values are filled into a copy of the\n    template\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_226.txt"}}],["10f815ee-5a7f-4e29-b0be-86f7ad991ce3",{"pageContent":"\n\nGenerate a Lightning Event.\n\nUSAGE\n  $ sfdx lightning generate event -n <value> [--json] [-t DefaultLightningEvt] [-d\n    <value>] [--api-version <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -n, --name=<value>        (required) Name of the generated Lightning Event.\n  -t, --template=<option>   [default: DefaultLightningEvt] Template to use for\n                            file creation.\n                            <options: DefaultLightningEvt>\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a Lightning Event.\n\n  Generates a Lightning Event bundle in the specified directory or the current\n  working directory. The bundle consists of multiple files in a folder with the\n  designated name.\n\nALIASES\n  $ sfdx force lightning event create\n\nEXAMPLES\n  Generate the metadata files for a Lightning event bundle called \"myevent\" in\n  the current directory:\n\n    $ sfdx lightning generate event --name myevent\n\n  Similar to previous example, but generate the files in the\n  \"force-app/main/default/aura\" directory:\n\n    $ sfdx lightning generate event --name myevent --output-dir \\\n      force-app/main/default/aura\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Lightning Event.\n\n    The name can be up to 40 characters and must start with a letter.\n\n  -t, --template=DefaultLightningEvt  Template to use for file creation.\n\n    Supplied parameter values or default values are filled into a copy of the\n    template\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_227.txt"}}],["ba48c04a-7892-4b89-9b56-f38f1ed08901",{"pageContent":"\n\nGenerate a Lightning Interface.\n\nUSAGE\n  $ sfdx lightning generate interface -n <value> [--json] [-t DefaultLightningIntf] [-d\n    <value>] [--api-version <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -n, --name=<value>        (required) Name of the generated Lightning\n                            Interface.\n  -t, --template=<option>   [default: DefaultLightningIntf] Template to use for\n                            file creation.\n                            <options: DefaultLightningIntf>\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a Lightning Interface.\n\n  Generates a Lightning Interface bundle in the specified directory or the\n  current working directory. The bundle consists of multiple files in a folder\n  with the designated name.\n\nALIASES\n  $ sfdx force lightning interface create\n\nEXAMPLES\n  Generate the metadata files for a Lightning interface bundle called\n  \"myinterface\" in the current directory:\n\n    $ sfdx lightning generate interface --name myinterface\n\n  Similar to the previous example but generate the files in the\n  \"force-app/main/default/aura\" directory:\n\n    $ sfdx lightning generate interface --name myinterface --output-dir \\\n      force-app/main/default/aura\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Lightning Interface.\n\n    The name can be up to 40 characters and must start with a letter.\n\n  -t, --template=DefaultLightningIntf  Template to use for file creation.\n\n    Supplied parameter values or default values are filled into a copy of the\n    template\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_228.txt"}}],["bed19603-da96-4baf-9c35-a349748947f0",{"pageContent":"\n\nGenerate a Lightning test.\n\nUSAGE\n  $ sfdx lightning generate test -n <value> [--json] [-t DefaultLightningTest] [-d\n    <value>] [--api-version <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -n, --name=<value>        (required) Name of the generated Lightning Test.\n  -t, --template=<option>   [default: DefaultLightningTest] Template to use for\n                            file creation.\n                            <options: DefaultLightningTest>\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a Lightning test.\n\n  Generates the test in the specified directory or the current working\n  directory. The .resource file and associated metadata file are generated.\n\nALIASES\n  $ sfdx force lightning test create\n\nEXAMPLES\n  Generate the metadata files for the Lightning test called MyLightningTest in\n  the current directory:\n\n    $ sfdx lightning generate test --name MyLightningTest\n\n  Similar to the previous example but generate the files in the\n  \"force-app/main/default/lightningTests\" directory:\n\n    $ sfdx lightning generate test --name MyLightningTest --output-dir \\\n      force-app/main/default/lightningTests\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Lightning Test.\n\n    Name of the new Lightning test; can be up to 40 characters and must start\n    with a letter.\n\n  -t, --template=DefaultLightningTest  Template to use for file creation.\n\n    Supplied parameter values or default values are filled into a copy of the\n    template\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_229.txt"}}],["88de2e45-bf3c-4091-abf2-538402e1f9aa",{"pageContent":"\n\nGenerate a field for a custom metadata type based on the provided field type.\n\nUSAGE\n  $ sfdx cmdt generate field -n <value> -f\n    Checkbox|Date|DateTime|Email|Number|Percent|Phone|Picklist|Text|TextArea|Lon\n    gTextArea|Url [--json] [-p <value>] [-s <value>] [-l <value>] [-d <value>]\n\nFLAGS\n  -d, --output-directory=<value>    Directory to store newly-created field\n                                    definition files.\n  -f, --type=<option>               (required) Type of the field.\n                                    <options: Checkbox|Date|DateTime|Email|Numbe\n                                    r|Percent|Phone|Picklist|Text|TextArea|LongT\n                                    extArea|Url>\n  -l, --label=<value>               Label for the field.\n  -n, --name=<value>                (required) Unique name for the field.\n  -p, --picklist-values=<value>...  Picklist values; required for picklist\n                                    fields.\n  -s, --decimal-places=<value>      Number of decimal places to use for number\n                                    or percent fields.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a field for a custom metadata type based on the provided field type.\n\n  Similar to a custom object, a custom metadata type has a list of custom fields\n  that represent aspects of the metadata.\n\n  This command creates a metadata file that describes the new custom metadata\n  type field. By default, the file is created in a \"fields\" directory in the\n  current directory. Use the --output-directory to generate the file in the\n  directory that contains the custom metadata type metdata files, such as\n  \"force-app/main/default/objects/MyCmdt__mdt\" for the custom metadata type\n  called MyCmdt.\n\nALIASES\n  $ sfdx force cmdt field create\n  $ sfdx cmdt field create\n\nEXAMPLES\n  Generate a metadata file for a custom checkbox field and add the file to the\n  MyCmdt__mdt/fields directory:\n\n    $ sfdx cmdt generate field --name MyCheckboxField --type Checkbox \\\n      --output-directory force-app/main/default/objects/MyCmdt__mdt\n\n  Generate a metadata file for a custom picklist field and add a few values:\n\n    $ sfdx cmdt generate field --name MyPicklistField --type Picklist \\\n      --picklist-values A --picklist-values B --picklist-values C \\\n      --output-directory force-app/main/default/objects/MyCmdt__mdt\n\n  Generate a metadata file for a custom number field and specify 2 decimal\n  places:\n\n    $ sfdx cmdt generate field --name MyNumberField --type Number \\\n      --decimal-places 2 --output-directory \\\n      force-app/main/default/objects/MyCmdt__mdt\n\nFLAG DESCRIPTIONS\n  -d, --output-directory=<value>\n\n    Directory to store newly-created field definition files.\n\n    New files are automatically created in the \"fields\" directory. The location\n    can be an absolute path or relative to the current working directory. The\n    default is the current directory.\n\n  -f, --type=Checkbox|Date|DateTime|Email|Number|Percent|Phone|Picklist|Text|TextArea|LongTextArea|Url\n\n    Type of the field.\n\n    You can't use this command to create a custom metadata type field of type\n    \"Metadata Relationship\". Use the Salesforce Setup UI instead.\n\n  -s, --decimal-places=<value>\n\n    Number of decimal places to use for number or percent fields.\n\n    The value must be greater than or equal to zero. Default value is 0\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_23.txt"}}],["e42c89b6-4f3d-499f-8ee3-919617e9450f",{"pageContent":"\n\nDisplay information about limits in your org.\n\nUSAGE\n  $ sfdx limits api display -o <value> [--json] [--api-version <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display information about limits in your org.\n\n  For each limit, this command returns the maximum allocation and the remaining\n  allocation based on usage. See this topic for a description of each limit:\n  https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resou\n  rces_limits.htm.\n\nALIASES\n  $ sfdx force limits api display\n  $ sfdx org list limits\n\nEXAMPLES\n  Display limits in your default org:\n\n    $ sfdx limits api display\n\n  Display limits in the org with alias \"my-scratch-org\":\n\n    $ sfdx limits api display --target-org my-scratch-org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_230.txt"}}],["e2a442d1-9f3c-4143-9519-010872f1e4fa",{"pageContent":"\n\nDisplay record counts for the specified standard or custom objects.\n\nUSAGE\n  $ sfdx limits recordcounts display -o <value> [--json] [-s <value>] [--api-version\n    <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -s, --sobject=<value>...  [default: ] API name of the standard or custom\n                            object for which to display record counts.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display record counts for the specified standard or custom objects.\n\n  Use this command to get an approximate count of the records in standard or\n  custom objects in your org. These record counts are the same as the counts\n  listed in the Storage Usage page in the Setup UI. The record counts are\n  approximate because they're calculated asynchronously and your org's storage\n  usage isn't updated immediately. To display all available record counts, run\n  the command without the --sobject flag.\n\nALIASES\n  $ sfdx force limits recordcounts display\n  $ sfdx org list sobject record-counts\n\nEXAMPLES\n  Display all available record counts in your default org:\n\n    $ sfdx limits recordcounts display\n\n  Display record counts for the Account, Contact, Lead, and Opportunity\n  objects in your default org:\n\n    $ sfdx limits recordcounts display --sobject Account --sobject Contact \\\n      --sobject Lead --sobject Opportunity\n\n  Display record counts for the Account and Lead objects for the org with\n  alias \"my-scratch-org\":\n\n    $ sfdx limits recordcounts display --sobject Account --sobject Lead \\\n      --target-org my-scratch-org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_231.txt"}}],["c93edf35-4370-48f4-a81e-087125aec442",{"pageContent":"\n\nAssign a permission set to one or more users of a scratch org.\n\nUSAGE\n  $ sfdx org assign permset -n <value> -o <value> [--json] [-b <value>]\n    [--api-version <value>]\n\nFLAGS\n  -b, --on-behalf-of=<value>...  Username or alias to assign the permission set\n                                 to.\n  -n, --name=<value>...          (required) Permission set to assign.\n  -o, --target-org=<value>       (required) Scratch org alias or login user.\n  --api-version=<value>          Override the api version used for api requests\n                                 made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Assign a permission set to one or more users of a scratch org.\n\n  To specify an alias for the --target-org or --on-behalf-of flags, use the CLI\n  username alias, such as the one you set with the \"alias set\" command. Don't\n  use the value of the Alias field of the User Salesforce object for the org\n  user.\n\n  To assign multiple permission sets, either set multiple --name flags or a\n  single --name flag with multiple names separated by spaces. Enclose names that\n  contain spaces in one set of double quotes. The same syntax applies to\n  --on-behalf-of.\n\nEXAMPLES\n  Assign two permission sets called DreamHouse and CloudHouse to original\n  admin user of your default scratch org:\n\n    $ sfdx org assign permset --name DreamHouse --name CloudHouse\n\n  Assign the Dreamhouse permission set to the original admin user of the\n  scratch org with alias \"my-scratch\":\n\n    $ sfdx org assign permset --name DreamHouse --target-org my-scratch\n\n  Assign the Dreamhouse permission set to the specified list of users of your\n  default scratch org:\n\n    $ sfdx org assign permset --name DreamHouse --on-behalf-of user1@my.org \\\n      --on-behalf-of user2 --on-behalf-of user\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_232.txt"}}],["9565df8b-fcb3-4226-8061-596f896e9cb1",{"pageContent":"\n\nAssign a permission set license to one or more users of a scratch org.\n\nUSAGE\n  $ sfdx org assign permsetlicense -n <value> -o <value> [--json] [-b <value>]\n    [--api-version <value>]\n\nFLAGS\n  -b, --on-behalf-of=<value>...  Usernames or alias to assign the permission set\n                                 license to.\n  -n, --name=<value>             (required) Name of the permission set license\n                                 to assign.\n  -o, --target-org=<value>       (required) Scratch org alias or login user.\n  --api-version=<value>          Override the api version used for api requests\n                                 made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Assign a permission set license to one or more users of a scratch org.\n\n  To specify an alias for the --target-org or --on-behalf-of flags, use the CLI\n  username alias, such as the one you set with the \"alias set\" command. Don't\n  use the value of the Alias field of the User Salesforce object for the org\n  user.\n\n  To assign multiple permission sets, either set multiple --name flags or a\n  single --name flag with multiple names separated by spaces. Enclose names that\n  contain spaces in one set of double quotes. The same syntax applies to\n  --on-behalf-of.\n\nEXAMPLES\n  Assign the DreamHouse permission set license to original admin user of your\n  default scratch org:\n\n    $ sfdx org assign permsetlicense --name DreamHouse\n\n  Assign two permission set licenses to the original admin user of the scratch\n  org with alias \"my-scratch\":\n\n    $ sfdx org assign permsetlicense --name DreamHouse --name CloudHouse \\\n      --target-org my-scratch\n\n  Assign the Dreamhouse permission set license to the specified list of users\n  of your default scratch org:\n\n    $ sfdx org assign permsetlicense --name DreamHouse --on-behalf-of \\\n      user1@my.org --on-behalf-of user2 --on-behalf-of user3\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_233.txt"}}],["a04535fe-1a85-43e7-b37c-78621acae394",{"pageContent":"\n\nCreate a sandbox org.\n\nUSAGE\n  $ sfdx org create sandbox -o <value> [--json] [-f <value> | -n <value> | -l\n    Developer|Developer_Pro|Partial|Full] [-s] [-a <value>] [-w <value> |\n    --async] [-i <value> | ] [-c <value> | ] [--no-prompt] [--no-track-source]\n\nFLAGS\n  -a, --alias=<value>            Alias for the sandbox org.\n  -c, --clone=<value>            Name of the sandbox org to clone.\n  -f, --definition-file=<value>  Path to a sandbox definition file.\n  -i, --poll-interval=<seconds>  [default: 30 seconds] Number of seconds to wait\n                                 between retries.\n  -l, --license-type=<option>    Type of sandbox license.\n                                 <options: Developer|Developer_Pro|Partial|Full>\n  -n, --name=<value>             Name of the sandbox org.\n  -o, --target-org=<value>       (required) Username or alias of the production\n                                 org that contains the sandbox license.\n  -s, --set-default              Set the sandbox org as your default org.\n  -w, --wait=<minutes>           [default: 30 minutes] Number of minutes to wait\n                                 for the sandbox org to be ready.\n  --async                        Request the sandbox creation, but don't wait\n                                 for it to complete.\n  --no-prompt                    Don't prompt for confirmation about the sandbox\n                                 configuration.\n  --no-track-source              Do not use source tracking for this sandbox.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a sandbox org.\n\n  There are two ways to create a sandbox org: specify a definition file that\n  contains the sandbox options or use the --name and --license-type flags to\n  specify the two required options. If you want to set an option other than name\n  or license type, such as apexClassId, you must use a definition file.\n\nALIASES\n  $ sfdx env create sandbox\n\nEXAMPLES\n  Create a sandbox org using a definition file and give it the alias\n  \"MyDevSandbox\". The production org that contains the sandbox license has the\n  alias \"prodOrg\".\n\n    $ sfdx org create sandbox -f config/dev-sandbox-def.json --alias \\\n      MyDevSandbox --target-org prodOrg\n\n  Create a sandbox org by directly specifying its name and type of license\n  (Developer) instead of using a definition file. Set the sandbox org as your\n  default.\n\n    $ sfdx org create sandbox --name mysandbox --license-type Developer \\\n      --alias MyDevSandbox --target-org prodOrg --set-default\n\nFLAG DESCRIPTIONS\n  -a, --alias=<value>  Alias for the sandbox org.\n\n    When you create a sandbox, the generated usernames are based on the\n    usernames present in the production org. To ensure uniqueness, the new\n    usernames are appended with the name of the sandbox. For example, the\n    username \"user@example.com\" in the production org results in the username\n    \"user@example.com.mysandbox\" in a sandbox named \"mysandbox\". When you set an\n    alias for a sandbox org, it's assigned to the resulting username of the user\n    running this command.\n\n  -c, --clone=<value>  Name of the sandbox org to clone.\n\n    The value of clone must be an existing sandbox in the same target-org.\n\n  -f, --definition-file=<value>  Path to a sandbox definition file.\n\n    The sandbox definition file is a blueprint for the sandbox. You can create\n    different definition files for each sandbox type that you use in the\n    development process. See <https://developer.salesforce.com/docs/atlas.en-us.\n    sfdx_dev.meta/sfdx_dev/sfdx_dev_sandbox_definition.htm> for all the options\n    you can specify in the defintion file.\n\n  -n, --name=<value>  Name of the sandbox org.\n\n    The name must be a unique alphanumeric string (10 or fewer characters) to\n    identify the sandbox. You can’t reuse a name while a sandbox is in the\n    process of being deleted.\n\n  -o, --target-org=<value>\n\n    Username or alias of the production org that contains the sandbox license.\n\n    When it creates the sandbox org, Salesforce copies the metadata, and\n    optionally data, from your production org to the new sandbox org.\n\n  -w, --wait=<minutes>\n\n    Number of minutes to wait for the sandbox org to be ready.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal to you and displays the \"sfdx org resume sandbox\"\n    command you run to check the status of the create. The displayed command\n    includes the job ID for the running sandbox creation.\n\n  --async  Request the sandbox creation, but don't wait for it to complete.\n\n    The command immediately displays the job ID and returns control of the\n    terminal to you. This way, you can continue to use the CLI. To check the\n    status of the sandbox creation, run \"sfdx org resume sandbox\".\n\n  --no-track-source  Do not use source tracking for this sandbox.\n\n    We recommend you enable source tracking in Developer and Developer Pro\n    sandbox, which is why it's the default behavior. Source tracking allows you\n    to track the changes you make to your metadata, both in your local project\n    and in the sandbox, and to detect any conflicts between the two.\n\n    To disable source tracking in the new sandbox, specify the --no-track-source\n    flag. The main reason to disable source tracking is for performance. For\n    example, while you probably want to deploy metadata and run Apex tests in\n    your CI/CD jobs, you probably don't want to incur the costs of source\n    tracking (checking for conflicts, polling the SourceMember object, various\n    file system operations.) This is a good use case for disabling source\n    tracking in the sandbox\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_234.txt"}}],["6fd6c103-bd94-4faf-b9d6-10ba006b8094",{"pageContent":"\n\nCreate a scratch org.\n\nUSAGE\n  $ sfdx org create scratch -v <value> [--json] [-a <value>] [--async] [-d] [-f\n    <value>] [-c] [-e developer|enterprise|group|professional|partner-developer|\n    partner-enterprise|partner-group|partner-professional] [-m] [-y <value>] [-w\n    <value>] [--api-version <value>] [-i <value>] [-t] [--username <value>]\n    [--description <value>] [--name <value>] [--release preview|previous]\n    [--admin-email <value>] [-i <value>]\n\nFLAGS\n  -a, --alias=<value>\n      Alias for the scratch org.\n\n  -d, --set-default\n      Set the scratch org as your default org\n\n  -e, --edition=<option>\n      Salesforce edition of the scratch org. Overrides the value of the \"edition\"\n      option in the definition file, if set.\n      <options: developer|enterprise|group|professional|partner-developer|partner-\n      enterprise|partner-group|partner-professional>\n\n  -f, --definition-file=<value>\n      Path to a scratch org definition file.\n\n  -i, --client-id=<value>\n      Consumer key of the Dev Hub connected app.\n\n  -i, --source-org=<value>\n      15-character ID of the org whose shape the new scratch org will be based on.\n      Overrides the value of the \"sourceOrg\" option in the definition file, if\n      set.\n\n  -t, --[no-]track-source\n      Use source tracking for this scratch org. Set --no-track-source to disable\n      source tracking.\n\n  -v, --target-dev-hub=<value>\n      (required) Username or alias of the Dev Hub org.\n\n  -w, --wait=<minutes>\n      [default: 5 minutes] Number of minutes to wait for the scratch org to be\n      ready.\n\n  -y, --duration-days=<days>\n      [default: 7 days] Number of days before the org expires.\n\n  --admin-email=<value>\n      Email address that will be applied to the org's admin user. Overrides the\n      value of the \"adminEmail\" option in the definition file, if set.\n\n  --api-version=<value>\n      Override the api version used for api requests made by this command\n\n  --async\n      Request the org, but don't wait for it to complete.\n\n  --description=<value>\n      Description of the scratch org in the Dev Hub. Overrides the value of the\n      \"description\" option in the definition file, if set.\n\n  --name=<value>\n      Name of the org, such as \"Acme Company\". Overrides the value of the\n      \"orgName\" option in the definition file, if set.\n\n  --release=<option>\n      Release of the scratch org as compared to the Dev Hub release.\n      <options: preview|previous>\n\n  --username=<value>\n      Username of the scratch org admin user. Overrides the value of the\n      \"username\" option in the definition file, if set.\n\nPACKAGING FLAGS\n  -c, --no-ancestors  Don't include second-generation managed package (2GP)\n                      ancestors in the scratch org.\n  -m, --no-namespace  Create the scratch org with no namespace, even if the Dev\n                      Hub has a namespace.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a scratch org.\n\n  There are two ways to create a scratch org: either specify a definition file\n  that contains the options or use the --edition flag to specify the one\n  required option.\n\n  For either method, you can also use these flags; if you use them with\n  --definition-file, they override their equivalent option in the scratch org\n  definition file:\n\n  * --description\n  * --name  (equivalent to the \"orgName\" option)\n  * --username\n  * --release\n  * --edition\n  * --admin-email (equivalent to the \"adminEmail\" option)\n  * --source-org (equivalent to the \"sourceOrg\" option)\n\n  If you want to set options other than the preceding ones, such as org features\n  or settings, you must use a definition file.\n\n  You must specify a Dev Hub to create a scratch org, either with the\n  --target-dev-hub flag or by setting your default Dev Hub with the\n  target-dev-hub configuration variable.\n\nALIASES\n  $ sfdx env create scratch\n\nEXAMPLES\n  Create a Developer edition scratch org using your default Dev Hub and give\n  the scratch org an alias:\n\n    $ sfdx org create scratch --edition=developer --alias my-scratch-org\n\n  Create a scratch org with a definition file. Specify the Dev Hub using its\n  alias, set the scratch org as your default, and specify that it expires in 3\n  days:\n\n    $ sfdx org create scratch --target-dev-hub MyHub --definition-file \\\n      config/project-scratch-def.json --set-default --duration-days 3\n\n  Create a preview Enterprise edition scratch org; for use only during\n  Salesforce release transition periods:\n\n    $ sfdx org create scratch --edition=enterprise --alias my-scratch-org \\\n      --target-dev-hub MyHub --release preview\n\nFLAG DESCRIPTIONS\n  -a, --alias=<value>  Alias for the scratch org.\n\n    New scratch orgs include one administrator by default. The admin user's\n    username is auto-generated and looks something like\n    test-wvkpnfm5z113@example.com. When you set an alias for a new scratch org,\n    it's assigned this username.\n\n  -e, --edition=developer|enterprise|group|professional|partner-developer|partner-enterprise|partner-group|partner-professional\n\n    Salesforce edition of the scratch org. Overrides the value of the \"edition\"\n    option in the definition file, if set.\n\n    The editions that begin with \"partner-\" are available only if the Dev Hub\n    org is a Partner Business Org.\n\n  -f, --definition-file=<value>  Path to a scratch org definition file.\n\n    The scratch org definition file is a blueprint for the scratch org. It\n    mimics the shape of an org that you use in the development life cycle, such\n    as acceptance testing, packaging, or production. See\n    <https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sf\n    dx_dev_scratch_orgs_def_file.htm> for all the option you can specify in the\n    definition file.\n\n  -t, --[no-]track-source\n\n    Use source tracking for this scratch org. Set --no-track-source to disable\n    source tracking.\n\n    We recommend you enable source tracking in scratch orgs, which is why it's\n    the default behavior. Source tracking allows you to track the changes you\n    make to your metadata, both in your local project and in the scratch org,\n    and to detect any conflicts between the two.\n\n    To disable source tracking in the new scratch org, specify the\n    --no-track-source flag. The main reason to disable source tracking is for\n    performance. For example, while you probably want to deploy metadata and run\n    Apex tests in your CI/CD jobs, you probably don't want to incur the costs of\n    source tracking (checking for conflicts, polling the SourceMember object,\n    various file system operations.) This is a good use case for disabling\n    source tracking in the scratch org.\n\n  -v, --target-dev-hub=<value>  Username or alias of the Dev Hub org.\n\n    Overrides the value of the target-dev-hub configuration variable, if set.\n\n  -w, --wait=<minutes>\n\n    Number of minutes to wait for the scratch org to be ready.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal to you and displays the job ID. To resume the\n    scratch org creation, run the org resume scratch command and pass it the job\n    ID.\n\n  --async  Request the org, but don't wait for it to complete.\n\n    The command immediately displays the job ID and returns control of the\n    terminal to you. This way, you can continue to use the CLI. To resume the\n    scratch org creation, run \"sfdx org resume scratch\".\n\n  --release=preview|previous\n\n    Release of the scratch org as compared to the Dev Hub release.\n\n    By default, scratch orgs are on the same release as the Dev Hub. During\n    Salesforce release transition periods, you can override this default\n    behavior and opt in or out of the new release.\n\n  --username=<value>\n\n    Username of the scratch org admin user. Overrides the value of the\n    \"username\" option in the definition file, if set.\n\n    The username must be unique within the entire scratch org and sandbox\n    universe. You must add your own logic to ensure uniqueness.\n\n    Omit this flag to have Salesforce generate a unique username for your org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_235.txt"}}],["d4b5967f-df11-4815-8bd8-f89a0b0a2cf5",{"pageContent":"\n\nCreate a scratch org configuration (shape) based on the specified source org.\n\nUSAGE\n  $ sfdx org create shape -o <value> [--json] [--api-version <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a scratch org configuration (shape) based on the specified source org.\n\n  Scratch org shapes mimic the baseline setup (features, limits, edition, and\n  Metadata API settings) of a source org without the extraneous data and\n  metadata.\n\n  Run \"sfdx org list shape\" to view the available org shapes and their IDs.\n\n  To create a scratch org from an org shape, include the \"sourceOrg\" property in\n  the scratch org definition file and set it to the org ID of the source org.\n  Then create a scratch org with the \"sfdx force:org:create\" command.\n\nALIASES\n  $ sfdx force org shape create\n\nEXAMPLES\n  Create an org shape for the source org with alias SourceOrg:\n\n    $ sfdx org create shape --target-org SourceOrg\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_236.txt"}}],["04af53cf-5bf1-46be-a778-6ec0ec698cce",{"pageContent":"\n\nCreate a snapshot of a scratch org.\n\nUSAGE\n  $ sfdx org create snapshot -v <value> -o <value> -n <value> [--json]\n    [--api-version <value>] [-d <value>]\n\nFLAGS\n  -d, --description=<value>     Description of snapshot.\n  -n, --name=<value>            (required) Unique name of snapshot.\n  -o, --source-org=<value>      (required) ID or locally authenticated username\n                                or alias of scratch org to snapshot.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a snapshot of a scratch org.\n\n  A snapshot is a point-in-time copy of a scratch org. The copy is referenced by\n  its unique name in a scratch org definition file.\n\n  Use \"sfdx org get snapshot\" to get details, including status, about a snapshot\n  creation request.\n\n  To create a scratch org from a snapshot, include the \"snapshot\" option\n  (instead of \"edition\") in the scratch org definition file and set it to the\n  name of the snapshot. Then use \"sfdx force:org:create\" to create the scratch\n  org.\n\nALIASES\n  $ sfdx force org snapshot create\n\nEXAMPLES\n  Create a snapshot called \"Dependencies\" using the source scratch org ID and\n  your default Dev Hub org:\n\n    $ sfdx org create snapshot --source-org 00Dxx0000000000 --name \\\n      Dependencies --description 'Contains PackageA v1.1.0'\n\n  Create a snapshot called \"NightlyBranch\" using the source scratch org\n  username and a Dev Hub org with alias NightlyDevHub:\n\n    $ sfdx org create snapshot --source-org myuser@myorg --name \\\n      NightlyBranch --description 'Contains PkgA v2.1.0 and PkgB 3.3.0' \\\n      --target-dev-hub NightlyDevHub\n\nFLAG DESCRIPTIONS\n  -d, --description=<value>  Description of snapshot.\n\n    Use this description to document the contents of the snapshot. We suggest\n    that you include a reference point, such as a version control system tag or\n    commit ID\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_237.txt"}}],["f04b8fc2-5d7d-4029-b48c-63e1be8c2d95",{"pageContent":"\n\nCreate a user for a scratch org.\n\nUSAGE\n  $ sfdx org create user -o <value> [--json] [-a <value>] [-f <value>] [-s]\n    [--api-version <value>]\n\nFLAGS\n  -a, --set-alias=<value>        Set an alias for the created username to\n                                 reference in other CLI commands.\n  -f, --definition-file=<value>  File path to a user definition file for\n                                 customizing the new user.\n  -o, --target-org=<value>       (required) Username or alias of the target org.\n  -s, --set-unique-username      Force the username, if specified in the\n                                 definition file or at the command line, to be\n                                 unique by appending the org ID.\n  --api-version=<value>          Override the api version used for api requests\n                                 made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a user for a scratch org.\n\n  A scratch org includes one administrator user by default. For testing\n  purposes, however, you sometimes need to create additional users.\n\n  The easiest way to create a user is to let this command assign default or\n  generated characteristics to the new user. If you want to customize your new\n  user, create a definition file and specify it with the --definition-file flag.\n  In the file, you can include all the User sObject (SSalesforce object) fields\n  and Salesforce DX-specific options, as described in \"User Definition File for\n  Customizing a Scratch Org User\" (https://developer.salesforce.com/docs/atlas.e\n  n-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_users_def_file.htm). You can\n  also specify these options on the command line.\n\n  If you don't customize your new user, this command creates a user with the\n  following default characteristics:\n\n  * The username is the existing administrator’s username prepended with a\n  timestamp, such as 1505759162830_test-wvkpnfm5z113@example.com.\n  * The user’s profile is Standard User.\n  * The values of the required fields of the User sObject are the corresponding\n  values of the administrator user.\n  * The user has no password.\n\n  Use the --set-alias flag to assign a simple name to the user that you can\n  reference in later CLI commands. This alias is local and different from the\n  Alias field of the User sObject record of the new user, which you set in the\n  Setup UI.\n\n  When this command completes, it displays the new username and user ID. Run the\n  \"org display user\" command to get more information about the new user.\n\n  For more information about user limits, defaults, and other considerations\n  when creating a new scratch org user, see https://developer.salesforce.com/doc\n  s/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_users.htm.\n\nALIASES\n  $ sfdx force user create\n\nEXAMPLES\n  Create a user for your default scratch org and let this command generate a\n  username, user ID, and other characteristics:\n\n    $ sfdx org create user\n\n  Create a user with alias \"testuser1\" using a user definition file. Set the\n  \"profileName\" option to \"Chatter Free User\", which overrides the value in\n  the defintion file if it also exists there. Create the user for the scratch\n  org with alias \"my-scratch\":\n\n    $ sfdx org create user --set-alias testuser1 --definition-file \\\n      config/project-user-def.json profileName='Chatter Free User' \\\n      --target-org my-scratch\n\n  Create a user by specifying the username, email, and perm set assignment at\n  the command line; command fails if the username already exists in\n  Salesforce:\n\n    $ sfdx org create user username=testuser1@my.org email=me@my.org \\\n      permsets=DreamHouse\n\n  Create a user with a definition file, set the email value as specified\n  (overriding any value in the definition file), and generate a password for\n  the user. If the username in the definition file isn't unique, the command\n  appends the org ID to make it unique:\n\n    $ sfdx org create user --definition-file config/project-user-def.json \\\n      email=me@my.org generatepassword=true --set-unique-username\n\nFLAG DESCRIPTIONS\n  -f, --definition-file=<value>\n\n    File path to a user definition file for customizing the new user.\n\n    The user definition file uses JSON format and can include any Salesforce\n    User sObject field and Salesforce DX-specific options. See\n    https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfd\n    x_dev_scratch_orgs_users_def_file.htm for more information.\n\n  -s, --set-unique-username\n\n    Force the username, if specified in the definition file or at the command\n    line, to be unique by appending the org ID.\n\n    The new user’s username must be unique across all Salesforce orgs and in the\n    form of an email address. If you let this command generate a username for\n    you, it's guaranteed to be unique. If you specify an existing username in a\n    definition file, the command fails. Set this flag to force the username to\n    be unique; as a result, the username might be different than what you\n    specify in the definition file\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_238.txt"}}],["9f8f6789-754f-4d25-8648-286398c43b2f",{"pageContent":"\n\nDelete a sandbox.\n\nUSAGE\n  $ sfdx org delete sandbox -o <value> [--json] [-p]\n\nFLAGS\n  -o, --target-org=<value>  (required) Sandbox alias or login user.\n  -p, --no-prompt           Don't prompt the user to confirm the deletion.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete a sandbox.\n\n  Salesforce CLI marks the org for deletion in the production org that contains\n  the sandbox licenses and then deletes all local references to the org from\n  your computer.\n  Specify a sandbox with either the username you used when you logged into it,\n  or the alias you gave the sandbox when you created it. Run \"sfdx org list\" to\n  view all your orgs, including sandboxes, and their aliases.\n\nALIASES\n  $ sfdx env delete sandbox\n\nEXAMPLES\n  Delete a sandbox with alias my-sandbox:\n\n    $ sfdx org delete sandbox --target-org=my-sandbox\n\n  Specify a username instead of an alias:\n\n    $ sfdx org delete sandbox --target-org=myusername@example.com.qa\n\n  Delete the sandbox without prompting to confirm :\n\n    $ sfdx org delete sandbox --target-org=my-sandbox --no-prompt\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_239.txt"}}],["4b3bd856-b9c4-4e78-8d90-2c867e633e27",{"pageContent":"\n\nGenerate a custom metadata type and all its records from a Salesforce object.\n\nUSAGE\n  $ sfdx cmdt generate fromorg -o <value> -n <value> -s <value> [--json]\n    [--api-version <value>] [-l <value>] [-p <value>] [-v\n    PackageProtected|Protected|Public] [-i] [-d <value>] [-r <value>]\n\nFLAGS\n  -d, --type-output-directory=<value>  [default: force-app/main/default/objects]\n                                       Directory to store newly-created custom\n                                       metadata type files.\n  -i, --ignore-unsupported             Ignore unsupported field types.\n  -l, --label=<value>                  Label for the custom metadata type.\n  -n, --dev-name=<value>               (required) Name of the custom metadata\n                                       type.\n  -o, --target-org=<value>             (required) Username or alias of the\n                                       target org.\n  -p, --plural-label=<value>           Plural version of the label value; if\n                                       blank, uses label.\n  -r, --records-output-dir=<value>     [default:\n                                       force-app/main/default/customMetadata]\n                                       Directory to store newly-created custom\n                                       metadata record files.\n  -s, --sobject=<value>                (required) API name of the source\n                                       Salesforce object used to generate the\n                                       custom metadata type.\n  -v, --visibility=<option>            [default: Public] Who can see the custom\n                                       metadata type.\n                                       <options:\n                                       PackageProtected|Protected|Public>\n  --api-version=<value>                Override the api version used for api\n                                       requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a custom metadata type and all its records from a Salesforce object.\n\n  Use this command to migrate existing custom objects or custom settings in an\n  org to custom metadata types. If a field of the Salesforce object is of an\n  unsupported type, the field type is automatically converted to text. Run \"sfdx\n  cmdt generate field --help\" to see the list of supported cmdt field types,\n  listed in the --type flag summary. Use the --ignore-unsupported to ignore\n  these fields.\n\n  This command creates the metadata files that describe the new custom metadata\n  type and its fields in the \"force-app/main/default/objects/TypeName__mdt\"\n  directory by default, where \"TypeName\" is the value of the required --dev-name\n  flag. Use --type-output-directory to create them in a different directory.\n\nALIASES\n  $ sfdx force cmdt generate\n\nEXAMPLES\n  Generate a custom metadata type from a custom object called\n  MySourceObject__c in your default org:\n\n    $ sfdx cmdt generate fromorg --dev-name MyCMDT --sobject \\\n      MySourceObject__c\n\n  Generate a custom metadata type from a custom object in an org with alias\n  my-scratch-org; ignore unsupported field types instead of converting them to\n  text:\n\n    $ sfdx cmdt generate fromorg --dev-name MyCMDT --sobject \\\n      MySourceObject__c --ignore-unsupported --target-org my-scratch-org\n\n  Generate a protected custom metadata type from a custom object:\n\n    $ sfdx cmdt generate fromorg --dev-name MyCMDT --sobject \\\n      MySourceObject__c --visibility Protected\n\n  Generate a protected custom metadata type from a custom setting with a\n  specific singular and plural label:\n\n    $ sfdx cmdt generate fromorg --dev-name MyCMDT --label \"My CMDT\" \\\n      --plural-label \"My CMDTs\" --sobject MySourceSetting__c --visibility \\\n      Protected\n\n  Generate a custom metadata type and put the resulting metadata files in the\n  specified directory:\n\n    $ sfdx cmdt generate fromorg --dev-name MyCMDT --sobject \\\n      MySourceObject__c --type-output-directory path/to/my/cmdt/directory\n\n  Generate a custom metadata type and put the resulting record metadata\n  file(s) in the specified directory:\n\n    $ sfdx cmdt generate fromorg --dev-name MyCMDT --sobject \\\n      MySourceObject__c --records-output-dir path/to/my/cmdt/record/directory\n\nFLAG DESCRIPTIONS\n  -i, --ignore-unsupported  Ignore unsupported field types.\n\n    In this context, \"ignore\" means that the fields aren't created. The default\n    behavior is to create fields of type text and convert the field values to\n    text.\n\n  -v, --visibility=PackageProtected|Protected|Public\n\n    Who can see the custom metadata type.\n\n    For more information on what each option means, see this topic in Salesforce\n    Help: https://help.salesforce.com/s/articleView?id=sf.custommetadatatypes_ui\n    _create.htm&type=5\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_24.txt"}}],["3f283ff4-941c-407b-b0b9-90d7389b57a2",{"pageContent":"\n\nDelete a scratch org.\n\nUSAGE\n  $ sfdx org delete scratch -o <value> [--json] [-p]\n\nFLAGS\n  -o, --target-org=<value>  (required) Scratch org alias or login user.\n  -p, --no-prompt           Don't prompt the user to confirm the deletion.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete a scratch org.\n\n  Salesforce CLI marks the org for deletion in the Dev Hub org and then deletes\n  all local references to the org from your computer.\n  Specify a scratch org with either the username or the alias you gave the\n  scratch org when you created it. Run \"sfdx org list\" to view all your orgs,\n  including scratch orgs, and their aliases.\n\nALIASES\n  $ sfdx env delete scratch\n\nEXAMPLES\n  Delete a scratch org with alias my-scratch-org:\n\n    $ sfdx org delete scratch --target-org=my-scratch-org\n\n  Specify a username instead of an alias:\n\n    $ sfdx org delete scratch --target-org=test-123456-abcdefg@example.com\n\n  Delete the scratch org without prompting to confirm :\n\n    $ sfdx org delete scratch --target-org=my-scratch-org --no-prompt\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_240.txt"}}],["ca5b0287-cf5b-4b7a-b419-7c0981bd3859",{"pageContent":"\n\nDelete all org shapes for a target org.\n\nUSAGE\n  $ sfdx org delete shape -o <value> [--json] [--api-version <value>] [-p]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -p, --no-prompt           Don't prompt for confirmation.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete all org shapes for a target org.\n\n  A source org can have only one active org shape. If you try to create an org\n  shape for a source org that already has one, the previous shape is marked\n  inactive and replaced by a new active shape. If you don’t want to create\n  scratch orgs based on this shape, you can delete the org shape.\n\nALIASES\n  $ sfdx force org shape delete\n\nEXAMPLES\n  Delete all org shapes for the source org with alias SourceOrg:\n\n    $ sfdx org delete shape --target-org SourceOrg\n\n  Delete all org shapes without prompting:\n\n    $ sfdx org delete shape --target-org SourceOrg --no-prompt\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_241.txt"}}],["335f0a4d-9fc0-43dc-a3d2-a3f4ae6b78ea",{"pageContent":"\n\nDelete a scratch org snapshot.\n\nUSAGE\n  $ sfdx org delete snapshot -v <value> -s <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -s, --snapshot=<value>        (required) Name or ID of snapshot to delete.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete a scratch org snapshot.\n\n  Dev Hub admins can delete any snapshot, while users can delete only their own\n  unless a Dev Hub admin gives the user Modify All permissions.\n\nALIASES\n  $ sfdx force org snapshot delete\n\nEXAMPLES\n  Delete a snapshot from the default Dev Hub using the snapshot ID:\n\n    $ sfdx org delete snapshot --snapshot 0Oo...\n\n  Delete a snapshot from the specified Dev Hub using the snapshot name:\n\n    $ sfdx org delete snapshot --snapshot BaseSnapshot --target-dev-hub \\\n      SnapshotDevHub\n\nFLAG DESCRIPTIONS\n  -s, --snapshot=<value>  Name or ID of snapshot to delete.\n\n    The IDs of scratch org snapshots start with 0Oo\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_242.txt"}}],["249edb0b-3d19-4f5a-972d-b269c20421f4",{"pageContent":"\n\nDisplay information about an org.\n\nUSAGE\n  $ sfdx org display -o <value> [--json] [--api-version <value>]\n    [--verbose]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n  --verbose                 Display the sfdxAuthUrl property.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display information about an org.\n\n  Output includes your access token, client Id, connected status, org ID,\n  instance URL, username, and alias, if applicable.\n\n  Use --verbose to include the SFDX auth URL. WARNING: The SFDX auth URL\n  contains sensitive information, such as a refresh token that can be used to\n  access an org. Don't share or distribute this URL or token.\n\n  Including --verbose displays the sfdxAuthUrl property only if you\n  authenticated to the org using auth:web:login (not auth:jwt:grant).\n\nALIASES\n  $ sfdx force org display\n\nEXAMPLES\n  Display information about your default org:\n\n    $ sfdx org display\n\n  Display information, including the sfdxAuthUrl property, about the org with\n  alias TestOrg1:\n\n    $ sfdx org display --target-org TestOrg1 --verbose\n\nCOMMANDS\n  org display user  Display information about a Salesforce user\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_243.txt"}}],["c522b28d-e7f8-439a-aaa3-abc8f4bcdb26",{"pageContent":"\n\nDisplay information about a Salesforce user.\n\nUSAGE\n  $ sfdx org display user -o <value> [--json] [--api-version <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display information about a Salesforce user.\n\n  Output includes the profile name, org ID, access token, instance URL, login\n  URL, and alias if applicable. The displayed alias is local and different from\n  the Alias field of the User sObject record of the new user, which you set in\n  the Setup UI.\n\nALIASES\n  $ sfdx force user display\n\nEXAMPLES\n  Display information about the admin user of your default scratch org:\n\n    $ sfdx org display user\n\n  Display information about the specified user and output in JSON format:\n\n    $ sfdx org display user --target-org me@my.org --json\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_244.txt"}}],["6034ab69-d6e9-48a1-b546-f43846139a9d",{"pageContent":"\n\nGenerate a random password for scratch org users.\n\nUSAGE\n  $ sfdx org generate password -o <value> [--json] [-b <value>] [-l <value>] [-c\n    <value>] [--api-version <value>]\n\nFLAGS\n  -b, --on-behalf-of=<value>...  Comma-separated list of usernames or aliases to\n                                 assign the password to.\n  -c, --complexity=<value>       [default: 5] Level of password complexity or\n                                 strength; the higher the value, the stronger\n                                 the password.\n  -l, --length=<value>           [default: 13] Number of characters in the\n                                 generated password; valid values are between 8\n                                 and 100.\n  -o, --target-org=<value>       (required) Username or alias of the target org.\n  --api-version=<value>          Override the api version used for api requests\n                                 made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a random password for scratch org users.\n\n  By default, new scratch orgs contain one admin user with no password. Use this\n  command to generate or change a password for any scratch org user. After it's\n  set, you can’t unset a password, you can only change it.\n\n  To change the password strength, set the --complexity flag to a value between\n  0 and 5. Each value specifies the types of characters used in the generated\n  password:\n\n  0 - lower case letters only\n  1 - lower case letters and numbers only\n  2 - lower case letters and symbols only\n  3 - lower and upper case letters and numbers only\n  4 - lower and upper case letters and symbols only\n  5 - lower and upper case letters and numbers and symbols only\n\n  To see a password that was previously generated, run \"org display user\".\n\nEXAMPLES\n  Generate a password for the original admin user of your default scratch org:\n\n    $ sfdx org generate password\n\n  Generate a password that contains 12 characters for the original admin user\n  of the scratch org with alias \"my-scratch\":\n\n    $ sfdx org generate password --length 12 --target-org my-scratch\n\n  Generate a password for your default scratch org admin user that uses lower\n  and upper case letters and numbers only:\n\n    $ sfdx org generate password --complexity 3\n\n  Generate a password for the specified users in the default scratch org:\n\n    $ sfdx org generate password --on-behalf-of user1@my.org --on-behalf-of \\\n      user2@my.org --on-behalf-of user3@my.org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_245.txt"}}],["5df9ee4e-4bbf-4337-8458-94c1a3c3ec09",{"pageContent":"\n\nGet details about a scratch org snapshot.\n\nUSAGE\n  $ sfdx org get snapshot -v <value> -s <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -s, --snapshot=<value>        (required) Name or ID of snapshot to retrieve.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Get details about a scratch org snapshot.\n\n  Snapshot creation can take a while. Use this command with the snapshot name or\n  ID to check its creation status. After the status changes to Active, you can\n  use the snapshot to create scratch orgs.\n\n  To create a snapshot, use the \"sfdx org create snapshot\" command. To retrieve\n  a list of all snapshots, use \"sfdx org list snapshot\".\n\nALIASES\n  $ sfdx force org snapshot get\n\nEXAMPLES\n  Get snapshot details using its ID and the default Dev Hub org:\n\n    $ sfdx org get snapshot --snapshot 0Oo...\n\n  Get snapshot details using its name from a Dev Hub org with alias\n  SnapshotDevHub:\n\n    $ sfdx org get snapshot --snapshot Dependencies --target-dev-hub \\\n      SnapshotDevHub\n\nFLAG DESCRIPTIONS\n  -s, --snapshot=<value>  Name or ID of snapshot to retrieve.\n\n    The IDs of scratch org snapshots start with 0Oo\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_246.txt"}}],["05c29b1b-3819-46f6-bd78-313f26651d26",{"pageContent":"\n\nList all orgs you’ve created or authenticated to.\n\nUSAGE\n  $ sfdx org list [--json] [--verbose] [--all] [-p --clean]\n    [--skip-connection-status]\n\nFLAGS\n  -p, --no-prompt           Don't prompt for confirmation.\n  --all                     Include expired, deleted, and unknown-status scratch\n                            orgs.\n  --clean                   Remove all local org authorizations for non-active\n                            scratch orgs. Use auth:logout to remove non-scratch\n                            orgs.\n  --skip-connection-status  Skip retrieving the connection status of non-scratch\n                            orgs.\n  --verbose                 List more information about each org.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force org list\n\nEXAMPLES\n  List all orgs you've created or authenticated to:\n\n    $ sfdx org list\n\n  List all orgs, including expired, deleted, and unknown-status orgs; don't\n  include the connection status:\n\n    $ sfdx org list --skip-connection-status --all\n\n  List orgs and remove local org authorization info about non-active scratch\n  orgs:\n\n    $ sfdx org list --clean\n\nCOMMANDS\n  org list auth            List authorization information about the orgs you\n                           created or logged into.\n  org list metadata        List the metadata components and properties of a\n                           specified type.\n  org list metadata-types  Display details about the metadata types that are\n                           enabled for your org.\n  org list shape           List all org shapes you’ve created.\n  org list snapshot        List scratch org snapshots.\n  org list users           List all locally-authenticated users of an org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_247.txt"}}],["6bbe7f2d-06e8-4ebe-baee-8c2499741189",{"pageContent":"\n\nList authorization information about the orgs you created or logged into.\n\nUSAGE\n  $ sfdx org list auth [--json]\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List authorization information about the orgs you created or logged into.\n\n  This command uses local authorization information that Salesforce CLI caches\n  when you create a scratch org or log into an org. The command doesn't actually\n  connect to the orgs to verify that they're still active. As a result, this\n  command executes very quickly. If you want to view live information about your\n  authorized orgs, such as their connection status, use the \"org list\" command.\n\nALIASES\n  $ sfdx force auth list\n  $ sfdx auth list\n\nEXAMPLES\n  List local authorization information about your orgs:\n\n    $ sfdx org list auth\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_248.txt"}}],["45fd0c27-900d-4a2d-bbbf-50ad1fa1393d",{"pageContent":"\n\nDisplay information about limits in your org.\n\nUSAGE\n  $ sfdx limits api display -o <value> [--json] [--api-version <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display information about limits in your org.\n\n  For each limit, this command returns the maximum allocation and the remaining\n  allocation based on usage. See this topic for a description of each limit:\n  https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resou\n  rces_limits.htm.\n\nALIASES\n  $ sfdx force limits api display\n  $ sfdx org list limits\n\nEXAMPLES\n  Display limits in your default org:\n\n    $ sfdx limits api display\n\n  Display limits in the org with alias \"my-scratch-org\":\n\n    $ sfdx limits api display --target-org my-scratch-org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_249.txt"}}],["53a4d2b1-5bb4-4ac6-8217-6e7d49535932",{"pageContent":"\n\nGenerate a new custom metadata type in the current project.\n\nUSAGE\n  $ sfdx cmdt generate object -n <value> [--json] [-l <value>] [-p <value>] [-v\n    PackageProtected|Protected|Public] [-d <value>]\n\nFLAGS\n  -d, --output-directory=<value>  Directory to store the newly-created custom\n                                  metadata type files\n  -l, --label=<value>             Label for the custom metadata type.\n  -n, --type-name=<value>         (required) Unique object name for the custom\n                                  metadata type.\n  -p, --plural-label=<value>      Plural version of the label value; if blank,\n                                  uses label.\n  -v, --visibility=<option>       [default: Public] Who can see the custom\n                                  metadata type.\n                                  <options: PackageProtected|Protected|Public>\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a new custom metadata type in the current project.\n\n  This command creates a metadata file that describes the new custom metadata\n  type. By default, the file is created in the MyCustomType__mdt directory in\n  the current directory, where MyCustomType is the value of the required\n  --type-name flag. Use the --output-directory to generate the file in a package\n  directory with other custom metadata types, such as\n  \"force-app/main/default/objects\".\n\nALIASES\n  $ sfdx force cmdt create\n  $ sfdx cmdt create\n\nEXAMPLES\n  Generate a custom metadata type with developer name 'MyCustomType'; this\n  name is also used as the label:\n\n    $ sfdx cmdt generate object --type-name MyCustomType\n\n  Generate a protected custom metadata type with a specific label:\n\n    $ sfdx cmdt generate object --type-name MyCustomType --label \"Custom \\\n      Type\" --plural-label \"Custom Types\" --visibility Protected\n\nFLAG DESCRIPTIONS\n  -d, --output-directory=<value>\n\n    Directory to store the newly-created custom metadata type files\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --type-name=<value>  Unique object name for the custom metadata type.\n\n    The name can contain only underscores and alphanumeric characters, and must\n    be unique in your org. It must begin with a letter, not include spaces, not\n    end with an underscore, and not contain two consecutive underscores.\n\n  -v, --visibility=PackageProtected|Protected|Public\n\n    Who can see the custom metadata type.\n\n    For more information on what each option means, see this topic in Salesforce\n    Help: https://help.salesforce.com/s/articleView?id=sf.custommetadatatypes_ui\n    _create.htm&type=5\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_25.txt"}}],["fa006cb2-64a8-45ec-b114-91df1b6a6083",{"pageContent":"\n\nList the metadata components and properties of a specified type.\n\nUSAGE\n  $ sfdx org list metadata -o <value> -m <value> [--json] [--api-version\n    <value>] [-f <value>] [--folder <value>]\n\nFLAGS\n  -f, --output-file=<value>    Pathname of the file in which to write the\n                               results.\n  -m, --metadata-type=<value>  (required) Metadata type to be retrieved, such as\n                               CustomObject; metadata type names are\n                               case-sensitive.\n  -o, --target-org=<value>     (required) Username or alias of the target org.\n  --api-version=<value>        API version to use; default is the most recent\n                               API version.\n  --folder=<value>             Folder associated with the component; required\n                               for components that use folders; folder names are\n                               case-sensitive.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List the metadata components and properties of a specified type.\n\n  Use this command to identify individual components in your manifest file or if\n  you want a high-level view of particular metadata types in your org. For\n  example, you can use this command to return a list of names of all the\n  CustomObject or Layout components in your org, then use this information in a\n  retrieve command that returns a subset of these components.\n\n  The username that you use to connect to the org must have the Modify All Data\n  or Modify Metadata Through Metadata API Functions permission.\n\nALIASES\n  $ sfdx force mdapi listmetadata\n\nEXAMPLES\n  List the CustomObject components, and their properties, in the org with\n  alias \"my-dev-org\":\n\n    $ sfdx org list metadata --metadata-type CustomObject --target-org \\\n      my-dev-org\n\n  List the CustomObject components in your default org, write the output to\n  the specified file, and use API version 57.0:\n\n    $ sfdx org list metadata --metadata-type CustomObject --api-version 57.0 \\\n      --output-file /path/to/outputfilename.txt\n\n  List the Dashboard components in your default org that are contained in the\n  \"folderSales\" folder, write the output to the specified file, and use API\n  version 57.0:\n\n    $ sfdx org list metadata --metadata-type Dashboard --folder folderSales \\\n      --api-version 57.0 --output-file /path/to/outputfilename.txt\n\nFLAG DESCRIPTIONS\n  --api-version=<value>\n\n    API version to use; default is the most recent API version.\n\n    Override the api version used for api requests made by this command\n\n  --folder=<value>\n\n    Folder associated with the component; required for components that use\n    folders; folder names are case-sensitive.\n\n    Examples of metadata types that use folders are Dashboard, Document,\n    EmailTemplate, and Report\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_250.txt"}}],["a179e4b3-9a43-4faa-8a10-b314a98a1f89",{"pageContent":"\n\nDisplay details about the metadata types that are enabled for your org.\n\nUSAGE\n  $ sfdx org list metadata-types -o <value> [--json] [--api-version <value>] [-f\n    <value>]\n\nFLAGS\n  -f, --output-file=<value>  Pathname of the file in which to write the results.\n  -o, --target-org=<value>   (required) Username or alias of the target org.\n  --api-version=<value>      API version to use; default is the most recent API\n                             version.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display details about the metadata types that are enabled for your org.\n\n  The information includes Apex classes and triggers, custom objects, custom\n  fields on standard objects, tab sets that define an app, and many other\n  metadata types. Use this information to identify the syntax needed for a\n  <name> element in a manifest file (package.xml).\n\n  The username that you use to connect to the org must have the Modify All Data\n  or Modify Metadata Through Metadata API Functions permission.\n\nALIASES\n  $ sfdx force mdapi describemetadata\n\nEXAMPLES\n  Display information about all known and enabled metadata types in the org\n  with alias \"my-dev-org\" using API version 57.0:\n\n    $ sfdx org list metadata-types --api-version 57.0 --target-org \\\n      my-dev-org\n\n  Display only the metadata types that aren't yet supported by Salesforce CLI\n  in your default org and write the results to the specified file:\n\n    $ sfdx org list metadata-types --output-file /path/to/outputfilename.txt \\\n      --filter-known\n\nFLAG DESCRIPTIONS\n  -f, --output-file=<value>  Pathname of the file in which to write the results.\n\n    Directing the output to a file makes it easier to extract relevant\n    information for your package.xml manifest file. The default output\n    destination is the terminal or command window console.\n\n  --api-version=<value>\n\n    API version to use; default is the most recent API version.\n\n    Override the api version used for api requests made by this command\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_251.txt"}}],["6a7c78bd-75bb-4142-9dac-3ec44efcbd51",{"pageContent":"\n\nList all org shapes you’ve created.\n\nUSAGE\n  $ sfdx org list shape [--json]\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List all org shapes you’ve created.\n\n  The output includes the alias, username, and ID of the source org, the status\n  of the org shape creation, and more. Use the org ID to update your scratch org\n  configuration file so you can create a scratch org based on this org shape.\n\nALIASES\n  $ sfdx force org shape list\n\nEXAMPLES\n  List all org shapes you've created:\n\n    $ sfdx org list shape\n\n  List all org shapes in JSON format and write the output to a file:\n\n    $ sfdx org list shape --json > tmp/MyOrgShapeList.json\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_252.txt"}}],["89af5eff-a6ae-4eb2-a40c-b8d4ec4e545a",{"pageContent":"\n\nList scratch org snapshots.\n\nUSAGE\n  $ sfdx org list snapshot -v <value> [--json] [--api-version <value>]\n\nFLAGS\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List scratch org snapshots.\n\n  You can view all the snapshots in a Dev Hub that you have access to. If you’re\n  an admin, you can see all snapshots associated with the Dev Hub org. If you’re\n  a user, you can see only your snapshots unless a Dev Hub admin gives you View\n  All permissions.\n\n  To create a snapshot, use the \"sfdx org create snapshot\" command. To get\n  details about a snapshot request, use \"sfdx org get snapshot\".\n\nALIASES\n  $ sfdx force org snapshot list\n\nEXAMPLES\n  List snapshots in the default Dev Hub:\n\n    $ sfdx org list snapshot\n\n  List snapshots in the Dev Hub with alias SnapshotDevHub:\n\n    $ sfdx org list snapshot --target-dev-hub SnapshotDevHub\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_253.txt"}}],["75cfe794-aed1-48d5-98fd-c51414936313",{"pageContent":"\n\nDisplay record counts for the specified standard or custom objects.\n\nUSAGE\n  $ sfdx limits recordcounts display -o <value> [--json] [-s <value>] [--api-version\n    <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -s, --sobject=<value>...  [default: ] API name of the standard or custom\n                            object for which to display record counts.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display record counts for the specified standard or custom objects.\n\n  Use this command to get an approximate count of the records in standard or\n  custom objects in your org. These record counts are the same as the counts\n  listed in the Storage Usage page in the Setup UI. The record counts are\n  approximate because they're calculated asynchronously and your org's storage\n  usage isn't updated immediately. To display all available record counts, run\n  the command without the --sobject flag.\n\nALIASES\n  $ sfdx force limits recordcounts display\n  $ sfdx org list sobject record-counts\n\nEXAMPLES\n  Display all available record counts in your default org:\n\n    $ sfdx limits recordcounts display\n\n  Display record counts for the Account, Contact, Lead, and Opportunity\n  objects in your default org:\n\n    $ sfdx limits recordcounts display --sobject Account --sobject Contact \\\n      --sobject Lead --sobject Opportunity\n\n  Display record counts for the Account and Lead objects for the org with\n  alias \"my-scratch-org\":\n\n    $ sfdx limits recordcounts display --sobject Account --sobject Lead \\\n      --target-org my-scratch-org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_254.txt"}}],["61bd4d3b-2fb4-4132-b983-a06b676381f2",{"pageContent":"\n\nList all locally-authenticated users of an org.\n\nUSAGE\n  $ sfdx org list users -o <value> [--json] [--api-version <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List all locally-authenticated users of an org.\n\n  For scratch orgs, the list includes any users you've created with the \"org\n  create user\" command; the original scratch org admin user is marked with\n  \"(A)\". For other orgs, the list includes the users you used to authenticate to\n  the org.\n\nALIASES\n  $ sfdx force user list\n\nEXAMPLES\n  List the locally-authenticated users of your default org:\n\n    $ sfdx org list users\n\n  List the locally-authenticated users of the specified org:\n\n    $ sfdx org list users --target-org me@my.org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_255.txt"}}],["3fda9d6a-4299-43b7-af6b-f720b2145e28",{"pageContent":"\n\nAuthorize an org using an existing Salesforce access token.\n\nUSAGE\n  $ sfdx org login access-token -r <value> [--json] [-d] [-s] [-a <value>] [-p]\n\nFLAGS\n  -a, --alias=<value>         Alias for the org.\n  -d, --set-default-dev-hub   Set the authenticated org as the default Dev Hub.\n  -p, --no-prompt             Don't prompt for confirmation.\n  -r, --instance-url=<value>  (required) URL of the instance that the org lives\n                              on.\n  -s, --set-default           Set the authenticated org as the default that all\n                              org-related commands run against.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Authorize an org using an existing Salesforce access token.\n\n  By default, the command runs interactively and asks you for the access token.\n  If you previously authorized the org, the command prompts whether you want to\n  overwrite the local file. Specify --no-prompt to not be prompted.\n\n  To use the command in a CI/CD script, set the SFDX_ACCESS_TOKEN environment\n  variable to the access token. Then run the command with the --no-prompt\n  parameter.\n\nALIASES\n  $ sfdx force auth accesstoken store\n  $ sfdx auth accesstoken store\n\nEXAMPLES\n  Authorize an org on https://mycompany.my.salesforce.com; the command prompts\n  you for the access token:\n\n    $ sfdx org login access-token --instance-url \\\n      https://mycompany.my.salesforce.com\n\n  Authorize the org without being prompted; you must have previously set the\n  SFDX_ACCESS_TOKEN environment variable to the access token:\n\n    $ sfdx org login access-token --instance-url \\\n      https://dev-hub.my.salesforce.com --no-prompt\n\nFLAG DESCRIPTIONS\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n\n    If you specify an --instance-url value, this value overrides the\n    sfdcLoginUrl value in your sfdx-project.json file.\n\n    To specify a My Domain URL, use the format\n    https://yourcompanyname.my.salesforce.com.\n\n    To specify a sandbox, set --instance-url to\n    https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_256.txt"}}],["c24a3092-3a37-47b9-bb76-52beaa424e8b",{"pageContent":"\n\nAuthorize an org using a device code.\n\nUSAGE\n  $ sfdx org login device [--json] [-i <value>] [-r <value>] [-d] [-s] [-a\n    <value>]\n\nFLAGS\n  -a, --alias=<value>         Alias for the org.\n  -d, --set-default-dev-hub   Set the authenticated org as the default Dev Hub.\n  -i, --client-id=<value>     OAuth client ID (also called consumer key) of your\n                              custom connected app.\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n  -s, --set-default           Set the authenticated org as the default that all\n                              org-related commands run against.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Authorize an org using a device code.\n\n  Use this command to allow a device to connect to an org.\n\n  When you run this command, it first displays an 8-digit device code and the\n  URL for verifying the code on your org. The default instance URL is\n  https://login.salesforce.com, so if the org you're authorizing is on a\n  different instance, use the --instance-url. The command waits while you\n  complete the verification. Open a browser and navigate to the displayed\n  verification URL, enter the code, then click Connect. If you aren't already\n  logged into your org, log in, and then you're prompted to allow the device to\n  connect to the org. After you successfully authorize the org, you can close\n  the browser window.\n\nALIASES\n  $ sfdx force auth device login\n  $ sfdx auth device login\n\nEXAMPLES\n  Authorize an org using a device code, give the org the alias TestOrg1, and\n  set it as your default Dev Hub org:\n\n    $ sfdx org login device --set-default-dev-hub --alias TestOrg1\n\n  Authorize an org in which you've created a custom connected app with the\n  specified client ID (consumer key):\n\n    $ sfdx org login device --client-id <OAuth client id>\n\n  Authorize a sandbox org with the specified instance URL:\n\n    $ sfdx org login device --instance-url \\\n      https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\nFLAG DESCRIPTIONS\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n\n    If you specify an --instance-url value, this value overrides the\n    sfdcLoginUrl value in your sfdx-project.json file.\n\n    To specify a My Domain URL, use the format\n    https://yourcompanyname.my.salesforce.com.\n\n    To specify a sandbox, set --instance-url to\n    https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_257.txt"}}],["e52da2b4-da03-4bbc-8a4d-09617b907767",{"pageContent":"\n\nLog in to a Salesforce org using a JSON web token (JWT).\n\nUSAGE\n  $ sfdx org login jwt -o <value> -f <value> -i <value> [--json] [-r\n    <value>] [-d] [-s] [-a <value>]\n\nFLAGS\n  -a, --alias=<value>         Alias for the org.\n  -d, --set-default-dev-hub   Set the authenticated org as the default Dev Hub.\n  -f, --jwt-key-file=<value>  (required) Path to a file containing the private\n                              key.\n  -i, --client-id=<value>     (required) OAuth client ID (also called consumer\n                              key) of your custom connected app.\n  -o, --username=<value>      (required) Username of the user logging in.\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n  -s, --set-default           Set the authenticated org as the default that all\n                              org-related commands run against.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Log in to a Salesforce org using a JSON web token (JWT).\n\n  Use this command in automated environments where you can’t interactively log\n  in with a browser, such as in CI/CD scripts.\n\n  Logging into an org authorizes the CLI to run other commands that connect to\n  that org, such as deploying or retrieving a project. You can log into many\n  types of orgs, such as sandboxes, Dev Hubs, Env Hubs, production orgs, and\n  scratch orgs.\n\n  Complete these steps before you run this command:\n\n  1. Create a digital certificate (also called digital signature) and the\n  private key to sign the certificate. You can use your own key and certificate\n  issued by a certification authority. Or use OpenSSL to create a key and a\n  self-signed digital certificate.\n  2. Store the private key in a file on your computer. When you run this\n  command, you set the --jwt-key-file flag to this file.\n  3. Create a custom connected app in your org using the digital certificate.\n  Make note of the consumer key (also called client id) that’s generated for\n  you. Be sure the username of the user logging in is approved to use the\n  connected app. When you run this command, you set the --client-id flag to the\n  consumer key.\n\n  See https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/s\n  fdx_dev_auth_jwt_flow.htm for more information.\n\n  We recommend that you set an alias when you log into an org. Aliases make it\n  easy to later reference this org when running commands that require it. If you\n  don’t set an alias, you use the username that you specified when you logged in\n  to the org. If you run multiple commands that reference the same org, consider\n  setting the org as your default. Use --set-default for your default scratch\n  org or sandbox, or --set-default-dev-hub for your default Dev Hub.\n\nALIASES\n  $ sfdx force auth jwt grant\n  $ sfdx auth jwt grant\n\nEXAMPLES\n  Log into an org with username jdoe@example.org and on the default instance\n  URL (https://login.salesforce.org). The private key is stored in the file\n  /Users/jdoe/JWT/server.key and the command uses the connected app with\n  consumer key (client id) 04580y4051234051.\n\n    $ sfdx org login jwt --username jdoe@example.org --jwt-key-file \\\n      /Users/jdoe/JWT/server.key --client-id 04580y4051234051\n\n  Set the org as the default and give it an alias:\n\n    $ sfdx org login jwt --username jdoe@example.org --jwt-key-file \\\n      /Users/jdoe/JWT/server.key --client-id 04580y4051234051 --alias ci-org \\\n      --set-default\n\n  Set the org as the default Dev Hub and give it an alias:\n\n    $ sfdx org login jwt --username jdoe@example.org --jwt-key-file \\\n      /Users/jdoe/JWT/server.key --client-id 04580y4051234051 --alias \\\n      ci-dev-hub --set-default-dev-hub\n\n  Log in to a sandbox using URL\n  https://MyDomainName--SandboxName.sandbox.my.salesforce.com:\n\n    $ sfdx org login jwt --username jdoe@example.org --jwt-key-file \\\n      /Users/jdoe/JWT/server.key --client-id 04580y4051234051 --alias ci-org \\\n      --set-default --instance-url \\\n      https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\nFLAG DESCRIPTIONS\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n\n    If you specify an --instance-url value, this value overrides the\n    sfdcLoginUrl value in your sfdx-project.json file.\n\n    To specify a My Domain URL, use the format\n    https://yourcompanyname.my.salesforce.com.\n\n    To specify a sandbox, set --instance-url to\n    https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_258.txt"}}],["2910c686-4e42-4f5f-8091-37ac164a3024",{"pageContent":"\n\nAuthorize an org using a Salesforce DX authorization URL stored in a file.\n\nUSAGE\n  $ sfdx org login sfdx-url -f <value> [--json] [-d] [-s] [-a <value>]\n\nFLAGS\n  -a, --alias=<value>          Alias for the org.\n  -d, --set-default-dev-hub    Set the authenticated org as the default Dev Hub.\n  -f, --sfdx-url-file=<value>  (required) Path to a file that contains the\n                               Salesforce DX authorization URL.\n  -s, --set-default            Set the authenticated org as the default that all\n                               org-related commands run against.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Authorize an org using a Salesforce DX authorization URL stored in a file.\n\n  The Salesforce DX (SFDX) authorization URL must have the format\n  \"force://<clientId>:<clientSecret>:<refreshToken>@<instanceUrl>\". NOTE: The\n  SFDX authorization URL uses the \"force\" protocol, and not \"http\" or \"https\".\n  Also, the \"instanceUrl\" inside the SFDX authorization URL doesn't include the\n  protocol (\"https://\").\n\n  You have three options when creating the authorization file. The easiest\n  option is to redirect the output of the \"sfdx org display --verbose --json\"\n  command into a file. For example, using an org with alias my-org that you've\n  already authorized:\n\n  $ sfdx org display --target-org my-org --verbose --json > authFile.json\n\n  The resulting JSON file contains the URL in the \"sfdxAuthUrl\" property of the\n  \"result\" object. You can then reference the file when running this command:\n\n  $ sfdx org login sfdx-url --sfdx-url-file authFile.json\n\n  NOTE: The \"sfdx org display --verbose\" command displays the refresh token only\n  for orgs authorized with the web server flow, and not the JWT bearer flow.\n\n  You can also create a JSON file that has a top-level property named\n  sfdxAuthUrl whose value is the authorization URL. Finally, you can create a\n  normal text file that includes just the URL and nothing else.\n\nALIASES\n  $ sfdx force auth sfdxurl store\n  $ sfdx auth sfdxurl store\n\nEXAMPLES\n  Authorize an org using the SFDX authorization URL in the files/authFile.json\n  file:\n\n    $ sfdx org login sfdx-url --sfdx-url-file files/authFile.json\n\n  Similar to previous example, but set the org as your default and give it an\n  alias MyDefaultOrg:\n\n    $ sfdx org login sfdx-url --sfdx-url-file files/authFile.json \\\n      --set-default --alias MyDefaultOrg\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_259.txt"}}],["275c88a4-da21-4b2f-adb0-816bdbdab3ed",{"pageContent":"\n\nGenerate a new record for a given custom metadata type in the current project.\n\nUSAGE\n  $ sfdx cmdt generate record -t <value> -n <value> [--json] [-l <value>] [-p\n    true|false] [-i <value>] [-d <value>]\n\nFLAGS\n  -d, --output-directory=<value>  [default:\n                                  force-app/main/default/customMetadata]\n                                  Directory to store newly-created custom\n                                  metadata record files.\n  -i, --input-directory=<value>   [default: force-app/main/default/objects]\n                                  Directory from which to get the custom\n                                  metadata type definition from.\n  -l, --label=<value>             Label for the new record.\n  -n, --record-name=<value>       (required) Name of the new record.\n  -p, --protected=<option>        [default: false] Protect the record when it's\n                                  in a managed package.\n                                  <options: true|false>\n  -t, --type-name=<value>         (required) API name of the custom metadata\n                                  type to create a record for; must end in\n                                  \"__mdt\".\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a new record for a given custom metadata type in the current project.\n\n  The custom metadata type must already exist in your project. You must specify\n  a name for the new record. Use name=value pairs to specify the values for the\n  fields, such as MyTextField=\"some text here\" or MyNumberField=32.\n\nALIASES\n  $ sfdx force cmdt record create\n  $ sfdx cmdt record create\n\nEXAMPLES\n  Create a record metadata file for custom metadata type 'MyCMT' with\n  specified values for two custom fields:\n\n    $ sfdx cmdt generate record --type-name MyCMT__mdt --record-name \\\n      MyRecord My_Custom_Field_1=Foo My_Custom_Field_2=Bar\n\n  Create a protected record metadata file for custom metadata type 'MyCMT'\n  with a specific label and values specified for two custom fields:\n\n    $ sfdx cmdt generate record --type-name MyCMT__mdt --record-name \\\n      MyRecord --label \"My Record\" --protected true My_Custom_Field_1=Foo \\\n      My_Custom_Field_2=Bar\n\nFLAG DESCRIPTIONS\n  -p, --protected=true|false  Protect the record when it's in a managed package.\n\n    Protected records can only be accessed by code in the same managed package\n    namespace\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_26.txt"}}],["4b505b11-e602-4811-8897-5d4e3ca4b278",{"pageContent":"\n\nLog in to a Salesforce org using the web server flow.\n\nUSAGE\n  $ sfdx org login web [--json] [-b chrome|edge|firefox] [-i <value>] [-r\n    <value>] [-d] [-s] [-a <value>]\n\nFLAGS\n  -a, --alias=<value>         Alias for the org.\n  -b, --browser=<option>      Browser in which to open the org.\n                              <options: chrome|edge|firefox>\n  -d, --set-default-dev-hub   Set the authenticated org as the default Dev Hub.\n  -i, --client-id=<value>     OAuth client ID (also called consumer key) of your\n                              custom connected app.\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n  -s, --set-default           Set the authenticated org as the default that all\n                              org-related commands run against.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Log in to a Salesforce org using the web server flow.\n\n  Opens a Salesforce instance URL in a web browser so you can enter your\n  credentials and log in to your org. After you log in, you can close the\n  browser window.\n\n  Logging into an org authorizes the CLI to run other commands that connect to\n  that org, such as deploying or retrieving metadata. You can log into many\n  types of orgs, such as sandboxes, Dev Hubs, Env Hubs, production orgs, and\n  scratch orgs.\n\n  We recommend that you set an alias when you log into an org. Aliases make it\n  easy to later reference this org when running commands that require it. If you\n  don’t set an alias, you use the username that you specified when you logged in\n  to the org. If you run multiple commands that reference the same org, consider\n  setting the org as your default. Use --set-default for your default scratch\n  org or sandbox, or --set-default-dev-hub for your default Dev Hub.\n\n  By default, this command uses the global out-of-the-box connected app in your\n  org. If you need more security or control, such as setting the refresh token\n  timeout or specifying IP ranges, create your own connected app using a digital\n  certificate. Make note of the consumer key (also called cliend id) that’s\n  generated for you. Then specify the consumer key with the --client-id flag.\n\nALIASES\n  $ sfdx force auth web login\n  $ sfdx auth web login\n\nEXAMPLES\n  Run the command with no flags to open the default Salesforce login page\n  (https://login.salesforce.com):\n\n    $ sfdx org login web\n\n  Log in to your Dev Hub, set it as your default Dev Hub, and set an alias\n  that you reference later when you create a scratch org:\n\n    $ sfdx org login web --set-default-dev-hub --alias dev-hub\n\n  Log in to a sandbox and set it as your default org:\n\n    $ sfdx org login web --instance-url \\\n      https://MyDomainName--SandboxName.sandbox.my.salesforce.com \\\n      --set-default\n\n  Use --browser to specify a specific browser, such as Google Chrome:\n\n    $ sfdx org login web --instance-url \\\n      https://MyDomainName--SandboxName.sandbox.my.salesforce.com \\\n      --set-default --browser chrome\n\n  Use your own connected app by specifying its consumer key (also called\n  client ID):\n\n    $ sfdx org login web --instance-url \\\n      https://MyDomainName--SandboxName.sandbox.my.salesforce.com \\\n      --set-default --browser chrome --client-id 04580y4051234051\n\nFLAG DESCRIPTIONS\n  -b, --browser=chrome|edge|firefox  Browser in which to open the org.\n\n    If you don’t specify --browser, the command uses your default browser. The\n    exact names of the browser applications differ depending on the operating\n    system you're on; check your documentation for details.\n\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n\n    If you specify an --instance-url value, this value overrides the\n    sfdcLoginUrl value in your sfdx-project.json file.\n\n    To specify a My Domain URL, use the format\n    https://yourcompanyname.my.salesforce.com.\n\n    To specify a sandbox, set --instance-url to\n    https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_260.txt"}}],["348f4dcf-8999-496e-9064-2f76f55d472f",{"pageContent":"\n\nLog out of a Salesforce org.\n\nUSAGE\n  $ sfdx org logout [--json] [-a | -o <value>] [-p]\n\nFLAGS\n  -a, --all                 Include all authenticated orgs.\n  -o, --target-org=<value>  Username or alias of the target org.\n  -p, --no-prompt           Don't prompt for confirmation.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Log out of a Salesforce org.\n\n  If you run this command with no flags, it first displays a list of orgs you've\n  created or logged into, with none of the orgs selected. Use the arrow keys to\n  scroll through the list and the space bar to select the orgs you want to log\n  out of. Press Enter when you're done; the command asks for a final\n  confirmation before logging out of the selected orgs.\n\n  The process is similar if you specify --all, except that in the initial list\n  of orgs, they're all selected. Use --target-org to logout of a specific org.\n  In both these cases by default, you must still confirm that you want to log\n  out. Use --no-prompt to never be asked for confirmation when also using --all\n  or --target-org.\n\n  Be careful! If you log out of a scratch org without having access to its\n  password, you can't access the scratch org again, either through the CLI or\n  the Salesforce UI.\n\nALIASES\n  $ sfdx force auth logout\n  $ sfdx auth logout\n\nEXAMPLES\n  Interactively select the orgs to log out of:\n\n    $ sfdx org logout\n\n  Log out of the org with username me@my.org:\n\n    $ sfdx org logout --target-org me@my.org\n\n  Log out of all orgs after confirmation:\n\n    $ sfdx org logout --all\n\n  Logout of the org with alias my-scratch and don't prompt for confirmation:\n\n    $ sfdx org logout --target-org my-scratch --no-prompt\n\nFLAG DESCRIPTIONS\n  -a, --all  Include all authenticated orgs.\n\n    All orgs includes Dev Hubs, sandboxes, DE orgs, and expired, deleted, and\n    unknown-status scratch orgs\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_261.txt"}}],["7adb9014-f032-4b54-a65d-bc7ac63388c0",{"pageContent":"\n\nOpen your default scratch org, or another specified org, in a browser.\n\nUSAGE\n  $ sfdx org open -o <value> [--json] [--api-version <value>] [-b\n    chrome|edge|firefox | -r] [-p <value> | -f <value>]\n\nFLAGS\n  -b, --browser=<option>     Browser where the org opens.\n                             <options: chrome|edge|firefox>\n  -f, --source-file=<value>  Path to an ApexPage or FlexiPage to open in\n                             Lightning App Builder.\n  -o, --target-org=<value>   (required) Username or alias of the target org.\n  -p, --path=<value>         Navigation URL path to open a specific page.\n  -r, --url-only             Display navigation URL, but don’t launch browser.\n  --api-version=<value>      Override the api version used for api requests made\n                             by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Open your default scratch org, or another specified org, in a browser.\n\n  To open a specific page, specify the portion of the URL after\n  \"https://MyDomainName.my.salesforce.com/\" as the value for the --path flag.\n  For example, specify \"--path lightning\" to open Lightning Experience, or\n  specify \"--path /apex/YourPage\" to open a Visualforce page.\n\n  Use the --source-file to open a Lightning Page from your local project in\n  Lightning App Builder. Lightning page files have the suffix\n  .flexipage-meta.xml, and are stored in the \"flexipages\" directory.\n\n  To generate a URL but not launch it in your browser, specify --url-only.\n\n  To open in a specific browser, use the --browser flag. Supported browsers are\n  \"chrome\", \"edge\", and \"firefox\". If you don't specify --browser, the org opens\n  in your default browser.\n\nALIASES\n  $ sfdx force org open\n  $ sfdx force source open\n\nEXAMPLES\n  Open your default org in your default browser:\n\n    $ sfdx org open\n\n  Open the org with alias MyTestOrg1 in the Firefox browser:\n\n    $ sfdx org open --target-org MyTestOrg1 --browser firefox\n\n  Display the navigation URL for the Lightning Experience page for your\n  default org, but don't open the page in a browser:\n\n    $ sfdx org open --url-only --path lightning\n\n  Open a local Lightning page in your default org's Lightning App Builder:\n\n    $ sfdx org open --source-path \\\n      force-app/main/default/flexipages/Hello.flexipage-meta.xml\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_262.txt"}}],["d2753d4e-73b4-4fdc-b9f1-89c3fc7f215d",{"pageContent":"\n\nCheck the status of a sandbox creation, and log in to it if it's ready.\n\nUSAGE\n  $ sfdx org resume sandbox [--json] [-w <value>] [-n <value> | -i <value>] [-l]\n    [-o <value>]\n\nFLAGS\n  -i, --job-id=<value>      Job ID of the incomplete sandbox creation that you\n                            want to check the status of.\n  -l, --use-most-recent     Use the most recent sandbox create request.\n  -n, --name=<value>        Name of the sandbox org.\n  -o, --target-org=<value>  Username or alias of the production org that\n                            contains the sandbox license.\n  -w, --wait=<minutes>      Number of minutes to wait for the sandbox org to be\n                            ready.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Check the status of a sandbox creation, and log in to it if it's ready.\n\n  Sandbox creation can take a long time. If the original \"sfdx org create\n  sandbox\" command either times out, or you specified the --async flag, the\n  command displays a job ID. Use this job ID to check whether the sandbox\n  creation is complete, and if it is, the command then logs into it.\n\n  You can also use the sandbox name to check the status or the --use-most-recent\n  flag to use the job ID of the most recent sandbox creation.\n\nALIASES\n  $ sfdx env resume sandbox\n\nEXAMPLES\n  Check the status of a sandbox creation using its name and specify a\n  production org with alias \"prodOrg\":\n\n    $ sfdx org resume sandbox --name mysandbox --target-org prodOrg\n\n  Check the status using the job ID:\n\n    $ sfdx org resume sandbox --job-id 0GRxxxxxxxx\n\n  Check the status of the most recent sandbox create request:\n\n    $ sfdx org resume sandbox --use-most-recent\n\nFLAG DESCRIPTIONS\n  -i, --job-id=<value>\n\n    Job ID of the incomplete sandbox creation that you want to check the status\n    of.\n\n    The job ID is valid for 24 hours after you start the sandbox creation.\n\n  -o, --target-org=<value>\n\n    Username or alias of the production org that contains the sandbox license.\n\n    When it creates the sandbox org, Salesforce copies the metadata, and\n    optionally data, from your production org to the new sandbox org.\n\n  -w, --wait=<minutes>\n\n    Number of minutes to wait for the sandbox org to be ready.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you and returns the job ID. To resume\n    checking the sandbox creation, rerun this command\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_263.txt"}}],["3d62b4a3-11fe-4a8f-8344-2737bce668b2",{"pageContent":"\n\nResume the creation of an incomplete scratch org.\n\nUSAGE\n  $ sfdx org resume scratch [--json] [-i <value>] [-r]\n\nFLAGS\n  -i, --job-id=<value>   Job ID of the incomplete scratch org create that you\n                         want to resume.\n  -r, --use-most-recent  Use the job ID of the most recent incomplete scratch\n                         org.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Resume the creation of an incomplete scratch org.\n\n  When the original \"sfdx org create scratch\" command either times out or is run\n  with the --async flag, it displays a job ID.\n\n  Run this command by either passing it a job ID or using the --use-most-recent\n  flag to specify the most recent incomplete scratch org.\n\nALIASES\n  $ sfdx env resume scratch\n\nEXAMPLES\n  Resume a scratch org create with a job ID:\n\n    $ sfdx org resume scratch --job-id 2SR3u0000008fBDGAY\n\n  Resume your most recent incomplete scratch org:\n\n    $ sfdx org resume scratch --use-most-recent\n\nFLAG DESCRIPTIONS\n  -i, --job-id=<value>\n\n    Job ID of the incomplete scratch org create that you want to resume.\n\n    The job ID is the same as the record ID of the incomplete scratch org in the\n    ScratchOrgInfo object of the Dev Hub.\n\n    The job ID is valid for 24 hours after you start the scratch org creation\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_264.txt"}}],["73386acb-228f-48c9-a2f9-bb14d4321aa9",{"pageContent":"\n\nCreate a first-generation package version in the release org.\n\nUSAGE\n  $ sfdx package1 version create -o <value> -i <value> -n <value> [--json]\n    [--api-version <value>] [-d <value>] [-v <value>] [-m] [-r <value>] [-p\n    <value>] [-k <value>] [-w <value>]\n\nFLAGS\n  -d, --description=<value>        Package version description.\n  -i, --package-id=<value>         (required) ID of the metadata package (starts\n                                   with 033) of which you’re creating a new\n                                   version.\n  -k, --installation-key=<value>   Installation key for key-protected package\n                                   (default: null).\n  -m, --managed-released           Create a managed package version.\n  -n, --name=<value>               (required) Package version name.\n  -o, --target-org=<value>         (required) Username or alias of the target\n                                   org.\n  -p, --post-install-url=<value>   Post install URL.\n  -r, --release-notes-url=<value>  Release notes URL.\n  -v, --version=<value>            Package version in major.minor format, for\n                                   example, 3.2.\n  -w, --wait=<value>               Minutes to wait for the package version to be\n                                   created (default: 2 minutes).\n  --api-version=<value>            Override the api version used for api\n                                   requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a first-generation package version in the release org.\n\n  The package version is based on the contents of the specified metadata\n  package. Omit --managed-released if you want to create an unmanaged package\n  version.\n\nALIASES\n  $ sfdx force package1 beta version create\n  $ sfdx force package1 version create\n\nEXAMPLES\n  Create a first-generation package version from the package with the\n  specified ID and name the package version \"example\"; use your default org:\n\n    $ sfdx package1 version create --package-id 033... --name example\n\n  Same as previous example, but provide a description and wait for 30 minutes\n  for the package version to be created; use the specified org:\n\n    $ sfdx package1 version create --package-id 033... --name example \\\n      --description \"example description\" --wait 30 --target-org \\\n      myorg@example.com\n\nFLAG DESCRIPTIONS\n  -m, --managed-released  Create a managed package version.\n\n    To create a beta version, don’t include this parameter.\n\n  -p, --post-install-url=<value>  Post install URL.\n\n    The contents of the post-installation instructions URL are displayed in the\n    UI after installation of the package version.\n\n  -r, --release-notes-url=<value>  Release notes URL.\n\n    This link is displayed in the package installation UI to provide release\n    notes for this package version to subscribers.\n\nCOMMANDS\n  package1 version create get  Retrieve the status of a package version creation\n                               request\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_265.txt"}}],["9c2ee7bb-7cc9-48f1-81a8-5c497b3bc74f",{"pageContent":"\n\nRetrieve the status of a package version creation request.\n\nUSAGE\n  $ sfdx package1 version create get -o <value> -i <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -i, --request-id=<value>  (required) ID of the PackageUploadRequest (starts\n                            with 0HD).\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package1 beta version create get\n  $ sfdx force package1 version create get\n\nEXAMPLES\n  Get the status of the creation request for the package version with the\n  specified ID in your default org:\n\n    $ sfdx package1 version create get --request-id 0HD...\n\n  Same as previous example, but use the specified org:\n\n    $ sfdx package1 version create get --request-id 0HD... --target-org \\\n      myorg@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_266.txt"}}],["eac3e96f-1d6e-4502-891f-dc59a9fd2a9f",{"pageContent":"\n\nDisplay details about a first-generation package version.\n\nUSAGE\n  $ sfdx package1 version display -o <value> -i <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -i, --package-version-id=<value>  (required) ID (starts with 04t) of the\n                                    metadata package version whose details you\n                                    want to display.\n  -o, --target-org=<value>          (required) Username or alias of the target\n                                    org.\n  --api-version=<value>             Override the api version used for api\n                                    requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package1 beta version display\n  $ sfdx force package1 version display\n\nEXAMPLES\n  Display details about the first-generation package version with the\n  specified ID in your default org:\n\n    $ sfdx package1 version display --package-version-id 04t...\n\n  Same as previous example, but use the specified org:\n\n    $ sfdx package1 version display --package-version-id 04t... --target-org \\\n      myorg@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_267.txt"}}],["ab54bb07-cdf7-4957-8665-5636a9c13682",{"pageContent":"\n\nList package versions for the specified first-generation package or for the org.\n\nUSAGE\n  $ sfdx package1 version list -o <value> [--json] [--api-version <value>] [-i\n    <value>]\n\nFLAGS\n  -i, --package-id=<value>  Metadata package ID (starts with 033) whose package\n                            versions you want to list.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package1 beta version list\n  $ sfdx force package1 version list\n\nEXAMPLES\n  List all first-generation package versions in your default org:\n\n    $ sfdx package1 version list\n\n  List package versions for the specified first-generation package in the\n  specifief org:\n\n    $ sfdx package1 version list --package-id 033... --target-org \\\n      myorg@example.com\n\nFLAG DESCRIPTIONS\n  -i, --package-id=<value>\n\n    Metadata package ID (starts with 033) whose package versions you want to\n    list.\n\n    If not specified, shows all versions for all packages (managed and\n    unmanaged) in the org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_268.txt"}}],["66b38368-4c96-47b0-a5e8-83643542de8a",{"pageContent":"\n\nCreate a package.\n\nUSAGE\n  $ sfdx package create -v <value> -n <value> -t Managed|Unlocked -r <value>\n    [--json] [--api-version <value>] [-d <value>] [-e] [--org-dependent] [-o\n    <value>]\n\nFLAGS\n  -d, --description=<value>                  Description of the package.\n  -e, --no-namespace                         Create the package with no\n                                             namespace; available only for\n                                             unlocked packages.\n  -n, --name=<value>                         (required) Name of the package to\n                                             create.\n  -o, --error-notification-username=<value>  Active Dev Hub user designated to\n                                             receive email notifications for\n                                             package errors.\n  -r, --path=<value>                         (required) Path to directory that\n                                             contains the contents of the\n                                             package.\n  -t, --package-type=<option>                (required) Type of package.\n                                             <options: Managed|Unlocked>\n  -v, --target-dev-hub=<value>               (required) Username or alias of the\n                                             Dev Hub org.\n  --api-version=<value>                      Override the api version used for\n                                             api requests made by this command\n  --org-dependent                            Depends on unpackaged metadata in\n                                             the installation org; applies to\n                                             unlocked packages only.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a package.\n\n  First, use this command to create a package. Then create a package version.\n\n  If you don’t have a namespace defined in your sfdx-project.json file, use\n  --no-namespace.\n\n  Your --name value must be unique within your namespace.\n\n  Run 'sfdx package list to list all packages in the Dev Hub org.\n\nALIASES\n  $ sfdx force package beta create\n  $ sfdx force package create\n\nEXAMPLES\n  Create an unlocked package from the files in the \"force-app\" directory; uses\n  your default Dev Hub org:\n\n    $ sfdx package create --name MyUnlockedPackage --package-type Unlocked \\\n      --path force-app\n\n  Create a managed packaged from the \"force-app\" directory files, give the\n  package a description, and use the specified Dev Hub org:\n\n    $ sfdx package create --name MyManagedPackage --description \"Your \\\n      Package Descripton\" --package-type Managed --path force-app \\\n      --target-dev-hub devhub@example.com\n\nFLAG DESCRIPTIONS\n  -e, --no-namespace\n\n    Create the package with no namespace; available only for unlocked packages.\n\n    This flag is useful when you’re migrating an existing org to packages. But\n    use a namespaced package for new metadata.\n\n  -o, --error-notification-username=<value>\n\n    Active Dev Hub user designated to receive email notifications for package\n    errors.\n\n    Email notifications include information about unhandled Apex exceptions, and\n    install, upgrade, or uninstall failures associated with your package.\n\n  -t, --package-type=Managed|Unlocked  Type of package.\n\n    The options for package type are Managed and Unlocked\n    (Managed=DeveloperManagedSubscriberManaged,\n    Unlocked=DeveloperControlledSubscriberEditable). These options determine\n    upgrade and editability rules.\n\n  --org-dependent\n\n    Depends on unpackaged metadata in the installation org; applies to unlocked\n    packages only.\n\n    Use Source Tracking in Sandboxes to develop your org-dependent unlocked\n    package. For more information, see \"Create Org-Dependent Unlocked Packages\"\n    in the Salesforce DX Developer Guide\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_269.txt"}}],["a428cfdf-9ae0-44ca-a199-8c824b54a3c7",{"pageContent":"\n\nGenerate new custom metadata type records from a CSV file.\n\nUSAGE\n  $ sfdx cmdt generate records -f <value> -t <value> [--json] [-i <value>] [-d\n    <value>] [-n <value>]\n\nFLAGS\n  -d, --output-directory=<value>  [default:\n                                  force-app/main/default/customMetadata]\n                                  Directory to store newly-created custom\n                                  metadata record files.\n  -f, --csv=<value>               (required) Pathname of the CSV file.\n  -i, --input-directory=<value>   [default: force-app/main/default/objects]\n                                  Directory from which to get the custom\n                                  metadata type definition from.\n  -n, --name-column=<value>       [default: Name] Column used to determine the\n                                  name of the record.\n  -t, --type-name=<value>         (required) API name of the custom metadata\n                                  type to create a record for.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate new custom metadata type records from a CSV file.\n\n  The custom metadata type must already exist in your project. By default, the\n  Name column is used to determine the record name; use the --name-column flag\n  to specify a different column.\n\nALIASES\n  $ sfdx force cmdt record insert\n  $ sfdx cmdt record insert\n\nEXAMPLES\n  Generate record metadata files from values in a CSV file for the custom\n  metadata type MyCmdt. Use 'Name' as the column that specifies the record\n  name:\n\n    $ sfdx cmdt generate records --csv path/to/my.csv --type-name MyCmdt\n\n  Generate record metadata files from a CSV file in the directory different\n  from the default, and use 'PrimaryKey' as the column that specifies the\n  record name:\n\n    $ sfdx cmdt generate records --csv path/to/my.csv --type-name MyCmdt \\\n      --input-directory path/to/my/cmdt/directory --name-column \"PrimaryKey\"\n\nFLAG DESCRIPTIONS\n  -t, --type-name=<value>\n\n    API name of the custom metadata type to create a record for.\n\n    The '__mdt' suffix is appended to the end of the name if it's omitted\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_27.txt"}}],["6de9af10-142a-42de-8000-c8c7fe29575e",{"pageContent":"\n\nDelete a package.\n\nUSAGE\n  $ sfdx package delete -v <value> -p <value> [--json] [--api-version\n    <value>] [-n]\n\nFLAGS\n  -n, --no-prompt               Don’t prompt before deleting the package.\n  -p, --package=<value>         (required) ID (starts with 0Ho) or alias of the\n                                package to delete.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete a package.\n\n  Specify the ID or alias of the package you want to delete.\n\n  Delete unlocked and second-generation managed packages. Before you delete a\n  package, first delete all associated package versions.\n\nALIASES\n  $ sfdx force package beta delete\n  $ sfdx force package delete\n\nEXAMPLES\n  Delete a package using its alias from your default Dev Hub org:\n\n    $ sfdx package delete --package \"Your Package Alias\"\n\n  Delete a package using its ID from the specified Dev Hub org:\n\n    $ sfdx package delete --package 0Ho... --target-dev-hub \\\n      devhub@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_270.txt"}}],["5c5f9558-12d6-4b38-87cf-319f2eb5cf90",{"pageContent":"\n\nInstall a version of a package in the target org.\n\nUSAGE\n  $ sfdx package install -o <value> -p <value> [--json] [--api-version\n    <value>] [-w <value>] [-k <value>] [-b <value>] [-r] [-a all|package] [-s\n    AllUsers|AdminsOnly] [-t DeprecateOnly|Mixed|Delete]\n\nFLAGS\n  -a, --apex-compile=<option>\n      [default: all] Compile all Apex in the org and package, or only Apex in the\n      package; unlocked packages only.\n      <options: all|package>\n\n  -b, --publish-wait=<value>\n      [default: 0 minutes] Maximum number of minutes to wait for the Subscriber\n      Package Version ID to become available in the target org before canceling\n      the install request.\n\n  -k, --installation-key=<value>\n      Installation key for key-protected package (default: null).\n\n  -o, --target-org=<value>\n      (required) Username or alias of the target org.\n\n  -p, --package=<value>\n      (required) ID (starts with 04t) or alias of the package version to install.\n\n  -r, --no-prompt\n      Don't prompt for confirmation.\n\n  -s, --security-type=<option>\n      [default: AdminsOnly] Security access type for the installed package.\n      (deprecation notice: The default --security-type value will change from\n      AllUsers to AdminsOnly in v47.0 or later.)\n      <options: AllUsers|AdminsOnly>\n\n  -t, --upgrade-type=<option>\n      [default: Mixed] Upgrade type for the package installation; available only\n      for unlocked packages.\n      <options: DeprecateOnly|Mixed|Delete>\n\n  -w, --wait=<value>\n      [default: 0 minutes] Number of minutes to wait for installation status.\n\n  --api-version=<value>\n      Override the api version used for api requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Install a version of a package in the target org.\n\n  To install a package, specify a specific version of the package using the 04t\n  package ID. The package and the version you specified installs in your default\n  target org unless you supply the username for a different target org.\n\n  For package upgrades, to specify options for component deprecation or deletion\n  of removed components, include an --upgrade-type value. To delete components\n  that can be safely deleted and deprecate the others, specify --upgrade-type\n  Mixed (the default). To deprecate all removed components, specify\n  --upgrade-type DeprecateOnly. To delete all removed components, except for\n  custom objects and custom fields, that don't have dependencies, specify\n  --upgrade-type Delete. (Note: This option can result in the loss of data that\n  is associated with the deleted components.) The default is Mixed.\n\nALIASES\n  $ sfdx force package beta install\n  $ sfdx force package install\n\nEXAMPLES\n  Install a package version with the specified ID in the org with username\n  \"me@example.com\":\n\n    $ sfdx package install --package 04t... --target-org me@example.com\n\n  Install a package version with the specified alias into your default org:\n\n    $ sfdx package install --package awesome_package_alias\n\n  Install a package version with an alias that includes spaces into your\n  default org:\n\n    $ sfdx package install --package \"Awesome Package Alias\"\n\n  Install an unlocked package version with the specified ID and deprecate all\n  removed components:\n\n    $ sfdx package install --package 04t... --upgrade-type DeprecateOnly\n\nFLAG DESCRIPTIONS\n  -a, --apex-compile=all|package\n\n    Compile all Apex in the org and package, or only Apex in the package;\n    unlocked packages only.\n\n    Applies to unlocked packages only. Specifies whether to compile all Apex in\n    the org and package, or only the Apex in the package.\n\n    For package installs into production orgs, or any org that has Apex Compile\n    on Deploy enabled, the platform compiles all Apex in the org after the\n    package install or upgrade operation completes.\n\n    This approach assures that package installs and upgrades don’t impact the\n    performance of an org, and is done even if --apex-compile package is\n    specified.\n\n  -r, --no-prompt  Don't prompt for confirmation.\n\n    Allows the following without an explicit confirmation response: 1) Remote\n    Site Settings and Content Security Policy websites to send or receive data,\n    and 2) --upgrade-type Delete to proceed.\n\n  -t, --upgrade-type=DeprecateOnly|Mixed|Delete\n\n    Upgrade type for the package installation; available only for unlocked\n    packages.\n\n    For package upgrades, specifies whether to mark all removed components as\n    deprecated (DeprecateOnly), to delete removed components that can be safely\n    deleted and deprecate the others (Mixed), or to delete all removed\n    components, except for custom objects and custom fields, that don't have\n    dependencies (Delete). The default is Mixed. Can specify DeprecateOnly or\n    Delete only for unlocked package upgrades.\n\nCOMMANDS\n  package install report  Retrieve the status of a package installation request\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_271.txt"}}],["7b801f74-b459-4528-9c36-67bff5b5c874",{"pageContent":"\n\nRetrieve the status of a package installation request.\n\nUSAGE\n  $ sfdx package install report -o <value> -i <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -i, --request-id=<value>  (required) ID of the package install request you\n                            want to check; starts with 0Hf.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package beta install report\n  $ sfdx force package install report\n\nEXAMPLES\n  Retrieve the status of a package installation request with the specified ID\n  on your default org:\n\n    $ sfdx package install report --request-id 0Hf...\n\n  Similar to previous example, except use the org with username\n  me@example.com:\n\n    $ sfdx package install report --request-id 0Hf... --target-org \\\n      me@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_272.txt"}}],["7900c565-3443-4650-aa13-c5f226da7dde",{"pageContent":"\n\nList the org’s installed packages.\n\nUSAGE\n  $ sfdx package installed list -o <value> [--json] [--api-version <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package beta installed list\n  $ sfdx force package installed list\n\nEXAMPLES\n  List the installed packages in your default org:\n\n    $ sfdx package installed list\n\n  List the installed packages in the org with username me@example.com:\n\n    $ sfdx package installed list --target-org me@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_273.txt"}}],["7106d7b5-0ab4-49b7-b079-89f0424f2c71",{"pageContent":"\n\nList all packages in the Dev Hub org.\n\nUSAGE\n  $ sfdx package list -v <value> [--json] [--api-version <value>]\n    [--verbose]\n\nFLAGS\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n  --verbose                     Display extended package detail.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List all packages in the Dev Hub org.\n\n  Description\n\nALIASES\n  $ sfdx force package beta list\n  $ sfdx force package list\n\nEXAMPLES\n  List all packages in the specified Dev Hub org:\n\n    $ sfdx package list --target-dev-hub devhub@example.com\n\n  List all packages details in the specified Dev Hub org, and show extended\n  details about each package:\n\n    $ sfdx package list --target-dev-hub devhub@example.com --verbose\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_274.txt"}}],["94e692c7-ac4f-4da7-96b3-711f26d87f0a",{"pageContent":"\n\nUninstall a second-generation package from the target org.\n\nUSAGE\n  $ sfdx package uninstall -o <value> -p <value> [--json] [--api-version\n    <value>] [-w <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -p, --package=<value>     (required) ID (starts with 04t) or alias of the\n                            package version to uninstall.\n  -w, --wait=<value>        [default: 0 minutes] Number of minutes to wait for\n                            uninstall status.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Uninstall a second-generation package from the target org.\n\n  Specify the package ID for a second-generation package.\n\n  To list the org’s installed packages, run \"sfdx package installed list\".\n\n  To uninstall a first-generation package, from Setup, enter Installed Packages\n  in the Quick Find box, then select Installed Packages.\n\nALIASES\n  $ sfdx force package beta uninstall\n  $ sfdx force package uninstall\n\nEXAMPLES\n  Uninstall a package with specified ID from an org with username\n  me@example.com:\n\n    $ sfdx package uninstall --package 04t... --target-org me@example.com\n\n  Uninstall a package with the specified alias from your default org:\n\n    $ sfdx package uninstall --package undesirable_package_alias\n\n  Uninstall a package with an alias that contains spaces from your default\n  org:\n\n    $ sfdx package uninstall --package \"Undesirable Package Alias\"\n\nCOMMANDS\n  package uninstall report  Retrieve the status of a package uninstall request\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_275.txt"}}],["4850b085-35c4-4780-a1c0-9d587ba1f1d4",{"pageContent":"\n\nRetrieve the status of a package uninstall request.\n\nUSAGE\n  $ sfdx package uninstall report -o <value> -i <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -i, --request-id=<value>  (required) ID of the package uninstall request you\n                            want to check; starts with 06y.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package beta uninstall report\n  $ sfdx force package uninstall report\n\nEXAMPLES\n  Retrieve the status of a package uninstall in your default org using the\n  specified request ID:\n\n    $ sfdx package uninstall report --request-id 06y...\n\n  Similar to previous example, but use the org with username me@example.com:\n\n    $ sfdx package uninstall report --request-id 06y... --target-org \\\n      me@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_276.txt"}}],["0fdf3679-130b-406a-a33d-e2514d4431a5",{"pageContent":"\n\nUpdate package details.\n\nUSAGE\n  $ sfdx package update -v <value> -p <value> [--json] [--api-version\n    <value>] [-n <value>] [-d <value>] [-o <value>]\n\nFLAGS\n  -d, --description=<value>                  New description of the package.\n  -n, --name=<value>                         New name of the package.\n  -o, --error-notification-username=<value>  Active Dev Hub user designated to\n                                             receive email notifications for\n                                             package errors.\n  -p, --package=<value>                      (required) ID (starts with 0Ho) or\n                                             alias of the package to update.\n  -v, --target-dev-hub=<value>               (required) Username or alias of the\n                                             Dev Hub org.\n  --api-version=<value>                      Override the api version used for\n                                             api requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Update package details.\n\n  Specify a new value for each option you want to update.\n\n  Run \"sfdx package list\" to list all packages in the Dev Hub org.\n\nALIASES\n  $ sfdx force package beta update\n  $ sfdx force package update\n\nEXAMPLES\n  Update the name of the package with the specified alias; uses your default\n  Dev Hub org:\n\n    $ sfdx package update --package \"Your Package Alias\" --name \"New Package \\\n      Name\"\n\n  Update the description of the package with the specified ID; uses the\n  specified Dev Hub org:\n\n    $ sfdx package update --package 0Ho... --description \"New Package \\\n      Description\" --target-dev-hub devhub@example.com\n\nFLAG DESCRIPTIONS\n  -o, --error-notification-username=<value>\n\n    Active Dev Hub user designated to receive email notifications for package\n    errors.\n\n    Email notifications include information about unhandled Apex exceptions, and\n    install, upgrade, or uninstall failures associated with your package\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_277.txt"}}],["c927766e-7f5e-48e4-b9b6-d1ca2144db5f",{"pageContent":"\n\nCreate a package version in the Dev Hub org.\n\nUSAGE\n  $ sfdx package version create -v <value> [--json] [--api-version <value>] [-b\n    <value>] [-c | --skip-validation] [-f <value>] [-k <value>] [-x] [-p\n    <value>] [-d <value>] [--post-install-script <value>] [--post-install-url\n    <value>] [--releasenotes-url <value>] [--skip-ancestor-check] [-t <value>]\n    [--uninstall-script <value>] [-e <value>] [-a <value>] [-n <value>] [-w\n    <value>] [--language <value>] [--verbose]\n\nFLAGS\n  -a, --version-name=<value>         Name of the package version to be created;\n                                     overrides the sfdx-project.json value.\n  -b, --branch=<value>               Name of the branch in your source control\n                                     system that the package version is based\n                                     on.\n  -c, --code-coverage                Calculate and store the code coverage\n                                     percentage by running the packaged Apex\n                                     tests included in this package version.\n  -d, --path=<value>                 Path to the directory that contains the\n                                     contents of the package.\n  -e, --version-description=<value>  Description of the package version to be\n                                     created; overrides the sfdx-project.json\n                                     value.\n  -f, --definition-file=<value>      Path to a definition file similar to\n                                     scratch org definition file that contains\n                                     the list of features and org preferences\n                                     that the metadata of the package version\n                                     depends on.\n  -k, --installation-key=<value>     Installation key for key-protected package.\n                                     (either --installation-key or\n                                     --installation-key-bypass is required)\n  -n, --version-number=<value>       Version number of the package version to be\n                                     created; overrides the sfdx-project.json\n                                     value.\n  -p, --package=<value>              ID (starts with 0Ho) or alias of the\n                                     package to create a version of.\n  -t, --tag=<value>                  Package version’s tag.\n  -v, --target-dev-hub=<value>       (required) Username or alias of the Dev Hub\n                                     org.\n  -w, --wait=<value>                 [default: 0 minutes] Number of minutes to\n                                     wait for the package version to be created.\n  -x, --installation-key-bypass      Bypass the installation key requirement.\n                                     (either --installation-key or\n                                     --installation-key-bypass is required)\n  --api-version=<value>              Override the api version used for api\n                                     requests made by this command\n  --language=<value>                 Language for the package.\n  --post-install-script=<value>      Name of the post-install script; applies to\n                                     managed packages only.\n  --post-install-url=<value>         Post-install instructions URL.\n  --releasenotes-url=<value>         Release notes URL.\n  --skip-ancestor-check              Overrides ancestry requirements, which\n                                     allows you to specify a package ancestor\n                                     that isn’t the highest released package\n                                     version.\n  --skip-validation                  Skip validation during package version\n                                     creation; you can’t promote unvalidated\n                                     package versions.\n  --uninstall-script=<value>         Uninstall script name; applies to managed\n                                     packages only.\n  --verbose                          Display verbose command output.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a package version in the Dev Hub org.\n\n  The package version is based on the package contents in the specified\n  directory.\n\n  To retrieve details about a package version create request, including status\n  and package version ID (04t), run \"sfdx package version create report -i\n  08c...\".\n\n  We recommend that you specify the --installation-key parameter to protect the\n  contents of your package and to prevent unauthorized installation of your\n  package.\n\n  To list package version creation requests in the org, run \"sfdx package\n  version create list\".\n  To promote a package version to released, you must use the --code-coverage\n  parameter. The package must also meet the code coverage requirements. This\n  requirement applies to both managed and unlocked packages.\n\n  We don’t calculate code coverage for org-dependent unlocked packages, or for\n  package versions that specify --skip-validation.\n\nALIASES\n  $ sfdx force package beta version create\n  $ sfdx force package version create\n\nEXAMPLES\n  Create a package version from the contents of the \"common\" directory and\n  give it an installation key of \"password123\"; uses your default Dev Hub org:\n\n    $ sfdx package version create --path common --installation-key \\\n      password123\n\n  Create a package version from a package with the specified alias; uses the\n  Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version create --package \"Your Package Alias\" \\\n      --installation-key password123 --target-dev-hub devhub@example.com\n\n  Create a package version from a package with the specified ID:\n\n    $ sfdx package version create --package 0Ho... --installation-key \\\n      password123\n\n  Create a package version and skip the validation step:\n\n    $ sfdx package version create --path common --installation-key \\\n      password123 --skip-validation\n\nFLAG DESCRIPTIONS\n  -c, --code-coverage\n\n    Calculate and store the code coverage percentage by running the packaged\n    Apex tests included in this package version.\n\n    Before you can promote and release a managed or unlocked package version,\n    the Apex code must meet a minimum 75% code coverage requirement. We don’t\n    calculate code coverage for org-dependent unlocked packages or for package\n    versions that specify --skip-validation.\n\n  -x, --installation-key-bypass\n\n    Bypass the installation key requirement. (either --installation-key or\n    --installation-key-bypass is required)\n\n    If you bypass this requirement, anyone can install your package.\n\n  --language=<value>  Language for the package.\n\n    Specify the language using a language code listed under \"Supported\n    Languages\" in Salesforce Help. If no language is specified, the language\n    defaults to the language of the Dev Hub user who created the package.\n\n  --post-install-script=<value>\n\n    Name of the post-install script; applies to managed packages only.\n\n    The post-install script is an Apex class within this package that is run in\n    the installing org after installations or upgrades of this package version.\n\n  --post-install-url=<value>  Post-install instructions URL.\n\n    The contents of the post-installation instructions URL are displayed in the\n    UI after installation of the package version.\n\n  --releasenotes-url=<value>  Release notes URL.\n\n    This link is displayed in the package installation UI to provide release\n    notes for this package version to subscribers.\n\n  --skip-validation\n\n    Skip validation during package version creation; you can’t promote\n    unvalidated package versions.\n\n    Skips validation of dependencies, package ancestors, and metadata during\n    package version creation. Skipping validation reduces the time it takes to\n    create a new package version, but you can promote only validated package\n    versions. Skipping validation can suppress important errors that can surface\n    at a later stage. You can specify skip validation or code coverage, but not\n    both. Code coverage is calculated during validation.\n\n  --uninstall-script=<value>\n\n    Uninstall script name; applies to managed packages only.\n\n    The uninstall script is an Apex class within this package that is run in the\n    installing org after uninstallations of this package.\n\n  --verbose  Display verbose command output.\n\n    Display verbose command output. When polling for the status of the creation,\n    this will output status and timeout data on a separate line for each poll\n    request, which is useful in CI systems where timeouts can occur with long\n    periods of no output from commands.\n\nCOMMANDS\n  package version create list    List package version creation requests.\n  package version create report  Retrieve details about a package version\n                                 creation request\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_278.txt"}}],["446f74e3-703b-4d3a-b9d3-4981c00dadc2",{"pageContent":"\n\nList package version creation requests.\n\nUSAGE\n  $ sfdx package version create list -v <value> [--json] [--api-version <value>] [-c\n    <value>] [-s Queued|InProgress|Success|Error]\n\nFLAGS\n  -c, --created-last-days=<value>  Number of days since the request was created,\n                                   starting at 00:00:00 of first day to now. Use\n                                   0 for today.\n  -s, --status=<option>            Status of the version creation request, used\n                                   to filter the list.\n                                   <options: Queued|InProgress|Success|Error>\n  -v, --target-dev-hub=<value>     (required) Username or alias of the Dev Hub\n                                   org.\n  --api-version=<value>            Override the api version used for api\n                                   requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List package version creation requests.\n\n  Shows the details of each request to create a package version in the Dev Hub\n  org.\n\n  All filter parameters are applied using the AND logical operator (not OR).\n\n  To get information about a specific request, run \"sfdx package version create\n  report\" and supply the request ID.\n\nALIASES\n  $ sfdx force package beta version create list\n  $ sfdx force package version create list\n\nEXAMPLES\n  List all package version creation requests in your default Dev Hub org:\n\n    $ sfdx package version create list\n\n  List package version creation requests from the last 3 days in the Dev Hub\n  org with username devhub@example.com:\n\n    $ sfdx package version create list --created-last-days 3 \\\n      --target-dev-hub\n\n  List package version creation requests with status Error:\n\n    $ sfdx package version create list --status Error\n\n  List package version creation requests with status InProgress:\n\n    $ sfdx package version create list --status InProgress\n\n  List package version creation requests with status Success that were created\n  today:\n\n    $ sfdx package version create list --created-last-days 0 --status \\\n      Success\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_279.txt"}}],["064efbc3-f26b-49b5-9863-8b501e62989f",{"pageContent":"\n\nGenerate a new record for a given custom metadata type in the current project.\n\nUSAGE\n  $ sfdx cmdt record create -t <value> -n <value> [--json] [-l <value>] [-p\n    true|false] [-i <value>] [-d <value>]\n\nFLAGS\n  -d, --output-directory=<value>  [default:\n                                  force-app/main/default/customMetadata]\n                                  Directory to store newly-created custom\n                                  metadata record files.\n  -i, --input-directory=<value>   [default: force-app/main/default/objects]\n                                  Directory from which to get the custom\n                                  metadata type definition from.\n  -l, --label=<value>             Label for the new record.\n  -n, --record-name=<value>       (required) Name of the new record.\n  -p, --protected=<option>        [default: false] Protect the record when it's\n                                  in a managed package.\n                                  <options: true|false>\n  -t, --type-name=<value>         (required) API name of the custom metadata\n                                  type to create a record for; must end in\n                                  \"__mdt\".\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a new record for a given custom metadata type in the current project.\n\n  The custom metadata type must already exist in your project. You must specify\n  a name for the new record. Use name=value pairs to specify the values for the\n  fields, such as MyTextField=\"some text here\" or MyNumberField=32.\n\nALIASES\n  $ sfdx force cmdt record create\n  $ sfdx cmdt record create\n\nEXAMPLES\n  Create a record metadata file for custom metadata type 'MyCMT' with\n  specified values for two custom fields:\n\n    $ sfdx cmdt record create --type-name MyCMT__mdt --record-name MyRecord \\\n      My_Custom_Field_1=Foo My_Custom_Field_2=Bar\n\n  Create a protected record metadata file for custom metadata type 'MyCMT'\n  with a specific label and values specified for two custom fields:\n\n    $ sfdx cmdt record create --type-name MyCMT__mdt --record-name MyRecord \\\n      --label \"My Record\" --protected true My_Custom_Field_1=Foo \\\n      My_Custom_Field_2=Bar\n\nFLAG DESCRIPTIONS\n  -p, --protected=true|false  Protect the record when it's in a managed package.\n\n    Protected records can only be accessed by code in the same managed package\n    namespace\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_28.txt"}}],["531b3f56-7eac-4d60-a5a7-9199fd03d00b",{"pageContent":"\n\nRetrieve details about a package version creation request.\n\nUSAGE\n  $ sfdx package version create report -v <value> -i <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -i, --package-create-request-id=<value>  (required) ID (starts with 08c) of\n                                           the package version creation request\n                                           you want to display.\n  -v, --target-dev-hub=<value>             (required) Username or alias of the\n                                           Dev Hub org.\n  --api-version=<value>                    Override the api version used for api\n                                           requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Retrieve details about a package version creation request.\n\n  Specify the request ID for which you want to view details. If applicable, the\n  command displays errors related to the request.\n\n  To show all requests in the org, run \"sfdx package version create list\".\n\nALIASES\n  $ sfdx force package beta version create report\n  $ sfdx force package version create report\n\nEXAMPLES\n  Retrieve details about the package version creation request with the\n  specified ID; uses your default Dev Hub org:\n\n    $ sfdx package version create report --package-create-request-id 08c...\n\n  Retrieve details about the specified package version creation request in the\n  Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version create report --package-create-request-id 08c... \\\n      --target-dev-hub devhub@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_280.txt"}}],["44385e6b-139b-471a-b178-9d2901c95dff",{"pageContent":"\n\nDelete a package version.\n\nUSAGE\n  $ sfdx package version delete -v <value> -p <value> [--json] [--api-version\n    <value>] [-n]\n\nFLAGS\n  -n, --no-prompt               Don’t prompt before deleting the package\n                                version.\n  -p, --package=<value>         (required) ID (starts with 04t) or alias of the\n                                package version to delete.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete a package version.\n\n  Specify the ID or alias of the package version you want to delete.\n\nALIASES\n  $ sfdx force package beta version delete\n  $ sfdx force package version delete\n\nEXAMPLES\n  Delete a package version with the specified alias using your default Dev Hub\n  org:\n\n    $ sfdx package version delete --package \"Your Package Alias\"\n\n  Delete a package version with the specified ID using the Dev Hub org with\n  username \"devhub@example.com\":\n\n    $ sfdx package version delete --package 04t... --target-org \\\n      devhub@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_281.txt"}}],["82c82dee-35a4-42d1-a672-dc2b24757352",{"pageContent":"\n\nDisplay the ancestry tree for a 2GP managed package version.\n\nUSAGE\n  $ sfdx package version displayancestry -v <value> -p <value> [--json] [--api-version\n    <value>] [--dot-code] [--verbose]\n\nFLAGS\n  -p, --package=<value>         (required) ID or alias of the package (starts\n                                with 0Ho) or package version (starts with 04t)\n                                to display ancestry for.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n  --dot-code                    Display the ancestry tree in DOT code.\n  --verbose                     Display both the package version ID (starts with\n                                04t) and the version number\n                                (major.minor.patch.build) in the ancestry tree.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sfdx force package beta version displayancestry\n  $ sfdx force package version displayancestry\n\nEXAMPLES\n  Display the ancestry tree for a package version with the specified alias,\n  using your default Dev Hub org:\n\n    $ sfdx package version displayancestry --package package_version_alias\n\n  Similar to previous example, but display the output in DOT code:\n\n    $ sfdx package version displayancestry --package package_version_alias \\\n      --dot-code\n\n  Display the ancestry tree for a package with the specified ID, using the Dev\n  Hub org with username devhub@example.com:\n\n    $ sfdx package version displayancestry --package OHo... --target-dev-hub \\\n      devhub@example.com\n\n  Display the ancestry tree of a package version with the specified ID, using\n  your default Dev Hub org:\n\n    $ sfdx package version displayancestry --package 04t...\n\nFLAG DESCRIPTIONS\n  -p, --package=<value>\n\n    ID or alias of the package (starts with 0Ho) or package version (starts with\n    04t) to display ancestry for.\n\n    If you specify a package ID (starts with 0Ho) or alias, the ancestor tree\n    for every package version associated with the package ID is displayed. If\n    you specify a package version (starts with 04t) or alias, the ancestry tree\n    of the specified package version is displayed.\n\n  --dot-code  Display the ancestry tree in DOT code.\n\n    You can use the DOT code output in graph visualization software to create\n    tree visualizations\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_282.txt"}}],["510c602a-e435-4bd7-8827-3362b5a3fef3",{"pageContent":"\n\nList all package versions in the Dev Hub org.\n\nUSAGE\n  $ sfdx package version list -v <value> [--json] [--api-version <value>] [-c\n    <value>] [--concise] [-m <value>] [-p <value>] [-r] [-o <value>] [--verbose]\n\nFLAGS\n  -c, --created-last-days=<value>   Number of days since the request was\n                                    created, starting at 00:00:00 of first day\n                                    to now. Use 0 for today.\n  -m, --modified-last-days=<value>  Number of days since the items were\n                                    modified, starting at 00:00:00 of first day\n                                    to now. Use 0 for today.\n  -o, --order-by=<value>            Package version fields used to order the\n                                    list.\n  -p, --packages=<value>            Comma-delimited list of packages (aliases or\n                                    0Ho IDs) to list.\n  -r, --released                    Display released versions only\n                                    (IsReleased=true).\n  -v, --target-dev-hub=<value>      (required) Username or alias of the Dev Hub\n                                    org.\n  --api-version=<value>             Override the api version used for api\n                                    requests made by this command\n  --concise                         Display limited package version details.\n  --verbose                         Display extended package version details.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List all package versions in the Dev Hub org.\n\n  Description\n\nALIASES\n  $ sfdx force package beta version list\n  $ sfdx force package version list\n\nEXAMPLES\n  List package versions in your default Dev Hub org that were created in the\n  last 3 days; show only the released versions and order the list using the\n  PatchVersion field. Display extended details about each package version:\n\n    $ sfdx package version list --verbose --created-last-days 3 --released \\\n      --order-by PatchVersion\n\n  List the released package versions for the two specified packages that were\n  modified today; use the Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version list --packages 0Ho000000000000,0Ho000000000001 \\\n      --released --modified-last-days 0 --target-dev-hub devhub@example.com\n\n  List all released package versions in your default Dev Hub org:\n\n    $ sfdx package version list --released\n\n  List package versions that were modified today in your default Dev Hub org;\n  show limited details about each one:\n\n    $ sfdx package version list --concise --modified-last-days 0\n\n  List released package versions that were created in the last 3 days in your\n  default Dev Hub org; show limited details:\n\n    $ sfdx package version list --concise --created-last-days 3 --released\n\n  List released package versions that were modified today for the two packages\n  with specified aliases in your default Dev Hub org:\n\n    $ sfdx package version list --packages exp-mgr,exp-mgr-util --released \\\n      --modified-last-days 0\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_283.txt"}}],["ba0b2f81-54d8-4b56-90be-ba526e4cfd77",{"pageContent":"\n\nPromote a package version to released.\n\nUSAGE\n  $ sfdx package version promote -v <value> -p <value> [--json] [--api-version\n    <value>] [-n]\n\nFLAGS\n  -n, --no-prompt               Don't prompt to confirm setting the package\n                                version as released.\n  -p, --package=<value>         (required) ID (starts with 04t) or alias of the\n                                package version to promote.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Promote a package version to released.\n\n  Supply the ID or alias of the package version you want to promote. Promotes\n  the package version to released status.\n\nALIASES\n  $ sfdx force package beta version promote\n  $ sfdx force package version promote\n\nEXAMPLES\n  Promote the package version with the specified ID to released; uses your\n  default Dev Hub org:\n\n    $ sfdx package version promote --package 04t...\n\n  Promote the package version with the specified alias to released; uses the\n  Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version promote --package awesome_package_alias \\\n      --target-dev-hub devhub@example.com\n\n  Promote the package version with an alias that has spaces to released:\n\n    $ sfdx package version promote --package \"Awesome Package Alias\"\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_284.txt"}}],["8679a084-edff-44e5-b5a1-012dcc636751",{"pageContent":"\n\nRetrieve details about a package version in the Dev Hub org.\n\nUSAGE\n  $ sfdx package version report -v <value> -p <value> [--json] [--api-version\n    <value>] [--verbose]\n\nFLAGS\n  -p, --package=<value>         (required) ID (starts with 04t) or alias of the\n                                package to retrieve details for.\n  -v, --target-dev-hub=<value>  (required) Username or alias of the Dev Hub org.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n  --verbose                     Display extended package version details.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Retrieve details about a package version in the Dev Hub org.\n\n  To update package version values, run \"sfdx package version update\".\n\nALIASES\n  $ sfdx force package beta version report\n  $ sfdx force package version report\n\nEXAMPLES\n  Retrieve details about the package version with the specified ID from your\n  default Dev Hub org:\n\n    $ sfdx package version report --package 04t...\n\n  Retrieve details about the package version with the specified alias (that\n  contains spaces) from the Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version report --package \"Your Package Alias\" \\\n      --target-dev-hub devhub@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_285.txt"}}],["5fb0a615-4fe8-4c54-a047-09ebf088a58f",{"pageContent":"\n\nUpdate a package version.\n\nUSAGE\n  $ sfdx package version update -v <value> -p <value> [--json] [--api-version\n    <value>] [-a <value>] [-e <value>] [-b <value>] [-t <value>] [-k <value>]\n\nFLAGS\n  -a, --version-name=<value>         New package version name.\n  -b, --branch=<value>               New package version branch.\n  -e, --version-description=<value>  New package version description.\n  -k, --installation-key=<value>     New installation key for key-protected\n                                     package (default: null)\n  -p, --package=<value>              (required) ID (starts with 04t) or alias of\n                                     the package to update a version of.\n  -t, --tag=<value>                  New package version tag.\n  -v, --target-dev-hub=<value>       (required) Username or alias of the Dev Hub\n                                     org.\n  --api-version=<value>              Override the api version used for api\n                                     requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Update a package version.\n\n  Specify a new value for each option you want to update.\n\n  To display details about a package version, run \"sfdx package version\n  display\".\n\nALIASES\n  $ sfdx force package beta version update\n  $ sfdx force package version update\n\nEXAMPLES\n  Update the package version that has the specified alias (that contains\n  spaces) with a new installation key \"password123\"; uses your default Dev Hub\n  org:\n\n    $ sfdx package version update --package \"Your Package Alias\" \\\n      --installation-key password123\n\n  Update the package version that has the specified ID with a new branch and\n  tag; use the Dev Hub org with username devhub@example.com:\n\n    $ sfdx package version update --package 04t... --branch main --tag \\\n      'Release 1.0.7' --target-dev-hub devhub@example.com\n\n  Update the package version that has the specified ID with a new description:\n\n    $ sfdx package version update --package 04t... --version-description \\\n      \"New Package Version Description\"\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_286.txt"}}],["866f59bb-2674-44bd-b500-76dd233ef509",{"pageContent":"\n\nList installed plugins.\n\nUSAGE\n  $ sfdx plugins [--core]\n\nFLAGS\n  --core  Show core plugins.\n\nDESCRIPTION\n  List installed plugins.\n\nEXAMPLES\n  $ sfdx plugins\n\nTOPICS\n  plugins trust  validate a digital signature for a npm package\n\nCOMMANDS\n  plugins inspect    Displays installation properties of a plugin.\n  plugins install    Installs a plugin into the CLI.\n  plugins link       Links a plugin into the CLI for development.\n  plugins uninstall  Removes a plugin from the CLI.\n  plugins update     Update installed plugins\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_287.txt"}}],["57b617f5-142a-41d9-9c19-6a4aa5c30fa0",{"pageContent":"\n\nInstalls a plugin into the CLI.\n\nUSAGE\n  $ sfdx plugins:install PLUGIN...\n\nARGUMENTS\n  PLUGIN  Plugin to install.\n\nFLAGS\n  -f, --force    Run yarn install with force flag.\n  -h, --help     Show CLI help.\n  -v, --verbose\n\nDESCRIPTION\n  Installs a plugin into the CLI.\n  Can be installed from npm or a git url.\n\n  Installation of a user-installed plugin will override a core plugin.\n\n  e.g. If you have a core plugin that has a 'hello' command, installing a\n  user-installed plugin with a 'hello' command will override the core plugin\n  implementation. This is useful if a user needs to update core plugin\n  functionality in the CLI without the need to patch and update the whole CLI\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_288.txt"}}],["fb2002f5-3c9e-4bd2-9af9-5577ef4f512d",{"pageContent":"\n\nALIASES\n  $ sfdx plugins add\n\nEXAMPLES\n  $ sfdx plugins:install myplugin \n\n  $ sfdx plugins:install https://github.com/someuser/someplugin\n\n  $ sfdx plugins:install someuser/someplugin\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_289.txt"}}],["b5f5fc02-d181-4986-856a-7c6b40ee7ab8",{"pageContent":"\n\nGenerate new custom metadata type records from a CSV file.\n\nUSAGE\n  $ sfdx cmdt record insert -f <value> -t <value> [--json] [-i <value>] [-d\n    <value>] [-n <value>]\n\nFLAGS\n  -d, --output-directory=<value>  [default:\n                                  force-app/main/default/customMetadata]\n                                  Directory to store newly-created custom\n                                  metadata record files.\n  -f, --csv=<value>               (required) Pathname of the CSV file.\n  -i, --input-directory=<value>   [default: force-app/main/default/objects]\n                                  Directory from which to get the custom\n                                  metadata type definition from.\n  -n, --name-column=<value>       [default: Name] Column used to determine the\n                                  name of the record.\n  -t, --type-name=<value>         (required) API name of the custom metadata\n                                  type to create a record for.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate new custom metadata type records from a CSV file.\n\n  The custom metadata type must already exist in your project. By default, the\n  Name column is used to determine the record name; use the --name-column flag\n  to specify a different column.\n\nALIASES\n  $ sfdx force cmdt record insert\n  $ sfdx cmdt record insert\n\nEXAMPLES\n  Generate record metadata files from values in a CSV file for the custom\n  metadata type MyCmdt. Use 'Name' as the column that specifies the record\n  name:\n\n    $ sfdx cmdt record insert --csv path/to/my.csv --type-name MyCmdt\n\n  Generate record metadata files from a CSV file in the directory different\n  from the default, and use 'PrimaryKey' as the column that specifies the\n  record name:\n\n    $ sfdx cmdt record insert --csv path/to/my.csv --type-name MyCmdt \\\n      --input-directory path/to/my/cmdt/directory --name-column \"PrimaryKey\"\n\nFLAG DESCRIPTIONS\n  -t, --type-name=<value>\n\n    API name of the custom metadata type to create a record for.\n\n    The '__mdt' suffix is appended to the end of the name if it's omitted\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_29.txt"}}],["63e81ccd-5bdf-4bb1-b896-ff958435ff0f",{"pageContent":"\n\nGenerate a new sf plugin.\n\nUSAGE\n  $ sfdx plugins generate\n\nDESCRIPTION\n  Generate a new sf plugin.\n\n  This command is interactive. You're prompted for information to populate your\n  new plugin, such as its name, description, author, and percentage of code\n  coverage you want. The command clones the 'salesforcecli/plugin-template-sf'\n  GitHub repository, installs the plug-in's npm package dependencies using yarn\n  install, and updates the package properties.\n\n  When the command completes, your new plugin contains the source, message, and\n  test files for a sample \"sf hello world\" command.\n\nALIASES\n  $ sfdx plugins generate\n\nEXAMPLES\n  $ sfdx plugins generate\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_290.txt"}}],["8b524f33-9be3-481f-a1d2-b40e14f02e9f",{"pageContent":"\n\nDisplays installation properties of a plugin.\n\nUSAGE\n  $ sfdx plugins:inspect PLUGIN...\n\nARGUMENTS\n  PLUGIN  [default: .] Plugin to inspect.\n\nFLAGS\n  -h, --help     Show CLI help.\n  -v, --verbose\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Displays installation properties of a plugin.\n\nEXAMPLES\n  $ sfdx plugins:inspect myplugin \n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_291.txt"}}],["93aceef9-16f5-41cf-94a0-efb5cae4ab26",{"pageContent":"\n\nInstalls a plugin into the CLI.\n\nUSAGE\n  $ sfdx plugins:install PLUGIN...\n\nARGUMENTS\n  PLUGIN  Plugin to install.\n\nFLAGS\n  -f, --force    Run yarn install with force flag.\n  -h, --help     Show CLI help.\n  -v, --verbose\n\nDESCRIPTION\n  Installs a plugin into the CLI.\n  Can be installed from npm or a git url.\n\n  Installation of a user-installed plugin will override a core plugin.\n\n  e.g. If you have a core plugin that has a 'hello' command, installing a\n  user-installed plugin with a 'hello' command will override the core plugin\n  implementation. This is useful if a user needs to update core plugin\n  functionality in the CLI without the need to patch and update the whole CLI\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_292.txt"}}],["1e4546bc-ad83-41ea-b5b5-343df3c77450",{"pageContent":"\n\nALIASES\n  $ sfdx plugins add\n\nEXAMPLES\n  $ sfdx plugins:install myplugin \n\n  $ sfdx plugins:install https://github.com/someuser/someplugin\n\n  $ sfdx plugins:install someuser/someplugin\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_293.txt"}}],["3326734b-412f-4643-8f66-946a75d5ede2",{"pageContent":"\n\nLinks a plugin into the CLI for development.\n\nUSAGE\n  $ sfdx plugins:link PLUGIN\n\nARGUMENTS\n  PATH  [default: .] path to plugin\n\nFLAGS\n  -h, --help     Show CLI help.\n  -v, --verbose\n\nDESCRIPTION\n  Links a plugin into the CLI for development.\n  Installation of a linked plugin will override a user-installed or core plugin.\n\n  e.g. If you have a user-installed or core plugin that has a 'hello' command,\n  installing a linked plugin with a 'hello' command will override the\n  user-installed or core plugin implementation. This is useful for development\n  work\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_294.txt"}}],["b68cda4d-1c29-4950-9b59-e2cc6435d973",{"pageContent":"\n\nEXAMPLES\n  $ sfdx plugins:link myplugin \n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_295.txt"}}],["f7bed00b-58ec-4d3e-a77b-fc1794277540",{"pageContent":"\n\nRemoves a plugin from the CLI.\n\nUSAGE\n  $ sfdx plugins:uninstall PLUGIN...\n\nARGUMENTS\n  PLUGIN  plugin to uninstall\n\nFLAGS\n  -h, --help     Show CLI help.\n  -v, --verbose\n\nDESCRIPTION\n  Removes a plugin from the CLI.\n\nALIASES\n  $ sfdx plugins unlink\n  $ sfdx plugins remove\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_296.txt"}}],["37e6b086-dbd8-4d1a-bb31-aa9580dc52f1",{"pageContent":"\n\nValidate a digital signature.\n\nUSAGE\n  $ sfdx plugins trust verify -n <value> [--json] [-r <value>]\n\nFLAGS\n  -n, --npm=<value>       (required) Specify the npm name. This can include a\n                          tag/version.\n  -r, --registry=<value>  The registry name. The behavior is the same as npm.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Validate a digital signature.\n\n  Verifies the digital signature on an npm package matches the signature and key\n  stored at the expected URLs.\n\nEXAMPLES\n  $ sfdx plugins trust verify --npm @scope/npmName --registry http://my.repo.org:4874\n\n  $ sfdx plugins trust verify --npm @scope/npmName\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_297.txt"}}],["bf29832b-086a-4116-a43f-1c346a755b18",{"pageContent":"\n\nRemoves a plugin from the CLI.\n\nUSAGE\n  $ sfdx plugins:uninstall PLUGIN...\n\nARGUMENTS\n  PLUGIN  plugin to uninstall\n\nFLAGS\n  -h, --help     Show CLI help.\n  -v, --verbose\n\nDESCRIPTION\n  Removes a plugin from the CLI.\n\nALIASES\n  $ sfdx plugins unlink\n  $ sfdx plugins remove\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_298.txt"}}],["5045a0b8-c29b-4f00-b09d-b80f61d9ebe6",{"pageContent":"\n\nRemoves a plugin from the CLI.\n\nUSAGE\n  $ sfdx plugins:uninstall PLUGIN...\n\nARGUMENTS\n  PLUGIN  plugin to uninstall\n\nFLAGS\n  -h, --help     Show CLI help.\n  -v, --verbose\n\nDESCRIPTION\n  Removes a plugin from the CLI.\n\nALIASES\n  $ sfdx plugins unlink\n  $ sfdx plugins remove\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_299.txt"}}],["72b4eb7d-1470-4701-8c64-c4d1f3e85451",{"pageContent":"\n\nUnset one or more aliases that are currently set on your local computer.\n\nUSAGE\n  $ sfdx alias unset [--json] [-a] [-p]\n\nFLAGS\n  -a, --all        Unset all currently set aliases.\n  -p, --no-prompt  Don't prompt the user for confirmation when unsetting all\n                   aliases.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Unset one or more aliases that are currently set on your local computer.\n\n  Aliases are global, so when you unset one it's no longer available in any\n  Salesforce DX project.\n\nALIASES\n  $ sfdx force alias unset\n\nEXAMPLES\n  Unset an alias:\n\n    $ sfdx alias unset my-alias\n\n  Unset multiple aliases with a single command:\n\n    $ sfdx alias unset my-alias my-other-alias\n\n  Unset all aliases:\n\n    $ sfdx alias unset --all [--no-prompt]\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_3.txt"}}],["c9195d8f-2624-42a4-be18-4e759c81e62c",{"pageContent":"\n\nlist all the commands\n\nUSAGE\n  $ sfdx commands [--json] [-h] [--hidden] [--tree] [--columns <value>\n    | -x] [--sort <value>] [--filter <value>] [--output csv|json|yaml |  |\n    [--csv | --no-truncate]] [--no-header | ]\n\nFLAGS\n  -h, --help         Show CLI help.\n  -x, --extended     show extra columns\n  --columns=<value>  only show provided columns (comma-separated)\n  --csv              output is csv format [alias: --output=csv]\n  --filter=<value>   filter property by partial string matching, ex: name=foo\n  --hidden           show hidden commands\n  --no-header        hide table header from output\n  --no-truncate      do not truncate output to fit screen\n  --output=<option>  output in a more machine friendly format\n                     <options: csv|json|yaml>\n  --sort=<value>     property to sort by (prepend '-' for descending)\n  --tree             show tree of commands\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  list all the commands\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_30.txt"}}],["3791a28f-22a9-4802-8531-af66704b1b07",{"pageContent":"\n\nUpdate installed plugins.\n\nUSAGE\n  $ sfdx plugins update [-h] [-v]\n\nFLAGS\n  -h, --help     Show CLI help.\n  -v, --verbose\n\nDESCRIPTION\n  Update installed plugins\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_300.txt"}}],["38d6cbaa-8146-482e-9b20-dbe081eff790",{"pageContent":"\n\nConvert metadata retrieved via Metadata API into the source format used in Salesforce DX projects.\n\nUSAGE\n  $ sfdx project convert mdapi -r <value> [--json] [--api-version <value>] [-d\n    <value>] [-p <value> | -x <value> | -m <value>]\n\nFLAGS\n  -d, --output-dir=<value>       Directory to store your files in after they’re\n                                 converted to source format; can be an absolute\n                                 or relative path.\n  -m, --metadata=<value>...      Metadata component names to convert.\n  -p, --metadata-dir=<value>...  Root of directory or zip file of metadata\n                                 formatted files to convert.\n  -r, --root-dir=<value>         (required) Root directory that contains the\n                                 Metadata API–formatted metadata.\n  -x, --manifest=<value>         File path to manifest (package.xml) of metadata\n                                 types to convert.\n  --api-version=<value>          Override the api version used for api requests\n                                 made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Convert metadata retrieved via Metadata API into the source format used in\n  Salesforce DX projects.\n\n  To use Salesforce CLI to work with components that you retrieved via Metadata\n  API, first convert your files from the metadata format to the source format\n  using this command.\n\n  To convert files from the source format back to the metadata format, run \"sfdx\n  project convert source\".\n\n  To convert multiple metadata components, either set multiple --metadata <name>\n  flags or a single --metadata flag with multiple names separated by spaces.\n  Enclose names that contain spaces in one set of double quotes. The same syntax\n  applies to --manifest and --source-dir.\n\nALIASES\n  $ sfdx force mdapi convert\n\nEXAMPLES\n  Convert metadata formatted files in the specified directory into source\n  formatted files; writes converted files to your default package directory:\n\n    $ sfdx project convert mdapi --root-dir path/to/metadata\n\n  Similar to previous example, but writes converted files to the specified\n  output directory:\n\n    $ sfdx project convert mdapi --root-dir path/to/metadata --output-dir \\\n      path/to/outputdir\n\nFLAG DESCRIPTIONS\n  -p, --metadata-dir=<value>...\n\n    Root of directory or zip file of metadata formatted files to convert.\n\n    The supplied paths can be to a single file (in which case the operation is\n    applied to only one file) or to a folder (in which case the operation is\n    applied to all metadata types in the directory and its sub-directories).\n\n    If you specify this flag, don’t specify --manifest or --metadata. If the\n    comma-separated list you’re supplying contains spaces, enclose the entire\n    comma-separated list in one set of double quotes.\n\n  -x, --manifest=<value>\n\n    File path to manifest (package.xml) of metadata types to convert.\n\n    If you specify this parameter, don’t specify --metadata or --source-dir\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_301.txt"}}],["543e931d-5dee-40a1-be74-96349f6270c8",{"pageContent":"\n\nConvert source-formatted files into metadata that you can deploy using Metadata API.\n\nUSAGE\n  $ sfdx project convert source [--json] [--api-version <value>] [-r <value>] [-d\n    <value>] [-n <value>] [-p <value> | -x <value> | -m <value>]\n\nFLAGS\n  -d, --output-dir=<value>     [default: metadataPackage_1684336854808] Output\n                               directory to store the Metadata API–formatted\n                               files in.\n  -m, --metadata=<value>...    Metadata component names to convert.\n  -n, --package-name=<value>   Name of the package to associate with the\n                               metadata-formatted files.\n  -p, --source-dir=<value>...  Paths to the local source files to convert.\n  -r, --root-dir=<value>       Source directory other than the default package\n                               to convert.\n  -x, --manifest=<value>       Path to the manifest (package.xml) file that\n                               specifies the metadata types to convert.\n  --api-version=<value>        API Version to use in the generated project's\n                               manifest. By default, will use the version from\n                               sfdx-project.json\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Convert source-formatted files into metadata that you can deploy using\n  Metadata API.\n\n  To convert source-formatted files into the metadata format, so that you can\n  deploy them using Metadata API, run this command. Then deploy the metadata\n  using \"sfdx project deploy\".\n\n  To convert Metadata API–formatted files into the source format, run \"sfdx\n  project convert mdapi\".\n\n  To specify a package name that includes spaces, enclose the name in single\n  quotes.\n\n  To convert multiple components, either set multiple --metadata <name> flags or\n  a single --metadata flag with multiple names separated by spaces. Enclose\n  names that contain spaces in one set of double quotes. The same syntax applies\n  to --manifest and --source-dir.\n\nALIASES\n  $ sfdx force source convert\n\nEXAMPLES\n  Convert source-formatted files in the specified directory into\n  metadata-formatted files; writes converted files into a new directory:\n\n    $ sfdx project convert source --root-dir path/to/source\n\n  Similar to previous example, but writes converted files to the specified\n  output directory and associates the files with the specified package:\n\n    $ sfdx project convert source --root-dir path/to/source --output-dir \\\n      path/to/outputdir --package-name 'My Package'\n\nFLAG DESCRIPTIONS\n  -p, --source-dir=<value>...  Paths to the local source files to convert.\n\n    The supplied paths can be to a single file (in which case the operation is\n    applied to only one file) or to a folder (in which case the operation is\n    applied to all metadata types in the directory and its sub-directories).\n\n    If you specify this parameter, don’t specify --manifest or --metadata.\n\n  -x, --manifest=<value>\n\n    Path to the manifest (package.xml) file that specifies the metadata types to\n    convert.\n\n    If you specify this parameter, don’t specify --metadata or --source-dir.\n\n  --api-version=<value>\n\n    API Version to use in the generated project's manifest. By default, will use\n    the version from sfdx-project.json\n\n    Override the api version used for api requests made by this command\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_302.txt"}}],["cb0c7918-8e35-4c14-8526-e8914e03dccc",{"pageContent":"\n\nDelete source from your project and from a non-source-tracked org.\n\nUSAGE\n  $ sfdx project delete source -o <value> [--json] [--api-version <value>] [-w\n    <value>] [-l NoTestRun|RunLocalTests|RunAllTestsInOrg] [-r] [-m <value>] [-p\n    <value>] [-f [-t | -c]] [--verbose]\n\nFLAGS\n  -c, --check-only             Validate delete command but don't delete anything\n                               from the org or the local project.\n  -f, --force-overwrite        Ignore conflict warnings and overwrite changes to\n                               the org.\n  -l, --test-level=<option>    Deployment Apex testing level.\n                               <options:\n                               NoTestRun|RunLocalTests|RunAllTestsInOrg>\n  -m, --metadata=<value>...    Metadata components to delete.\n  -o, --target-org=<value>     (required) Username or alias of the target org.\n  -p, --source-dir=<value>...  Source file paths to delete.\n  -r, --no-prompt              Don't prompt for delete confirmation.\n  -t, --track-source           If the delete succeeds, update the source\n                               tracking information.\n  -w, --wait=<value>           [default: 33 minutes] Number of minutes to wait\n                               for the command to finish.\n  --api-version=<value>        Override the api version used for api requests\n                               made by this command\n  --verbose                    Verbose output of the delete result.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete source from your project and from a non-source-tracked org.\n\n  Use this command to delete components from orgs that don’t have source\n  tracking. To remove deleted items from orgs that have source tracking enabled,\n  \"sfdx project deploy start\".\n\n  When you run this command, both the local source file and the metadata\n  component in the org are deleted.\n\n  To delete multiple metadata components, either set multiple --metadata <name>\n  flags or a single --metadata flag with multiple names separated by spaces.\n  Enclose names that contain spaces in one set of double quotes. The same syntax\n  applies to --manifest and --source-dir.\n\nALIASES\n  $ sfdx force source delete\n\nEXAMPLES\n  Delete all local Apex source files and all Apex classes from the org with\n  alias \"my-scratch\":\n\n    $ sfdx project delete source --metadata ApexClass --target-org \\\n      my-scratch\n\n  Delete a specific Apex class and a Profile that has a space in it from your\n  default org; don't prompt for confirmation:\n\n    $ sfdx project delete source --metadata ApexClass:MyFabulousApexClass \\\n      --metadata \"Profile: My Profile\" --no-prompt\n\n  Run the tests that aren’t in any managed packages as part of the deletion;\n  if the delete succeeds, and the org has source-tracking enabled, update the\n  source tracking information:\n\n    $ sfdx project delete source --metadata ApexClass --test-level \\\n      RunLocalTests --track-source\n\n  Delete the Apex source files in a directory and the corresponding components\n  from your default org:\n\n    $ sfdx project delete source --source-dir force-app/main/default/classes\n\nFLAG DESCRIPTIONS\n  -c, --check-only\n\n    Validate delete command but don't delete anything from the org or the local\n    project.\n\n    IMPORTANT: Where possible, we changed noninclusive terms to align with our\n    company value of Equality. We maintained certain terms to avoid any effect\n    on customer implementations.\n\n    Validates the deleted metadata and runs all Apex tests, but prevents the\n    deletion from being saved to the org.\n\n    If you change a field type from Master-Detail to Lookup or vice versa, that\n    change isn’t supported when using the --chec-konly parameter to test a\n    deletion (validation). This kind of change isn’t supported for test\n    deletions to avoid the risk of data loss or corruption. If a change that\n    isn’t supported for test deletions is included in a deletion package, the\n    test deletion fails and issues an error.\n\n    If your deletion package changes a field type from Master-Detail to Lookup\n    or vice versa, you can still validate the changes prior to deploying to\n    Production by performing a full deletion to another test Sandbox. A full\n    deletion includes a validation of the changes as part of the deletion\n    process.\n\n    Note: A Metadata API deletion that includes Master-Detail relationships\n    deletes all detail records in the Recycle Bin in the following cases.\n\n    1. For a deletion with a new Master-Detail field, soft delete (send to the\n    Recycle Bin) all detail records before proceeding to delete the\n    Master-Detail field, or the deletion fails. During the deletion, detail\n    records are permanently deleted from the Recycle Bin and cannot be\n    recovered.\n\n    2. For a deletion that converts a Lookup field relationship to a\n    Master-Detail relationship, detail records must reference a master record or\n    be soft-deleted (sent to the Recycle Bin) for the deletion to succeed.\n    However, a successful deletion permanently deletes any detail records in the\n    Recycle Bin.\n\n  -l, --test-level=NoTestRun|RunLocalTests|RunAllTestsInOrg\n\n    Deployment Apex testing level.\n\n    Valid values are:\n\n    - NoTestRun — No tests are run. This test level applies only to deployments\n    to development environments, such as sandbox, Developer Edition, or trial\n    orgs. This test level is the default for development environments.\n    - RunLocalTests — All tests in your org are run, except the ones that\n    originate from installed managed and unlocked packages. This test level is\n    the default for production deployments that include Apex classes or\n    triggers.\n    - RunAllTestsInOrg — All tests in your org are run, including tests of\n    managed packages.\n\n    If you don’t specify a test level, the default behavior depends on the\n    contents of your deployment package and target org. For more information,\n    see “Running Tests in a Deployment” in the Metadata API Developer Guide.\n\n  -m, --metadata=<value>...  Metadata components to delete.\n\n    If you specify this parameter, don’t specify --source-dir.\n\n  -p, --source-dir=<value>...  Source file paths to delete.\n\n    The supplied paths can be a single file (in which case the operation is\n    applied to only one file) or a folder (in which case the operation is\n    applied to all metadata types in the directory and its sub-directories).\n\n    If you specify this parameter, don’t specify --metadata.\n\n  -w, --wait=<value>  Number of minutes to wait for the command to finish.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_303.txt"}}],["342722c5-ebc6-41b0-acfa-33477e330397",{"pageContent":"\n\nDelete all local source tracking information.\n\nUSAGE\n  $ sfdx project delete tracking -o <value> [--json] [--api-version <value>]\n  [-p]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -p, --no-prompt           Don't prompt for source tracking override\n                            confirmation.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete all local source tracking information.\n\n  WARNING: This command deletes or overwrites all existing source tracking\n  files. Use with extreme caution.\n\n  Deletes all local source tracking information. When you next run 'project\n  deploy preview', Salesforce CLI displays all local and remote files as\n  changed, and any files with the same name are listed as conflicts.\n\nALIASES\n  $ sfdx force source tracking clear\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_304.txt"}}],["60f12f11-5bf5-49ef-a8c5-0d37293e7684",{"pageContent":"\n\nCancel a deploy operation.\n\nUSAGE\n  $ sfdx project deploy cancel [--json] [--async | -w <value>] [-i <value>] [-r]\n\nFLAGS\n  -i, --job-id=<value>   Job ID of the deploy operation you want to cancel.\n  -r, --use-most-recent  Use the job ID of the most recent deploy operation.\n  -w, --wait=<minutes>   Number of minutes to wait for the command to complete\n                         and display results.\n  --async                Run the command asynchronously.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Cancel a deploy operation.\n\n  Use this command to cancel a deploy operation that hasn't yet completed in the\n  org. Deploy operations include standard deploys, quick deploys, deploy\n  validations, and deploy cancellations.\n\n  Run this command by either passing it a job ID or specifying the\n  --use-most-recent flag to use the job ID of the most recent deploy operation.\n\nALIASES\n  $ sfdx deploy metadata cancel\n\nEXAMPLES\n  Cancel a deploy operation using a job ID:\n\n    $ sfdx project deploy cancel --job-id 0Af0x000017yLUFCA2\n\n  Cancel the most recent deploy operation:\n\n    $ sfdx project deploy cancel --use-most-recent\n\nFLAG DESCRIPTIONS\n  -i, --job-id=<value>  Job ID of the deploy operation you want to cancel.\n\n    These commands return a job ID if they time out or you specified the --async\n    flag:\n\n    - sfdx project deploy start\n    - sfdx project deploy validate\n    - sfdx project deploy quick\n    - sfdx project deploy cancel\n\n    The job ID is valid for 10 days from when you started the deploy operation.\n\n  -r, --use-most-recent  Use the job ID of the most recent deploy operation.\n\n    For performance reasons, this flag uses job IDs for deploy operations that\n    started only in the past 3 days or less. If your most recent deploy\n    operations was more than 3 days ago, this flag won't find a job ID.\n\n  -w, --wait=<minutes>\n\n    Number of minutes to wait for the command to complete and display results.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you. To resume watching the cancellation,\n    run \"sfdx project deploy resume\". To check the status of the cancellation,\n    run \"sfdx project deploy report\".\n\n  --async  Run the command asynchronously.\n\n    The command immediately returns the control of the terminal to you. This\n    way, you can continue to use the CLI. To resume watching the cancellation,\n    run \"sfdx project deploy resume\". To check the status of the cancellation,\n    run \"sfdx project deploy report\"\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_305.txt"}}],["f9abddad-fc91-4c3a-b4df-82906e5cb6ea",{"pageContent":"\n\nPreview a deployment to see what will deploy to the org, the potential conflicts, and the ignored files.\n\nUSAGE\n  $ sfdx project deploy preview -o <value> [--json] [-c] [-x <value> | -d <value> |\n    -m <value>]\n\nFLAGS\n  -c, --ignore-conflicts       Don't display conflicts in preview of the\n                               deployment.\n  -d, --source-dir=<value>...  Path to the local source files to preview.\n  -m, --metadata=<value>...    Metadata component names to preview.\n  -o, --target-org=<value>     (required) Login username or alias for the target\n                               org.\n  -x, --manifest=<value>       Full file path for manifest (package.xml) of\n                               components to preview.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Preview a deployment to see what will deploy to the org, the potential\n  conflicts, and the ignored files.\n\n  You must run this command from within a project.\n\n  The command outputs a table that describes what will happen if you run the\n  \"sfdx project deploy start\" command. The table lists the metadata components\n  that will be deployed and deleted. The table also lists the current conflicts\n  between files in your local project and components in the org. Finally, the\n  table lists the files that won't be deployed because they're included in your\n  .forceignore file.\n\n  If your org allows source tracking, then this command displays potential\n  conflicts between the org and your local project. Some orgs, such as\n  production org, never allow source tracking. Source tracking is enabled by\n  default on scratch and sandbox orgs; you can disable source tracking when you\n  create the orgs by specifying the --no-track-source flag on the \"sfdx org\n  create scratch|sandbox\" commands.\n\n  To preview the deployment of multiple metadata components, either set multiple\n  --metadata <name> flags or a single --metadata flag with multiple names\n  separated by spaces. Enclose names that contain spaces in one set of double\n  quotes. The same syntax applies to --manifest and --source-dir.\n\nALIASES\n  $ sfdx deploy metadata preview\n\nEXAMPLES\n  NOTE: The commands to preview a deployment and actually deploy it use similar flags. We provide a few preview examples here, but see the help for \"sfdx project deploy start\" for more examples that you can adapt for previewing.\n\n  Preview the deployment of source files in a directory, such as force-app, to\n  your default org:\n\n    $ sfdx project deploy preview  --source-dir force-app\n\n  Preview the deployment of all Apex classes to an org with alias\n  \"my-scratch\":\n\n    $ sfdx project deploy preview --metadata ApexClass --target-org \\\n      my-scratch\n\n  Preview deployment of a specific Apex class:\n\n    $ sfdx project deploy preview --metadata ApexClass:MyApexClass\n\n  Preview deployment of all components listed in a manifest:\n\n    $ sfdx project deploy preview --manifest path/to/package.xml\n\nFLAG DESCRIPTIONS\n  -c, --ignore-conflicts  Don't display conflicts in preview of the deployment.\n\n    This flag applies only to orgs that allow source tracking. It has no effect\n    on orgs that don't allow it, such as production orgs.\n\n  -d, --source-dir=<value>...  Path to the local source files to preview.\n\n    The supplied path can be to a single file (in which case the operation is\n    applied to only one file) or to a folder (in which case the operation is\n    applied to all metadata types in the directory and its subdirectories).\n\n    If you specify this flag, don’t specify --metadata or --manifest.\n\n  -o, --target-org=<value>  Login username or alias for the target org.\n\n    Overrides your default org.\n\n  -x, --manifest=<value>\n\n    Full file path for manifest (package.xml) of components to preview.\n\n    All child components are included. If you specify this flag, don’t specify\n    --metadata or --source-dir\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_306.txt"}}],["371724b2-01e2-47d3-9816-5b9c56d623df",{"pageContent":"\n\nQuickly deploy a validated deployment to an org.\n\nUSAGE\n  $ sfdx project deploy quick [--json] [--async | -w <value>] [--concise |\n    --verbose] [-i <value>] [-o <value>] [-r] [-a <value>]\n\nFLAGS\n  -a, --api-version=<value>  Target API version for the deploy.\n  -i, --job-id=<value>       Job ID of the deployment you want to quick deploy.\n  -o, --target-org=<value>   Login username or alias for the target org.\n  -r, --use-most-recent      Use the job ID of the most recently validated\n                             deployment.\n  -w, --wait=<minutes>       [default: 33 minutes] Number of minutes to wait for\n                             the command to complete and display results.\n  --async                    Run the command asynchronously.\n  --concise                  Show concise output of the deploy result.\n  --verbose                  Show verbose output of the deploy result.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Quickly deploy a validated deployment to an org.\n\n  Before you run this command, first create a validated deployment with the\n  \"sfdx project deploy validate\" command, which returns a job ID. Validated\n  deployments haven't been deployed to the org yet; you deploy them with this\n  command. Either pass the job ID to this command or use the --use-most-recent\n  flag to use the job ID of the most recently validated deployment. For the\n  quick deploy to succeed, the associated validated deployment must also have\n  succeeded.\n\n  Executing this quick deploy command takes less time than a standard deploy\n  because it skips running Apex tests. These tests were previously run as part\n  of the validation. Validating first and then running a quick deploy is useful\n  if the deployment to your production org take several hours and you don’t want\n  to risk a failed deploy.\n\n  This command doesn't support source-tracking. The source you deploy overwrites\n  the corresponding metadata in your org. This command doesn’t attempt to merge\n  your source with the versions in your org.\n\nALIASES\n  $ sfdx deploy metadata quick\n\nEXAMPLES\n  Run a quick deploy to your default org using a job ID:\n\n    $ sfdx project deploy quick --job-id 0Af0x000017yLUFCA2\n\n  Asynchronously run a quick deploy of the most recently validated deployment\n  to an org with alias \"my-prod-org\":\n\n    $ sfdx project deploy quick --async --use-most-recent --target-org \\\n      my-prod-org\n\nFLAG DESCRIPTIONS\n  -a, --api-version=<value>  Target API version for the deploy.\n\n    Use this flag to override the default API version with the API version of\n    your package.xml file. The default API version is the latest version\n    supported by the CLI.\n\n  -i, --job-id=<value>  Job ID of the deployment you want to quick deploy.\n\n    The job ID is valid for 10 days from when you started the validation.\n\n  -o, --target-org=<value>  Login username or alias for the target org.\n\n    Overrides your default org.\n\n  -r, --use-most-recent\n\n    Use the job ID of the most recently validated deployment.\n\n    For performance reasons, this flag uses only job IDs that were validated in\n    the past 3 days or less. If your most recent deployment validation was more\n    than 3 days ago, this flag won't find a job ID.\n\n  -w, --wait=<minutes>\n\n    Number of minutes to wait for the command to complete and display results.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you. To resume watching the deploy, run\n    \"sfdx project deploy resume\". To check the status of the deploy, run \"sfdx\n    project deploy report\".\n\n  --async  Run the command asynchronously.\n\n    The command immediately returns the control of the terminal to you. This\n    way, you can continue to use the CLI. To resume watching the deploy, run\n    \"sfdx project deploy resume\". To check the status of the deploy, run \"sfdx\n    project deploy report\".\n\nERROR CODES\n  Succeeded (0)          The deploy succeeded.\n  Canceled (1)           The deploy was canceled.\n  Failed (1)             The deploy failed.\n  SucceededPartial (68)  The deploy partially succeeded.\n  InProgress (69)        The deploy is in progress.\n  Pending (69)           The deploy is pending.\n  Canceling (69)         The deploy is being canceled\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_307.txt"}}],["d72a0669-f2ff-4cff-b911-23014dfb9dc6",{"pageContent":"\n\nCheck the status of a deploy operation.\n\nUSAGE\n  $ sfdx project deploy report [--json] [-i <value>] [-r] [--results-dir <value>\n    --junit --coverage-formatters clover|cobertura|html-spa|html|json|json-summa\n    ry|lcovonly|none|teamcity|text|text-summary]\n\nFLAGS\n  -i, --job-id=<value>               Job ID of the deploy operation you want to\n                                     check the status of.\n  -r, --use-most-recent              Use the job ID of the most recent deploy\n                                     operation.\n  --coverage-formatters=<option>...  Format of the code coverage results.\n                                     <options: clover|cobertura|html-spa|html|js\n                                     on|json-summary|lcovonly|none|teamcity|text\n                                     |text-summary>\n  --junit                            Output JUnit test results.\n  --results-dir=<value>              Output directory for code coverage and\n                                     JUnit results; defaults to the deploy ID.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Check the status of a deploy operation.\n\n  Deploy operations include standard deploys, quick deploys, deploy validations,\n  and deploy cancellations.\n\n  Run this command by either passing it a job ID or specifying the\n  --use-most-recent flag to use the job ID of the most recent deploy operation.\n\nALIASES\n  $ sfdx deploy metadata report\n\nEXAMPLES\n  Check the status using a job ID:\n\n    $ sfdx project deploy report --job-id 0Af0x000017yLUFCA2\n\n  Check the status of the most recent deploy operation:\n\n    $ sfdx project deploy report --use-most-recent\n\nFLAG DESCRIPTIONS\n  -i, --job-id=<value>\n\n    Job ID of the deploy operation you want to check the status of.\n\n    These commands return a job ID if they time out or you specified the --async\n    flag:\n\n    - sfdx project deploy start\n    - sfdx project deploy validate\n    - sfdx project deploy quick\n    - sfdx project deploy cancel\n\n    The job ID is valid for 10 days from when you started the deploy operation.\n\n  -r, --use-most-recent  Use the job ID of the most recent deploy operation.\n\n    For performance reasons, this flag uses job IDs for deploy operations that\n    started only in the past 3 days or less. If your most recent operation was\n    more than 3 days ago, this flag won't find a job ID.\n\n  --coverage-formatters=clover|cobertura|html-spa|html|json|json-summary|lcovonly|none|teamcity|text|text-summary...\n\n    Format of the code coverage results.\n\n    For multiple formatters, repeat the flag for each formatter.\n    --coverage-formatters lcov --coverage-formatters clover\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_308.txt"}}],["a6d2b86d-9abe-4826-b851-a8111bf9bd5a",{"pageContent":"\n\nResume watching a deploy operation.\n\nUSAGE\n  $ sfdx project deploy resume [--json] [--concise | --verbose] [-i <value>] [-r]\n    [-w <value>] [--results-dir <value> --junit --coverage-formatters\n    clover|cobertura|html-spa|html|json|json-summary|lcovonly|none|teamcity|text\n    |text-summary]\n\nFLAGS\n  -i, --job-id=<value>               Job ID of the deploy operation you want to\n                                     resume.\n  -r, --use-most-recent              Use the job ID of the most recent deploy\n                                     operation.\n  -w, --wait=<minutes>               Number of minutes to wait for the command\n                                     to complete and display results.\n  --concise                          Show concise output of the deploy operation\n                                     result.\n  --coverage-formatters=<option>...  Format of the code coverage results.\n                                     <options: clover|cobertura|html-spa|html|js\n                                     on|json-summary|lcovonly|none|teamcity|text\n                                     |text-summary>\n  --junit                            Output JUnit test results.\n  --results-dir=<value>              Output directory for code coverage and\n                                     JUnit results; defaults to the deploy ID.\n  --verbose                          Show verbose output of the deploy operation\n                                     result.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Resume watching a deploy operation.\n\n  Use this command to resume watching a deploy operation if the original command\n  times out or you specified the --async flag. Deploy operations include\n  standard deploys, quick deploys, deploy validations, and deploy cancellations.\n  This command doesn't resume the original operation itself, because the\n  operation always continues after you've started it, regardless of whether\n  you're watching it or not.\n\n  Run this command by either passing it a job ID or specifying the\n  --use-most-recent flag to use the job ID of the most recent deploy operation.\n\nALIASES\n  $ sfdx deploy metadata resume\n\nEXAMPLES\n  Resume watching a deploy operation using a job ID:\n\n    $ sfdx project deploy resume --job-id 0Af0x000017yLUFCA2\n\n  Resume watching the most recent deploy operation:\n\n    $ sfdx project deploy resume --use-most-recent\n\nFLAG DESCRIPTIONS\n  -i, --job-id=<value>  Job ID of the deploy operation you want to resume.\n\n    These commands return a job ID if they time out or you specified the --async\n    flag:\n\n    - sfdx project deploy start\n    - sfdx project deploy validate\n    - sfdx project deploy quick\n    - sfdx project deploy cancel\n\n    The job ID is valid for 10 days from when you started the deploy operation.\n\n  -r, --use-most-recent  Use the job ID of the most recent deploy operation.\n\n    For performance reasons, this flag uses job IDs for deploy operations that\n    started only in the past 3 days or less. If your most recent operation was\n    more than 3 days ago, this flag won't find a job ID.\n\n  -w, --wait=<minutes>\n\n    Number of minutes to wait for the command to complete and display results.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you. To resume watching the deploy\n    operation, run this command again. To check the status of the deploy\n    operation, run \"sfdx project deploy report\".\n\n  --coverage-formatters=clover|cobertura|html-spa|html|json|json-summary|lcovonly|none|teamcity|text|text-summary...\n\n    Format of the code coverage results.\n\n    For multiple formatters, repeat the flag for each formatter.\n    --coverage-formatters lcov --coverage-formatters clover\n\nENVIRONMENT VARIABLES\n  SF_USE_PROGRESS_BAR  Set to false to disable the progress bar when running the\n                       metadata deploy command.\n\nERROR CODES\n  Succeeded (0)          The deploy succeeded.\n  Canceled (1)           The deploy was canceled.\n  Failed (1)             The deploy failed.\n  SucceededPartial (68)  The deploy partially succeeded.\n  InProgress (69)        The deploy is in progress.\n  Pending (69)           The deploy is pending.\n  Canceling (69)         The deploy is being canceled\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_309.txt"}}],["d2250589-c31e-4c3d-85a0-dc0dcfacb63a",{"pageContent":"\n\nCreate an Experience Cloud site using a template.\n\nUSAGE\n  $ sfdx community create -n <value> -t <value> -o <value> [--json] [-p\n    <value>] [-d <value>] [--api-version <value>]\n\nFLAGS\n  -d, --description=<value>      Description of the site.\n  -n, --name=<value>             (required) Name of the site to create.\n  -o, --target-org=<value>       (required) Username or alias of the target org.\n  -p, --url-path-prefix=<value>  URL to append to the domain created when\n                                 Digital Experiences was enabled for this org.\n  -t, --template-name=<value>    (required) Template to use to create a site.\n  --api-version=<value>          Override the api version used for api requests\n                                 made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create an Experience Cloud site using a template.\n\n  See 'Which Experience Cloud Template Should I Use?' (https://help.salesforce.c\n  om/s/articleView?id=sf.siteforce_commtemp_intro.htm&type=5) in Salesforce Help\n  for more information about the different template\n  types available for Experience Cloud.\n\n  When creating a site with the Build Your Own (LWR) template, you must also\n  specify the AuthenticationType value using the format\n  templateParams.AuthenticationType=value, where value is AUTHENTICATED,\n  UNAUTHENTICATED, or AUTHENTICATED_WITH_PUBLIC_ACCESS. Name and values are\n  case-sensitive. See 'ExperienceBundle' in the Metadata API Developer Guide for\n  more information. (https://developer.salesforce.com/docs/atlas.en-us.api_meta.\n  meta/api_meta/meta_experiencebundle.htm)\n\n  When you execute this command, it creates the site in preview status, which\n  means that it isn't yet live. After you finish building your site, you can\n  make it live.\n\n  If you have an Experience Builder site, publish the site using the \"community\n  publish\" command to make it live.\n\n  If you have a Salesforce Tabs + Visualforce site, activate the site to make it\n  live by updating the status field of the Network type in the Metadata API.\n  Alternatively, in Experience Workspaces, go to Administration | Settings, and\n  click Activate.\n\n  For Experience Builder sites, activating the site just sends out a welcome\n  email to site members.\n\nALIASES\n  $ sfdx force community create\n\nEXAMPLES\n  Create an Experience Cloud site using template 'Customer Service' and URL\n  path prefix 'customers':\n\n    $ sfdx community create --name 'My Customer Site' --template-name \\\n      'Customer Service' --url-path-prefix customers --description 'My \\\n      customer site'\n\n  Create a site using 'Partner Central' template:\n\n    $ sfdx community create --name partnercentral --template-name 'Partner \\\n      Central' --url-path-prefix partners\n\n  Create a site using the 'Build Your Own (LWR)' template with authentication\n  type of UNAUTHENTICATED:\n\n    $ sfdx community create --name lwrsite --template-name 'Build Your Own \\\n      (LWR)' --url-path-prefix lwrsite \\\n      templateParams.AuthenticationType=UNAUTHENTICATED\n\nFLAG DESCRIPTIONS\n  -d, --description=<value>  Description of the site.\n\n    The description displays in Digital Experiences - All Sites in Setup and\n    helps with site identification.\n\n  -p, --url-path-prefix=<value>\n\n    URL to append to the domain created when Digital Experiences was enabled for\n    this org.\n\n    For example, if your domain name is https://MyDomainName.my.site.com and you\n    create a customer site, enter 'customers' to create the unique URL\n    https://MyDomainName.my.site.com/customers.\n\n  -t, --template-name=<value>  Template to use to create a site.\n\n    An example of a template is Customer Service. Run the \"community template\n    list\" command to see which templates are available in your org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_31.txt"}}],["a9e2a3cb-22e4-4775-a2f4-253ef48ed5cf",{"pageContent":"\n\nDeploy metadata to an org from your local project.\n\nUSAGE\n  $ sfdx project deploy start -o <value> [--json] [-a <value>] [--async | -w\n    <value>] [--concise | --verbose] [--dry-run] [-c] [-r] [-g]\n    [--single-package ] [-t <value>] [-l\n    NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg]\n    [--purge-on-delete [-x <value> | -d <value> | -m <value> | --metadata-dir\n    <value>]] [--pre-destructive-changes <value> ] [--post-destructive-changes\n    <value> ] [--junit --coverage-formatters clover|cobertura|html-spa|html|json\n    |json-summary|lcovonly|none|teamcity|text|text-summary] [--results-dir\n    <value> ]\n\nFLAGS\n  -a, --api-version=<value>           Target API version for the deploy.\n  -c, --ignore-conflicts              Ignore conflicts and deploy local files,\n                                      even if they overwrite changes in the org.\n  -d, --source-dir=<value>...         Path to the local source files to deploy.\n  -g, --ignore-warnings               Ignore warnings and allow a deployment to\n                                      complete successfully.\n  -l, --test-level=<option>           Deployment Apex testing level.\n                                      <options: NoTestRun|RunSpecifiedTests|RunL\n                                      ocalTests|RunAllTestsInOrg>\n  -m, --metadata=<value>...           Metadata component names to deploy.\n  -o, --target-org=<value>            (required) Login username or alias for the\n                                      target org.\n  -r, --ignore-errors                 Ignore any errors and don’t roll back\n                                      deployment.\n  -t, --tests=<value>...              Apex tests to run when --test-level is\n                                      RunSpecifiedTests.\n  -w, --wait=<minutes>                [default: 33 minutes] Number of minutes to\n                                      wait for command to complete and display\n                                      results.\n  -x, --manifest=<value>              Full file path for manifest (package.xml)\n                                      of components to deploy.\n  --async                             Run the command asynchronously.\n  --concise                           Show concise output of the deploy result.\n  --coverage-formatters=<option>...   Format of the code coverage results.\n                                      <options: clover|cobertura|html-spa|html|j\n                                      son|json-summary|lcovonly|none|teamcity|te\n                                      xt|text-summary>\n  --dry-run                           Validate deploy and run Apex tests but\n                                      don’t save to the org.\n  --junit                             Output JUnit test results.\n  --metadata-dir=<value>              Root of directory or zip file of metadata\n                                      formatted files to deploy.\n  --post-destructive-changes=<value>  File path for a manifest\n                                      (destructiveChangesPost.xml) of components\n                                      to delete after the deploy.\n  --pre-destructive-changes=<value>   File path for a manifest\n                                      (destructiveChangesPre.xml) of components\n                                      to delete before the deploy\n  --purge-on-delete                   Specify that deleted components in the\n                                      destructive changes manifest file are\n                                      immediately eligible for deletion rather\n                                      than being stored in the Recycle Bin.\n  --results-dir=<value>               Output directory for code coverage and\n                                      JUnit results; defaults to the deploy ID.\n  --single-package                    Indicates that the metadata zip file\n                                      points to a directory structure for a\n                                      single package.\n  --verbose                           Show verbose output of the deploy result.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Deploy metadata to an org from your local project.\n\n  You must run this command from within a project.\n\n  Metadata components are deployed in source format by default. Deploy them in\n  metadata format by specifying the --metadata-dir flag, which specifies the\n  root directory or ZIP file that contains the metadata formatted files you want\n  to deploy.\n\n  If your org allows source tracking, then this command tracks the changes in\n  your source. Some orgs, such as production org, never allow source tracking.\n  Source tracking is enabled by default on scratch and sandbox orgs; you can\n  disable source tracking when you create the orgs by specifying the\n  --no-track-source flag on the \"sfdx org create scratch|sandbox\" commands.\n\n  To deploy multiple metadata components, either set multiple --metadata <name>\n  flags or a single --metadata flag with multiple names separated by spaces.\n  Enclose names that contain spaces in one set of double quotes. The same syntax\n  applies to --manifest and --source-dir.\n\nALIASES\n  $ sfdx deploy metadata\n\nEXAMPLES\n  Deploy local changes not in the org; uses your default org:\n\n    $ sfdx project deploy start\n\n  Deploy the source files in a directory to an org with alias \"my-scratch\":\n\n    $ sfdx project deploy start  --source-dir path/to/source --target-org \\\n      my-scratch\n\n  Deploy a specific Apex class and the objects whose source is in a directory\n  (both examples are equivalent):\n\n    $ sfdx project deploy start --source-dir \\\n      path/to/apex/classes/MyClass.cls path/to/source/objects\n    $ sfdx project deploy start --source-dir \\\n      path/to/apex/classes/MyClass.cls --source-dir path/to/source/objects\n\n  Deploy all Apex classes:\n\n    $ sfdx project deploy start --metadata ApexClass\n\n  Deploy a specific Apex class:\n\n    $ sfdx project deploy start --metadata ApexClass:MyApexClass\n\n  Deploy all custom objects and Apex classes (both examples are equivalent):\n\n    $ sfdx project deploy start --metadata CustomObject ApexClass\n    $ sfdx project deploy start --metadata CustomObject --metadata ApexClass\n\n  Deploy all Apex classes and a profile that has a space in its name:\n\n    $ sfdx project deploy start --metadata ApexClass --metadata \"Profile:My \\\n      Profile\"\n\n  Deploy all components listed in a manifest:\n\n    $ sfdx project deploy start --manifest path/to/package.xml\n\n  Run the tests that aren’t in any managed packages as part of a deployment:\n\n    $ sfdx project deploy start --metadata ApexClass --test-level \\\n      RunLocalTests\n\nFLAG DESCRIPTIONS\n  -a, --api-version=<value>  Target API version for the deploy.\n\n    Use this flag to override the default API version with the API version of\n    your package.xml file. The default API version is the latest version\n    supported by the CLI.\n\n  -c, --ignore-conflicts\n\n    Ignore conflicts and deploy local files, even if they overwrite changes in\n    the org.\n\n    This flag applies only to orgs that allow source tracking. It has no effect\n    on orgs that don't allow it, such as production orgs.\n\n  -d, --source-dir=<value>...  Path to the local source files to deploy.\n\n    The supplied path can be to a single file (in which case the operation is\n    applied to only one file) or to a folder (in which case the operation is\n    applied to all metadata types in the directory and its subdirectories).\n\n    If you specify this flag, don’t specify --metadata or --manifest.\n\n  -g, --ignore-warnings\n\n    Ignore warnings and allow a deployment to complete successfully.\n\n    If a warning occurs and this flag is set to true, the success status of the\n    deployment is set to true. When this flag is set to false, success is set to\n    false, and the warning is treated like an error.\n\n  -l, --test-level=NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg\n\n    Deployment Apex testing level.\n\n    Valid values are:\n\n    - NoTestRun — No tests are run. This test level applies only to deployments\n    to development environments, such as sandbox, Developer Edition, or trial\n    orgs. This test level is the default for development environments.\n\n    - RunSpecifiedTests — Runs only the tests that you specify with the\n    --run-tests flag. Code coverage requirements differ from the default\n    coverage requirements when using this test level. Executed tests must\n    comprise a minimum of 75% code coverage for each class and trigger in the\n    deployment package. This coverage is computed for each class and trigger\n    individually and is different than the overall coverage percentage.\n\n    - RunLocalTests — All tests in your org are run, except the ones that\n    originate from installed managed and unlocked packages. This test level is\n    the default for production deployments that include Apex classes or\n    triggers.\n\n    - RunAllTestsInOrg — All tests in your org are run, including tests of\n    managed packages.\n\n    If you don’t specify a test level, the default behavior depends on the\n    contents of your deployment package and target org. For more information,\n    see [Running Tests in a Deployment](https://developer.salesforce.com/docs/at\n    las.en-us.api_meta.meta/api_meta/meta_deploy_running_tests.htm) in the\n    \"Metadata API Developer Guide\".\n\n  -o, --target-org=<value>  Login username or alias for the target org.\n\n    Overrides your default org.\n\n  -r, --ignore-errors  Ignore any errors and don’t roll back deployment.\n\n    When deploying to a production org, keep this flag set to false (default\n    value). When set to true, components without errors are deployed and\n    components with errors are skipped, and could result in an inconsistent\n    production org.\n\n  -t, --tests=<value>...\n\n    Apex tests to run when --test-level is RunSpecifiedTests.\n\n    If a test name contains a space, enclose it in double quotes.\n    For multiple test names, use one of the following formats:\n\n    - Repeat the flag for multiple test names: --tests Test1 --tests Test2\n    --tests \"Test With Space\"\n    - Separate the test names with spaces: --tests Test1 Test2 \"Test With Space\"\n\n  -w, --wait=<minutes>\n\n    Number of minutes to wait for command to complete and display results.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you and returns the job ID. To resume the\n    deployment, run \"sfdx project deploy resume\". To check the status of the\n    deployment, run \"sfdx project deploy report\".\n\n  -x, --manifest=<value>\n\n    Full file path for manifest (package.xml) of components to deploy.\n\n    All child components are included. If you specify this flag, don’t specify\n    --metadata or --source-dir.\n\n  --async  Run the command asynchronously.\n\n    The command immediately returns the job ID and control of the terminal to\n    you. This way, you can continue to use the CLI. To resume the deployment,\n    run \"sfdx project deploy resume\". To check the status of the deployment, run\n    \"sfdx project deploy report\".\n\n  --coverage-formatters=clover|cobertura|html-spa|html|json|json-summary|lcovonly|none|teamcity|text|text-summary...\n\n    Format of the code coverage results.\n\n    For multiple formatters, repeat the flag for each formatter.\n    --coverage-formatters lcov --coverage-formatters clover\n\nCONFIGURATION VARIABLES\n  target-org       Username or alias of the org that all commands run against by\n                   default. (sf only)\n  org-api-version  API version of your project. Default: API version of your Dev\n                   Hub org.\n\nENVIRONMENT VARIABLES\n  SF_TARGET_ORG        Username or alias of your default org. Overrides the\n                       target-org configuration variable.\n  SF_USE_PROGRESS_BAR  Set to false to disable the progress bar when running the\n                       metadata deploy command.\n\nERROR CODES\n  Succeeded (0)          The deploy succeeded.\n  Canceled (1)           The deploy was canceled.\n  Failed (1)             The deploy failed.\n  SucceededPartial (68)  The deploy partially succeeded.\n  InProgress (69)        The deploy is in progress.\n  Pending (69)           The deploy is pending.\n  Canceling (69)         The deploy is being canceled\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_310.txt"}}],["8510200d-252a-4552-96c8-f8af368d04d4",{"pageContent":"\n\nValidate a metadata deployment without actually executing it.\n\nUSAGE\n  $ sfdx project deploy validate -o <value> [--json] [-a <value>] [--async]\n    [--concise | --verbose] [-x <value>] [-m <value>] [-d <value>]\n    [--single-package --metadata-dir <value>] [-t <value>] [-l\n    RunAllTestsInOrg|RunLocalTests|RunSpecifiedTests] [-w <value>]\n\nFLAGS\n  -a, --api-version=<value>    Target API version for the validation.\n  -d, --source-dir=<value>...  Path to the local source files to validate for\n                               deployment.\n  -l, --test-level=<option>    [default: RunLocalTests] Deployment Apex testing\n                               level.\n                               <options:\n                               RunAllTestsInOrg|RunLocalTests|RunSpecifiedTests>\n  -m, --metadata=<value>...    Metadata component names to validate for\n                               deployment.\n  -o, --target-org=<value>     (required) Login username or alias for the target\n                               org.\n  -t, --tests=<value>...       Apex tests to run when --test-level is\n                               RunSpecifiedTests.\n  -w, --wait=<minutes>         [default: 33 minutes] Number of minutes to wait\n                               for the command to complete and display results.\n  -x, --manifest=<value>       Full file path for manifest (package.xml) of\n                               components to validate for deployment.\n  --async                      Run the command asynchronously.\n  --concise                    Show concise output of the validation result.\n  --metadata-dir=<value>       Root of directory or zip file of metadata\n                               formatted files to deploy.\n  --single-package             Indicates that the metadata zip file points to a\n                               directory structure for a single package.\n  --verbose                    Show verbose output of the validation result.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Validate a metadata deployment without actually executing it.\n\n  Use this command to verify whether a deployment will succeed without actually\n  deploying the metadata to your org. This command is similar to \"sfdx project\n  deploy start\", except you're required to run Apex tests, and the command\n  returns a job ID rather than executing the deployment. If the validation\n  succeeds, then you pass this job ID to the \"sfdx project deploy quick\" command\n  to actually deploy the metadata. This quick deploy takes less time because it\n  skips running Apex tests. The job ID is valid for 10 days from when you\n  started the validation. Validating first is useful if the deployment to your\n  production org take several hours and you don’t want to risk a failed deploy.\n\n  You must run this command from within a project.\n\n  This command doesn't support source-tracking. When you quick deploy with the\n  resulting job ID, the source you deploy overwrites the corresponding metadata\n  in your org.\n\n  To validate the deployment of multiple metadata components, either set\n  multiple --metadata <name> flags or a single --metadata flag with multiple\n  names separated by spaces. Enclose names that contain spaces in one set of\n  double quotes. The same syntax applies to --manifest and --source-dir.\n\nALIASES\n  $ sfdx deploy metadata validate\n\nEXAMPLES\n  NOTE: These examples focus on validating large deployments. See the help for \"sfdx project deploy start\" for examples of deploying smaller sets of metadata which you can also use to validate.\n\n  Validate the deployment of all source files in a directory to the default\n  org:\n\n    $ sfdx project deploy validate --source-dir path/to/source\n\n  Asynchronously validate the deployment and run all tests in the org with\n  alias \"my-prod-org\"; command immediately returns the job ID:\n\n    $ sfdx project deploy validate --source-dir path/to/source --async \\\n      --test-level RunAllTestsInOrg --target-org my-prod-org\n\n  Validate the deployment of all components listed in a manifest:\n\n    $ sfdx project deploy validate --manifest path/to/package.xml\n\nFLAG DESCRIPTIONS\n  -a, --api-version=<value>  Target API version for the validation.\n\n    Use this flag to override the default API version with the API version of\n    your package.xml file. The default API version is the latest version\n    supported by the CLI.\n\n  -d, --source-dir=<value>...\n\n    Path to the local source files to validate for deployment.\n\n    The supplied path can be to a single file (in which case the operation is\n    applied to only one file) or to a folder (in which case the operation is\n    applied to all metadata types in the directory and its subdirectories).\n\n    If you specify this flag, don’t specify --metadata or --manifest.\n\n  -l, --test-level=RunAllTestsInOrg|RunLocalTests|RunSpecifiedTests\n\n    Deployment Apex testing level.\n\n    Valid values are:\n\n    - RunSpecifiedTests — Runs only the tests that you specify with the\n    --run-tests flag. Code coverage requirements differ from the default\n    coverage requirements when using this test level. Executed tests must\n    comprise a minimum of 75% code coverage for each class and trigger in the\n    deployment package. This coverage is computed for each class and trigger\n    individually and is different than the overall coverage percentage.\n\n    - RunLocalTests — All tests in your org are run, except the ones that\n    originate from installed managed and unlocked packages. This test level is\n    the default.\n\n    - RunAllTestsInOrg — All tests in your org are run, including tests of\n    managed packages.\n\n  -o, --target-org=<value>  Login username or alias for the target org.\n\n    Overrides your default org.\n\n  -t, --tests=<value>...\n\n    Apex tests to run when --test-level is RunSpecifiedTests.\n\n    If a test name contains a space, enclose it in double quotes.\n    For multiple test names, use one of the following formats:\n\n    - Repeat the flag for multiple test names: --tests Test1 --tests Test2\n    --tests \"Test With Space\"\n    - Separate the test names with spaces: --tests Test1 Test2 \"Test With Space\"\n\n  -w, --wait=<minutes>\n\n    Number of minutes to wait for the command to complete and display results.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you and returns the job ID. To resume\n    watching the validation, run \"sfdx project deploy resume\". To check the\n    status of the validation, run \"sfdx project deploy report\".\n\n  -x, --manifest=<value>\n\n    Full file path for manifest (package.xml) of components to validate for\n    deployment.\n\n    All child components are included. If you specify this flag, don’t specify\n    --metadata or --source-dir.\n\n  --async  Run the command asynchronously.\n\n    The command immediately returns the job ID and control of the terminal to\n    you. This way, you can continue to use the CLI. To resume watching the\n    validation, run \"sfdx project deploy resume\". To check the status of the\n    validation, run \"sfdx project deploy report\".\n\nCONFIGURATION VARIABLES\n  target-org       Username or alias of the org that all commands run against by\n                   default. (sf only)\n  org-api-version  API version of your project. Default: API version of your Dev\n                   Hub org.\n\nENVIRONMENT VARIABLES\n  SF_TARGET_ORG        Username or alias of your default org. Overrides the\n                       target-org configuration variable.\n  SF_USE_PROGRESS_BAR  Set to false to disable the progress bar when running the\n                       metadata deploy command.\n\nERROR CODES\n  Succeeded (0)          The deploy succeeded.\n  Canceled (1)           The deploy was canceled.\n  Failed (1)             The deploy failed.\n  SucceededPartial (68)  The deploy partially succeeded.\n  InProgress (69)        The deploy is in progress.\n  Pending (69)           The deploy is pending.\n  Canceling (69)         The deploy is being canceled\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_311.txt"}}],["7821d0ae-5c85-41e4-903b-dcca005a7fee",{"pageContent":"\n\nGenerate a Salesforce DX project.\n\nUSAGE\n  $ sfdx project generate -n <value> [--json] [-t standard|empty|analytics]\n    [-d <value>] [-s <value>] [-p <value>] [-x]\n\nFLAGS\n  -d, --output-dir=<value>           [default: .] Directory for saving the\n                                     created files.\n  -n, --name=<value>                 (required) Name of the generated project.\n  -p, --default-package-dir=<value>  [default: force-app] Default package\n                                     directory name.\n  -s, --namespace=<value>            Namespace associated with this project and\n                                     any connected scratch orgs.\n  -t, --template=<option>            [default: standard] Template to use for\n                                     project creation.\n                                     <options: standard|empty|analytics>\n  -x, --manifest                     Generate a manifest (package.xml) for\n                                     change-set based development.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a Salesforce DX project.\n\n  A Salesforce DX project has a specific structure and a configuration file\n  (sfdx-project.json) that identifies the directory as a Salesforce DX project.\n  This command generates the necessary configuration files and directories to\n  get you started.\n\n  By default, the generated sfdx-project.json file sets the sourceApiVersion\n  property to the default API version currently used by Salesforce CLI. To\n  specify a different version, set the apiVersion configuration variable. For\n  example: \"sf config set apiVersion=57.0 --global\".\n\nALIASES\n  $ sfdx force project create\n\nEXAMPLES\n  Generate a project called \"mywork\":\n\n    $ sfdx project generate --name mywork\n\n  Similar to previous example, but generate the files in a directory called\n  \"myapp\":\n\n    $ sfdx project generate --name mywork --default-package-dir myapp\n\n  Similar to prevoius example, but also generate a default package.xml\n  manifest file:\n\n    $ sfdx project generate --name mywork --default-package-dir myapp \\\n      --manifest\n\n  Generate a project with the minimum files and directories:\n\n    $ sfdx project generate --name mywork --template empty\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated project.\n\n    Generates a project directory with this name; any valid directory name is\n    accepted. Also sets the \"name\" property in the sfdx-project.json file to\n    this name.\n\n  -p, --default-package-dir=<value>  Default package directory name.\n\n    Metadata items such as classes and Lightning bundles are placed inside this\n    folder.\n\n  -t, --template=standard|empty|analytics  Template to use for project creation.\n\n    The template determines the sample configuration files and directories that\n    this command generates. For example, the empty template provides these files\n    and directory to get you started.\n\n    - .forceignore\n    - config/project-scratch-def.json\n    - sfdx-project.json\n    - package.json\n    - force-app (basic source directory structure)\n\n    The standard template provides a complete force-app directory structure so\n    you know where to put your source. It also provides additional files and\n    scripts, especially useful when using Salesforce Extensions for VS Code. For\n    example:\n\n    - .gitignore: Use Git for version control.\n    - .prettierrc and .prettierignore: Use Prettier to format your Aura\n    components.\n    - .vscode/extensions.json: When launched, Visual Studio Code, prompts you to\n    install the recommended extensions for your project.\n    - .vscode/launch.json: Configures Replay Debugger.\n    - .vscode/settings.json: Additional configuration settings.\n\n    The analytics template provides similar files and the\n    force-app/main/default/waveTemplates directory.\n\n  -x, --manifest\n\n    Generate a manifest (package.xml) for change-set based development.\n\n    Generates a default manifest (package.xml) for fetching Apex, Visualforce,\n    Lightning components, and static resources.\n\nCOMMANDS\n  project generate manifest  Create a project manifest that lists the metadata\n                             components you want to deploy or retrieve\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_312.txt"}}],["816bddec-dfa1-4324-b771-b1feb8abed06",{"pageContent":"\n\nCreate a project manifest that lists the metadata components you want to deploy or retrieve.\n\nUSAGE\n  $ sfdx project generate manifest [--json] [--api-version <value>] [-m <value>] [-p\n    <value>] [-n <value> | -t pre|post|destroy|package] [-c managed|unlocked\n    --from-org <value>] [-d <value>]\n\nFLAGS\n  -c, --include-packages=<option>...  Package types (managed, unlocked) whose\n                                      metadata is included in the manifest; by\n                                      default, metadata in packages is ignored.\n                                      <options: managed|unlocked>\n  -d, --output-dir=<value>            Directory to save the created manifest.\n  -m, --metadata=<value>...           Names of metadata components to include in\n                                      the manifest.\n  -n, --name=<value>                  Name of a custom manifest file to create.\n  -p, --source-dir=<value>...         Paths to the local source files to include\n                                      in the manifest.\n  -t, --type=<option>                 Type of manifest to create; the type\n                                      determines the name of the created file.\n                                      <options: pre|post|destroy|package>\n  --api-version=<value>               Override the api version used for api\n                                      requests made by this command\n  --from-org=<value>                  Username or alias of the org that contains\n                                      the metadata components from which to\n                                      build a manifest.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a project manifest that lists the metadata components you want to\n  deploy or retrieve.\n\n  Create a manifest from a list of metadata components (--metadata) or from one\n  or more local directories that contain source files (--source-dir). You can\n  specify either of these parameters, not both.\n\n  Use --type to specify the type of manifest you want to create. The resulting\n  manifest files have specific names, such as the standard package.xml or\n  destructiveChanges.xml to delete metadata. Valid values for this parameter,\n  and their respective file names, are:\n\n  * package : package.xml (default)\n  * pre : destructiveChangesPre.xml\n  * post : destructiveChangesPost.xml\n  * destroy : destructiveChanges.xml\n\n  See https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/m\n  eta_deploy_deleting_files.htm for information about these destructive manifest\n  files.\n\n  Use --name to specify a custom name for the generated manifest if the\n  pre-defined ones don’t suit your needs. You can specify either --type or\n  --name, but not both.\n\n  To include multiple metadata components, either set multiple --metadata <name>\n  flags or a single --metadata flag with multiple names separated by spaces.\n  Enclose names that contain spaces in one set of double quotes. The same syntax\n  applies to --include-packages and --source-dir.\n\nALIASES\n  $ sfdx force source manifest create\n\nEXAMPLES\n  Create a manifest for deploying or retrieving all Apex classes and custom\n  objects:\n\n    $ sfdx project generate manifest --metadata ApexClass --metadata \\\n      CustomObject\n\n  Create a manifest for deleting the specified Apex class:\n\n    $ sfdx project generate manifest --metadata ApexClass:MyApexClass --type \\\n      destroy\n\n  Create a manifest for deploying or retrieving all the metadata components in\n  the specified local directory; name the file myNewManifest.xml:\n\n    $ sfdx project generate manifest --source-dir force-app --name \\\n      myNewManifest\n\n  Create a manifest from the metadata components in the specified org and\n  include metadata in any unlocked packages:\n\n    $ sfdx project generate manifest --from-org test@myorg.com \\\n      --include-packages unlocked\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_313.txt"}}],["864aac11-762a-40e5-a927-48474ec65f88",{"pageContent":"\n\nCheck your local project package directories for forceignored files.\n\nUSAGE\n  $ sfdx project list ignored [--json] [-p <value>]\n\nFLAGS\n  -p, --source-dir=<value>  File or directory of files that the command checks\n                            for foreceignored files.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Check your local project package directories for forceignored files.\n\n  When deploying or retrieving metadata between your local project and an org,\n  you can specify the source files you want to exclude with a .forceignore file.\n  The .forceignore file structure mimics the .gitignore structure. Each line in\n  .forceignore specifies a pattern that corresponds to one or more files. The\n  files typically represent metadata components, but can be any files you want\n  to exclude, such as LWC configuration JSON files or tests.\n\nALIASES\n  $ sfdx force source ignored list\n\nEXAMPLES\n  List all the files in all package directories that are ignored:\n\n    $ sfdx project list ignored\n\n  List all the files in a specific directory that are ignored:\n\n    $ sfdx project list ignored --source-dir force-app\n\n  Check if a particular file is ignored:\n\n    $ sfdx project list ignored --source-dir package.xml\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_314.txt"}}],["fc13a7d9-c9b7-4798-8374-2656695b5910",{"pageContent":"\n\nReset local and remote source tracking.\n\nUSAGE\n  $ sfdx project reset tracking -o <value> [--json] [--api-version <value>] [-r\n    <value>] [-p]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -p, --no-prompt           Don't prompt for source tracking override\n                            confirmation.\n  -r, --revision=<value>    SourceMember revision counter number to reset to.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Reset local and remote source tracking.\n\n  WARNING: This command deletes or overwrites all existing source tracking\n  files. Use with extreme caution.\n\n  Resets local and remote source tracking so that Salesforce CLI no longer\n  registers differences between your local files and those in the org. When you\n  next run 'project deploy preview', Salesforce CLI returns no results, even\n  though conflicts might actually exist. Salesforce CLI then resumes tracking\n  new source changes as usual.\n\n  Use the --revision parameter to reset source tracking to a specific revision\n  number of an org source member. To get the revision number, query the\n  SourceMember Tooling API object with the 'data soql' command. For example:\n\n  sfdx data query --query \"SELECT MemberName, MemberType, RevisionCounter FROM\n  SourceMember\" --use-tooling-api\n\nALIASES\n  $ sfdx force source tracking reset\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_315.txt"}}],["7cca69d5-c2d8-4804-943c-eb2f1d0a9ee5",{"pageContent":"\n\nPreview a retrieval to see what will be retrieved from the org, the potential conflicts, and the ignored files.\n\nUSAGE\n  $ sfdx project retrieve preview -o <value> [--json] [-c]\n\nFLAGS\n  -c, --ignore-conflicts    Don't display conflicts in the preview of the\n                            retrieval.\n  -o, --target-org=<value>  (required) Login username or alias for the target\n                            org.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Preview a retrieval to see what will be retrieved from the org, the potential\n  conflicts, and the ignored files.\n\n  You must run this command from within a project.\n\n  The command outputs a table that describes what will happen if you run the\n  \"sfdx project retrieve start\" command. The table lists the metadata components\n  that will be retrieved and deleted. The table also lists the current conflicts\n  between files in your local project and components in the org. Finally, the\n  table lists the files that won't be retrieved because they're included in your\n  .forceignore file.\n\n  If your org allows source tracking, then this command displays potential\n  conflicts between the org and your local project. Some orgs, such as\n  production org, never allow source tracking. Source tracking is enabled by\n  default on scratch and sandbox orgs; you can disable source tracking when you\n  create the orgs by specifying the --no-track-source flag on the \"sfdx org\n  create scratch|sandbox\" commands.\n\nALIASES\n  $ sfdx retrieve metadata preview\n\nEXAMPLES\n  Preview the retrieve of all changes from your default org:\n\n    $ sfdx project retrieve preview\n\n  Preview the retrieve when ignoring any conflicts from an org with alias\n  \"my-scratch\":\n\n    $ sfdx project retrieve preview --ignore-conflicts --target-org \\\n      my-scratch\n\nFLAG DESCRIPTIONS\n  -c, --ignore-conflicts\n\n    Don't display conflicts in the preview of the retrieval.\n\n    This flag applies only to orgs that allow source tracking. It has no effect\n    on orgs that don't allow it, such as production orgs.\n\n  -o, --target-org=<value>  Login username or alias for the target org.\n\n    Overrides your default org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_316.txt"}}],["6546dcdc-ebc0-4506-b42c-472611c1d43f",{"pageContent":"\n\nRetrieve metadata from an org to your local project.\n\nUSAGE\n  $ sfdx project retrieve start -o <value> [--json] [-a <value>] [-c] [-x <value> |\n    -m <value> | -d <value>] [-n <value>] [--single-package -t <value>] [-w\n    <value>] [-z ] [--zip-file-name <value> ]\n\nFLAGS\n  -a, --api-version=<value>          Target API version for the retrieve.\n  -c, --ignore-conflicts             Ignore conflicts and retrieve and save\n                                     files to your local filesystem, even if\n                                     they overwrite your local changes.\n  -d, --source-dir=<value>...        File paths for source to retrieve from the\n                                     org.\n  -m, --metadata=<value>...          Metadata component names to retrieve.\n  -n, --package-name=<value>...      Package names to retrieve.\n  -o, --target-org=<value>           (required) Login username or alias for the\n                                     target org.\n  -t, --target-metadata-dir=<value>  Directory that will contain the retrieved\n                                     metadata format files or ZIP.\n  -w, --wait=<value>                 [default: 33 minutes] Number of minutes to\n                                     wait for the command to complete and\n                                     display results to the terminal window.\n  -x, --manifest=<value>             File path for the manifest (package.xml)\n                                     that specifies the components to retrieve.\n  -z, --unzip                        Extract all files from the retrieved zip\n                                     file.\n  --single-package                   Indicates that the zip file points to a\n                                     directory structure for a single package.\n  --zip-file-name=<value>            File name to use for the retrieved zip\n                                     file.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Retrieve metadata from an org to your local project.\n\n  You must run this command from within a project.\n\n  Metadata components are retrieved in source format by default. Retrieve them\n  in metadata format by specifying the --target-metadata-dir flag, which\n  retrieves the components into a ZIP file in the specified directory.\n\n  If your org allows source tracking, then this command tracks the changes in\n  your source. Some orgs, such as production org, never allow source tracking.\n  Source tracking is enabled by default on scratch and sandbox orgs; you can\n  disable source tracking when you create the orgs by specifying the\n  --no-track-source flag on the \"sfdx org create scratch|sandbox\" commands.\n\n  To retrieve multiple metadata components, either use multiple --metadata\n  <name> flags or use a single --metadata flag with multiple names separated by\n  spaces. Enclose names that contain spaces in one set of double quotes. The\n  same syntax applies to --manifest and --source-dir.\n\nALIASES\n  $ sfdx retrieve metadata\n\nEXAMPLES\n  Retrieve remote changes from your default org:\n\n    $ sfdx project retrieve start\n\n  Retrieve the source files in a directory from an org with alias\n  \"my-scratch\":\n\n    $ sfdx project retrieve start --source-dir path/to/source --target-org \\\n      my-scratch\n\n  Retrieve a specific Apex class and the objects whose source is in a\n  directory (both examples are equivalent):\n\n    $ sfdx project retrieve start --source-dir \\\n      path/to/apex/classes/MyClass.cls path/to/source/objects\n    $ sfdx project retrieve start --source-dir \\\n      path/to/apex/classes/MyClass.cls --source-dir path/to/source/objects\n\n  Retrieve all Apex classes:\n\n    $ sfdx project retrieve start --metadata ApexClass\n\n  Retrieve a specific Apex class:\n\n    $ sfdx project retrieve start --metadata ApexClass:MyApexClass\n\n  Retrieve all custom objects and Apex classes (both examples are equivalent):\n\n    $ sfdx project retrieve start --metadata CustomObject ApexClass\n    $ sfdx project retrieve start --metadata CustomObject --metadata \\\n      ApexClass\n\n  Retrieve all metadata components listed in a manifest:\n\n    $ sfdx project retrieve start --manifest path/to/package.xml\n\n  Retrieve metadata from a package:\n\n    $ sfdx project retrieve start --package-name MyPackageName\n\n  Retrieve metadata from multiple packages, one of which has a space in its\n  name (both examples are equivalent):\n\n    $ sfdx project retrieve start --package-name Package1 \"PackageName With \\\n      Spaces\" Package3\n    $ sfdx project retrieve start --package-name Package1 --package-name \\\n      \"PackageName With Spaces\" --package-name Package3\n\n  Retrieve the metadata components listed in the force-app directory, but\n  retrieve them in metadata format into a ZIP file in the \"output\" directory:\n\n    $ sfdx project retrieve start --source-dir force-app \\\n      --target-metadata-dir output\n\n  Retrieve in metadata format and automatically extract the contents into the\n  \"output\" directory:\n\n    $ sfdx project retrieve start --source-dir force-app \\\n      --target-metadata-dir output --unzip\n\nFLAG DESCRIPTIONS\n  -a, --api-version=<value>  Target API version for the retrieve.\n\n    Use this flag to override the default API version, which is the latest\n    version supported the CLI, with the API version in your package.xml file.\n\n  -c, --ignore-conflicts\n\n    Ignore conflicts and retrieve and save files to your local filesystem, even\n    if they overwrite your local changes.\n\n    This flag applies only to orgs that allow source tracking. It has no effect\n    on orgs that don't allow it, such as production orgs.\n\n  -d, --source-dir=<value>...  File paths for source to retrieve from the org.\n\n    The supplied paths can be to a single file (in which case the operation is\n    applied to only one file) or to a folder (in which case the operation is\n    applied to all source files in the directory and its subdirectories).\n\n  -o, --target-org=<value>  Login username or alias for the target org.\n\n    Overrides your default org.\n\n  -w, --wait=<value>\n\n    Number of minutes to wait for the command to complete and display results to\n    the terminal window.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you.\n\n  -x, --manifest=<value>\n\n    File path for the manifest (package.xml) that specifies the components to\n    retrieve.\n\n    If you specify this parameter, don’t specify --metadata or --source-dir.\n\nCONFIGURATION VARIABLES\n  target-org       Username or alias of the org that all commands run against by\n                   default. (sf only)\n  org-api-version  API version of your project. Default: API version of your Dev\n                   Hub org.\n\nENVIRONMENT VARIABLES\n  SF_TARGET_ORG        Username or alias of your default org. Overrides the\n                       target-org configuration variable.\n  SF_USE_PROGRESS_BAR  Set to false to disable the progress bar when running the\n                       metadata deploy command\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_317.txt"}}],["3f3ca0aa-8a71-4369-91ab-3deca9edd9de",{"pageContent":"\n\nRetrieve metadata from an org to your local project.\n\nUSAGE\n  $ sfdx project retrieve start -o <value> [--json] [-a <value>] [-c] [-x <value> |\n    -m <value> | -d <value>] [-n <value>] [--single-package -t <value>] [-w\n    <value>] [-z ] [--zip-file-name <value> ]\n\nFLAGS\n  -a, --api-version=<value>          Target API version for the retrieve.\n  -c, --ignore-conflicts             Ignore conflicts and retrieve and save\n                                     files to your local filesystem, even if\n                                     they overwrite your local changes.\n  -d, --source-dir=<value>...        File paths for source to retrieve from the\n                                     org.\n  -m, --metadata=<value>...          Metadata component names to retrieve.\n  -n, --package-name=<value>...      Package names to retrieve.\n  -o, --target-org=<value>           (required) Login username or alias for the\n                                     target org.\n  -t, --target-metadata-dir=<value>  Directory that will contain the retrieved\n                                     metadata format files or ZIP.\n  -w, --wait=<value>                 [default: 33 minutes] Number of minutes to\n                                     wait for the command to complete and\n                                     display results to the terminal window.\n  -x, --manifest=<value>             File path for the manifest (package.xml)\n                                     that specifies the components to retrieve.\n  -z, --unzip                        Extract all files from the retrieved zip\n                                     file.\n  --single-package                   Indicates that the zip file points to a\n                                     directory structure for a single package.\n  --zip-file-name=<value>            File name to use for the retrieved zip\n                                     file.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Retrieve metadata from an org to your local project.\n\n  You must run this command from within a project.\n\n  Metadata components are retrieved in source format by default. Retrieve them\n  in metadata format by specifying the --target-metadata-dir flag, which\n  retrieves the components into a ZIP file in the specified directory.\n\n  If your org allows source tracking, then this command tracks the changes in\n  your source. Some orgs, such as production org, never allow source tracking.\n  Source tracking is enabled by default on scratch and sandbox orgs; you can\n  disable source tracking when you create the orgs by specifying the\n  --no-track-source flag on the \"sfdx org create scratch|sandbox\" commands.\n\n  To retrieve multiple metadata components, either use multiple --metadata\n  <name> flags or use a single --metadata flag with multiple names separated by\n  spaces. Enclose names that contain spaces in one set of double quotes. The\n  same syntax applies to --manifest and --source-dir.\n\nALIASES\n  $ sfdx retrieve metadata\n\nEXAMPLES\n  Retrieve remote changes from your default org:\n\n    $ sfdx project retrieve start\n\n  Retrieve the source files in a directory from an org with alias\n  \"my-scratch\":\n\n    $ sfdx project retrieve start --source-dir path/to/source --target-org \\\n      my-scratch\n\n  Retrieve a specific Apex class and the objects whose source is in a\n  directory (both examples are equivalent):\n\n    $ sfdx project retrieve start --source-dir \\\n      path/to/apex/classes/MyClass.cls path/to/source/objects\n    $ sfdx project retrieve start --source-dir \\\n      path/to/apex/classes/MyClass.cls --source-dir path/to/source/objects\n\n  Retrieve all Apex classes:\n\n    $ sfdx project retrieve start --metadata ApexClass\n\n  Retrieve a specific Apex class:\n\n    $ sfdx project retrieve start --metadata ApexClass:MyApexClass\n\n  Retrieve all custom objects and Apex classes (both examples are equivalent):\n\n    $ sfdx project retrieve start --metadata CustomObject ApexClass\n    $ sfdx project retrieve start --metadata CustomObject --metadata \\\n      ApexClass\n\n  Retrieve all metadata components listed in a manifest:\n\n    $ sfdx project retrieve start --manifest path/to/package.xml\n\n  Retrieve metadata from a package:\n\n    $ sfdx project retrieve start --package-name MyPackageName\n\n  Retrieve metadata from multiple packages, one of which has a space in its\n  name (both examples are equivalent):\n\n    $ sfdx project retrieve start --package-name Package1 \"PackageName With \\\n      Spaces\" Package3\n    $ sfdx project retrieve start --package-name Package1 --package-name \\\n      \"PackageName With Spaces\" --package-name Package3\n\n  Retrieve the metadata components listed in the force-app directory, but\n  retrieve them in metadata format into a ZIP file in the \"output\" directory:\n\n    $ sfdx project retrieve start --source-dir force-app \\\n      --target-metadata-dir output\n\n  Retrieve in metadata format and automatically extract the contents into the\n  \"output\" directory:\n\n    $ sfdx project retrieve start --source-dir force-app \\\n      --target-metadata-dir output --unzip\n\nFLAG DESCRIPTIONS\n  -a, --api-version=<value>  Target API version for the retrieve.\n\n    Use this flag to override the default API version, which is the latest\n    version supported the CLI, with the API version in your package.xml file.\n\n  -c, --ignore-conflicts\n\n    Ignore conflicts and retrieve and save files to your local filesystem, even\n    if they overwrite your local changes.\n\n    This flag applies only to orgs that allow source tracking. It has no effect\n    on orgs that don't allow it, such as production orgs.\n\n  -d, --source-dir=<value>...  File paths for source to retrieve from the org.\n\n    The supplied paths can be to a single file (in which case the operation is\n    applied to only one file) or to a folder (in which case the operation is\n    applied to all source files in the directory and its subdirectories).\n\n  -o, --target-org=<value>  Login username or alias for the target org.\n\n    Overrides your default org.\n\n  -w, --wait=<value>\n\n    Number of minutes to wait for the command to complete and display results to\n    the terminal window.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you.\n\n  -x, --manifest=<value>\n\n    File path for the manifest (package.xml) that specifies the components to\n    retrieve.\n\n    If you specify this parameter, don’t specify --metadata or --source-dir.\n\nCONFIGURATION VARIABLES\n  target-org       Username or alias of the org that all commands run against by\n                   default. (sf only)\n  org-api-version  API version of your project. Default: API version of your Dev\n                   Hub org.\n\nENVIRONMENT VARIABLES\n  SF_TARGET_ORG        Username or alias of your default org. Overrides the\n                       target-org configuration variable.\n  SF_USE_PROGRESS_BAR  Set to false to disable the progress bar when running the\n                       metadata deploy command\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_318.txt"}}],["dc3c65fa-bd49-46fd-9f17-0cd3429bb788",{"pageContent":"\n\nPreview a retrieval to see what will be retrieved from the org, the potential conflicts, and the ignored files.\n\nUSAGE\n  $ sfdx project retrieve preview -o <value> [--json] [-c]\n\nFLAGS\n  -c, --ignore-conflicts    Don't display conflicts in the preview of the\n                            retrieval.\n  -o, --target-org=<value>  (required) Login username or alias for the target\n                            org.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Preview a retrieval to see what will be retrieved from the org, the potential\n  conflicts, and the ignored files.\n\n  You must run this command from within a project.\n\n  The command outputs a table that describes what will happen if you run the\n  \"sfdx project retrieve start\" command. The table lists the metadata components\n  that will be retrieved and deleted. The table also lists the current conflicts\n  between files in your local project and components in the org. Finally, the\n  table lists the files that won't be retrieved because they're included in your\n  .forceignore file.\n\n  If your org allows source tracking, then this command displays potential\n  conflicts between the org and your local project. Some orgs, such as\n  production org, never allow source tracking. Source tracking is enabled by\n  default on scratch and sandbox orgs; you can disable source tracking when you\n  create the orgs by specifying the --no-track-source flag on the \"sfdx org\n  create scratch|sandbox\" commands.\n\nALIASES\n  $ sfdx retrieve metadata preview\n\nEXAMPLES\n  Preview the retrieve of all changes from your default org:\n\n    $ sfdx project retrieve preview\n\n  Preview the retrieve when ignoring any conflicts from an org with alias\n  \"my-scratch\":\n\n    $ sfdx project retrieve preview --ignore-conflicts --target-org \\\n      my-scratch\n\nFLAG DESCRIPTIONS\n  -c, --ignore-conflicts\n\n    Don't display conflicts in the preview of the retrieval.\n\n    This flag applies only to orgs that allow source tracking. It has no effect\n    on orgs that don't allow it, such as production orgs.\n\n  -o, --target-org=<value>  Login username or alias for the target org.\n\n    Overrides your default org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_319.txt"}}],["12c94439-4a63-4bb5-8106-536c6618c707",{"pageContent":"\n\nRetrieve the list of templates available in your org.\n\nUSAGE\n  $ sfdx community list template -o <value> [--json] [--api-version <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Retrieve the list of templates available in your org.\n\n  See 'Which Experience Cloud Template Should I Use?' (https://help.salesforce.c\n  om/s/articleView?id=sf.siteforce_commtemp_intro.htm&type=5) in Salesforce Help\n  for more information about the different template types available for\n  Experience Cloud.\n\nALIASES\n  $ sfdx force community template list\n\nEXAMPLES\n  Retrieve the template list from an org with alias my-scratch-org:\n\n    $ sfdx community list template --target-org my-scratch-org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_32.txt"}}],["684c085d-52df-424e-a04f-2bd1a7b7599b",{"pageContent":"\n\nadd custom rules to Salesforce Code Analyzer's registry\n\nUSAGE\n  $ sfdx scanner rule add -l <string> -p <array> [--json] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -l, --language=<value>\n      (required) language that the custom rules are evaluated against\n\n  -p, --path=<value>\n      (required) one or more paths (such as a directory or JAR file) to custom\n      rule definitions\n\n  --json\n      format output as json\n\n  --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA\n  L)\n      [default: warn] logging level for this command invocation\n\nDESCRIPTION\n  add custom rules to Salesforce Code Analyzer's registry\n\nEXAMPLES\n  Bundle custom PMD rules in JAR files. Follow PMD conventions, such as defining the custom rules in XML files under a `/category/` directory.\n  See PMD's documentation for more information on writing rules.\n  This example shows how to specify two JAR files directly.\n  \t$ sfdx scanner:rule:add --language apex --path \"/Users/me/rules/Jar1.jar,/Users/me/rules/Jar2.jar\"\n  \t\tSuccessfully added rules for apex.\n  \t\t2 path(s) added:\n  \t\t/Users/me/rules/Jar1.jar,/Users/me/rules/Jar2.jar\n  This example shows how to specify a directory containing one or more JARs, all of which are added to the registry.\n  \t$ sfdx scanner:rule:add --language apex --path \"/Users/me/rules\"\n  \t\tSuccessfully added rules for apex\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_320.txt"}}],["d1714269-db2b-474f-a042-4e5f5a6af55f",{"pageContent":"\n\nprovide detailed information about a rule\n\nUSAGE\n  $ sfdx scanner rule describe -n <string> [--verbose] [--json] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -n, --rulename=<value>\n      (required) the name of the rule\n\n  --json\n      format output as json\n\n  --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA\n  L)\n      [default: warn] logging level for this command invocation\n\n  --verbose\n      emit additional command output to stdout\n\nDESCRIPTION\n  provide detailed information about a rule\n\nEXAMPLES\n  $ sfdx scanner:rule:describe --rulename ExampleRule\n  \tname:        AvoidWithStatement\n  \tcategories:   Best Practices\n  \trulesets:    Controversial Ecmascript\n  \tlanguages:   javascript\n  \tdescription: Avoid using with - it's bad news\n  \tmessage:     Avoid using with - it's bad news\n\t\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_321.txt"}}],["a18a8f20-050e-46e5-93f0-ac2ebb8055d9",{"pageContent":"\n\nlist basic information about all rules matching provided criteria\n\nUSAGE\n  $ sfdx scanner rule list [-c <array>] [-r <array>] [-l <array>] [-e <array>]\n    [--verbose] [--json] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -c, --category=<value>\n      select rules by category\n\n  -e, --engine=<value>\n      select rules by engine\n\n  -l, --language=<value>\n      select rules by language\n\n  -r, --ruleset=<value>\n      [deprecated] select rules by ruleset\n\n  --json\n      format output as json\n\n  --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA\n  L)\n      [default: warn] logging level for this command invocation\n\n  --verbose\n      emit additional command output to stdout\n\nDESCRIPTION\n  list basic information about all rules matching provided criteria\n\nEXAMPLES\n  This example invokes the command without filter criteria, which returns all rules.\n  \t$ sfdx scanner:rule:list\n  This example returns all rules for Apex OR Javascript. Values supplied to a single filter are handled with a logical OR.\n  \t$ sfdx scanner:rule:list --language apex,javascript\n  This example returns all rules except those in the Design or Best Practices categories. Exclude categories by specifying the negation operator and enclosing the values in single quotes.\n  \t$ sfdx scanner:rule:list --category '!Design,!Best Practices'\n  This example returns all rules that target Apex OR Javascript, AND are members of the Braces OR Security rulesets.\n  The different filters are combined with a logical AND.\n  \t$ sfdx scanner:rule:list --language apex,javascript --ruleset Braces,Security\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_322.txt"}}],["f5722832-60d9-4908-bca4-81a62b62c2c1",{"pageContent":"\n\nremove custom rules from the registry of available rules\n\nUSAGE\n  $ sfdx scanner rule remove [-f] [-p <array>] [--verbose] [--json] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -f, --force\n      bypass the confirmation prompt and immediately remove the rules\n\n  -p, --path=<value>\n      one or more paths to remove\n\n  --json\n      format output as json\n\n  --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA\n  L)\n      [default: warn] logging level for this command invocation\n\n  --verbose\n      emit additional command output to stdout\n\nDESCRIPTION\n  remove custom rules from the registry of available rules\n\nEXAMPLES\n  This example runs the command without arguments to see a list of registered custom paths.\n  \t$ sfdx scanner:rule:remove\n  This example uses the --path parameter to deregister the rules defined in somerules.jar and any JARs/XMLs contained in the rules folder.\n  \t$ sfdx scanner:rule:remove --path \"~/path/to/somerules.jar,~/path/to/folder/containing/rules\"\n  This example uses the --force flag to bypass the confirmation prompt, removing all rules defined in somerules.jar.\n  By default, a list of all rules that will be unregistered is displayed, and the action must be confirmed. To bypass that confirmation, use the --force flag.\n  \t$ sfdx scanner:rule:remove --force --path \"~/path/to/somerules.jar\"\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_323.txt"}}],["95a7f9d8-2805-4bc1-8785-793a61f854ab",{"pageContent":"\n\nscan a codebase with a selection of rules\n\nUSAGE\n  $ sfdx scanner run -t <array> [-c <array>] [-f\n    csv|html|json|junit|sarif|table|xml] [-o <string>] [-s <integer> | --json]\n    [--normalize-severity] [-p <array>] [-r <array>] [-e <array>] [--tsconfig\n    <string>] [--eslintconfig <string>] [--pmdconfig <string>] [--env <string>]\n    [--verbose-violations] [--verbose] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -c, --category=<value>\n      one or more categories of rules to run\n\n  -e, --engine=<value>\n      specify which engines to run\n\n  -f, --format=(csv|html|json|junit|sarif|table|xml)\n      specify results output format\n\n  -o, --outfile=<value>\n      write output to a file\n\n  -p, --projectdir=<value>\n      provide root directory of project\n\n  -r, --ruleset=<value>\n      [deprecated] rulesets to run\n\n  -s, --severity-threshold=<value>\n      throw an error when a violation threshold is reached, the\n      --normalize-severity is invoked, and severity levels are reset to the\n      baseline\n\n  -t, --target=<value>\n      (required) source code location\n\n  --env=<value>\n      [deprecated] override ESLint's default environment variables, in\n      JSON-formatted string\n\n  --eslintconfig=<value>\n      specify the location of eslintrc config to customize eslint engine\n\n  --json\n      format output as json\n\n  --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA\n  L)\n      [default: warn] logging level for this command invocation\n\n  --normalize-severity\n      return normalized severity 1 (high), 2 (moderate), and 3 (low), and the\n      engine-specific severity\n\n  --pmdconfig=<value>\n      specify location of PMD rule reference XML file to customize rule selection\n\n  --tsconfig=<value>\n      location of tsconfig.json file\n\n  --verbose\n      emit additional command output to stdout\n\n  --verbose-violations\n      return retire-js violation message details\n\nDESCRIPTION\n  scan a codebase with a selection of rules\n\nEXAMPLES\n  This example evaluates all rules against somefile.js.\n  Invoking code analyzer without specifying any rules causes all rules to be run.\n  \t$ sfdx scanner:run --format xml --target \"somefile.js\"\n  This example evaluates all rules in the Design and Best Practices categories.\n  When you specify multiple categories or rulesets, the results are combined with a logical OR.\n  \t$ sfdx scanner:run --format xml --target \"somefile.js\" --\n  This example evaluates all rules except those in the Design or Best Practices categories.\n  Exclude categories by specifying the negation operator and enclosing the values in single quotes.\n  \t$ sfdx scanner:run --format xml --target \"somefile.js\" --category '!Design,!Best Practices'\n  Wrap globs in quotes. These examples evaluate rules against all .js files in the current directory, except for IgnoreMe.js.\n  Unix example:\n  \t$ sfdx scanner:run --target './**/*.js,!./**/IgnoreMe.js' ...\n  Windows example:\n  \t$ sfdx scanner:run --target \".\\**\\*.js,!.\\**\\IgnoreMe.js\" ...\n  This example scans the project contained in '/my-project' if the current working directory is another directory.\n  Specify tsconfig.json if the current working directory does not contain the tsconfig.json that corresponds to the TypeScript files being scanned.\n  \t$ sfdx scanner:run --target \"/my-project/**/*.ts\" --tsconfig \"/my-project/tsconfig.json\"\n  This example evaluates rules against somefile.js, including Jasmine in the environment variables.\n  Uses --env to override the default ESLint environment variables to add frameworks.\n  \t$ sfdx scanner:run --target \"somefile.js\" --env '{\"jasmine\": true}'\n  This example evaluates rules aginst somefile.js using eslint-lwc and pmd engines.\n  Use --engine to include or exclude engines. Any engine listed will be run, regardless of its current 'disabled' attribute.\n  \t$ sfdx scanner:run --target \"somefile.js\" --engine \"eslint-lwc,pmd\"\n  This example executes CPD engine against known file extensions in \"/some/dir\". CPD helps detect blocks of code duplication in selected languages.\n  Use --engine to invoke engines that are not enabled by default.\n  \t$ sfdx scanner:run --target \"/some/dir\" --engine cpd\n  This example executes rules defined in pmd_rule_ref.xml against the files in 'src'.\n  To use PMD with your own rule reference file, use --pmdconfig. Note that rule filters are not applied.\n  \t$ sfdx scanner:run --target \"src\" --pmdconfig \"pmd_rule_ref.xml\"\n  This example uses a custom config to scan the files in 'src'.\n  To use ESLint with your own .eslintrc.json file, use --eslintconfig. Make sure that the directory you run the command from has all the NPM dependencies installed.\n  \t$ sfdx scanner:run --target \"src\" --eslintconfig \"/home/my/setup/.eslintrc.json\"\n  This example uses --normalize-severity to output normalized severity and engine-specific severity across all engines. Normalized severity is: 1 (high), 2 (moderate), and 3 (low).\n  \t$ sfdx scanner:run --target \"/some-project/\" --format csv --normalize-severity\n  This example uses --severity-threshold to throw a non-zero exit code when rule violations of normalized severity 2 or greater are found. If any violations with the specified severity (or greater) are found, the exit code equals the severity of the most severe violation.\n  \t$ sfdx scanner:run --target \"/some-project/\" --severity-threshold 2\n  The paths specified for --projectdir must contain all files specified through --target cumulatively.\n  \t$ sfdx scanner:run --target \"./myproject/main/default/classes/*.cls\" --projectdir \"./myproject/\"\n  \t$ sfdx scanner:run --target \"./**/*.cls\" --projectdir \"./\"\n  \t$ sfdx scanner:run --target \"./dir1/file1.cls,./dir2/file2.cls\" --projectdir \"./dir1/,./dir2/\"\n  This example fails because the set of files included in --target is larger than that contained in --projectdir:\n  \t$ sfdx scanner:run --target \"./**/*.cls\" --projectdir \"./myproject/\"\n\nCOMMANDS\n  scanner run dfa  scan codebase with all DFA rules\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_324.txt"}}],["8b6a6331-61f6-4cdc-93a7-ffa26d1f0416",{"pageContent":"\n\nscan codebase with all DFA rules\n\nUSAGE\n  $ sfdx scanner run dfa -t <array> [-c <array>] [-f\n    csv|html|json|junit|sarif|table|xml] [-o <string>] [-s <integer> | --json]\n    [--normalize-severity] [-p <array>] [--with-pilot] [--rule-thread-count\n    <integer>] [--rule-thread-timeout <integer>]\n    [--rule-disable-warning-violation] [--sfgejvmargs <string>] [--pathexplimit\n    <integer>] [--verbose] [--loglevel\n    trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nFLAGS\n  -c, --category=<value>\n      one or more categories of rules to run\n\n  -f, --format=(csv|html|json|junit|sarif|table|xml)\n      specify results output format\n\n  -o, --outfile=<value>\n      write output to a file\n\n  -p, --projectdir=<value>\n      provide root directory of project\n\n  -s, --severity-threshold=<value>\n      throw an error when a violation threshold is reached, the\n      --normalize-severity is invoked, and severity levels are reset to the\n      baseline\n\n  -t, --target=<value>\n      (required) return location of source code\n\n  --json\n      format output as json\n\n  --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA\n  L)\n      [default: warn] logging level for this command invocation\n\n  --normalize-severity\n      return normalized severity 1 (high), 2 (moderate), and 3 (low), and the\n      engine-specific severity\n\n  --pathexplimit=<value>\n      specify a path expansion  upper boundary to limit the complexity of code\n      that Graph Engine analyzes. Alternatively, set the value using environment\n      variable `SFGE_PATH_EXPANSION_LIMIT`\n\n  --rule-disable-warning-violation\n      disable warning violations from Salesforce Graph Engine. Alternatively, set\n      value using environment variable `SFGE_RULE_DISABLE_WARNING_VIOLATION`\n\n  --rule-thread-count=<value>\n      specify number of threads that evaluate DFA rules. Alternatively, set value\n      using environment variable `SFGE_RULE_THREAD_COUNT`. Default is 4\n\n  --rule-thread-timeout=<value>\n      specify timeout for individual rule threads in milliseconds. Alternatively,\n      set the timeout value using environment variable `SFGE_RULE_THREAD_TIMEOUT`.\n      Default: 90000 ms\n\n  --sfgejvmargs=<value>\n      specify Java Virtual Machine (JVM) arguments to optimize Salesforce Graph\n      Engine execution to your system (optional)\n\n  --verbose\n      emit additional command output to stdout\n\n  --with-pilot\n      allow pilot rules to execute\n\nDESCRIPTION\n  scan codebase with all DFA rules\n\nEXAMPLES\n  The paths specified for --projectdir must contain all files specified through --target cumulatively.\n  \t$ sfdx scanner:run:dfa --target \"./myproject/main/default/classes/*.cls\" --projectdir \"./myproject/\"\n  \t$ sfdx scanner:run:dfa --target \"./**/*.cls\" --projectdir \"./\"\n  \t$ sfdx scanner:run:dfa --target \"./dir1/file1.cls,./dir2/file2.cls\" --projectdir \"./dir1/,./dir2/\"\n  This example fails because the set of files included in --target is larger than that contained in --projectdir:\n  \t$ sfdx scanner:run:dfa --target \"./**/*.cls\" --projectdir \"./myproject/\"\n  Globs must be wrapped in quotes, as in these Windows and Unix examples, which evaluate rules against all .cls files in the current directory and subdirectories except for IgnoreMe.cls:\n  Unix example:\n  \t$ sfdx scanner:run:dfa --target \"./**/*.cls,!./**/IgnoreMe.cls\" ...\n  Windows example:\n  \t$ sfdx scanner:run:dfa --target \".\\**\\*.cls,!.\\**\\IgnoreMe.cls\" ...\n  You can target individual methods within a file with a suffix hash (#) on the file's path, and with a semi-colon-delimited list of method names. This syntax is incompatible with globs and directories. This example evaluates rules against all methods named Method1 or Method2 in File1.cls, and all methods named Method3 in File2.cls:\n  \t$ sfdx scanner:run:dfa --target \"./File1.cls#Method1;Method2,./File2.cls#Method3\" ...\n  Use --normalize-severity to output a normalized severity across all engines, in addition to the engine-specific severity. Normalized severity is 1 (high), 2 (moderate), and 3 (low):\n  \t$ sfdx scanner:run:dfa --target \"./some-project/\" --projectdir \"./some-project/\" --format csv --normalize-severity\n  Use --severity-threshold to throw a non-zero exit code when rule violations of a specific normalized severity or greater are found. If there are any rule violations with a severity of 2 or 1, the exit code is equal to the severity of the most severe violation:\n  \t$ sfdx scanner:run:dfa --target \"./some-project/\" --projectdir \"./some-project/\" --severity-threshold 2\n  use --rule-thread-count to allow more (or fewer) entrypoints to be evaluated concurrently:\n  \t$ sfdx scanner:run:dfa --rule-thread-count 6 ...\n  Use --rule-thread-timeout to increase or decrease the maximum runtime for a single entrypoint evaluation. This increases the timeout from the 15-minute default to 150 minutes:\n  \t$ sfdx scanner:run:dfa --rule-thread-timeout 9000000 ...\n  Use --sfgejvmargs to pass Java Virtual Machine args to override system defaults while executing Salesforce Graph Engine's rules.\n  The example overrides the system's default heap space allocation to 8 GB and decreases chances of encountering OutOfMemory error.\n  \t$ sfdx scanner:run:dfa --sfgejvmargs \"-Xmx8g\" ...\n  Use --with-pilot to allow execution of pilot rules:\n  This example allows pilot rules in the \"Performance\" category to execute.\n  \t$ sfdx scanner:run:dfa --category 'Performance' --with-pilot ..\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_325.txt"}}],["259aaa5f-33ff-4b20-a600-f9300cd53e24",{"pageContent":"\n\nThis command is in beta.\n\nGenerate metadata source files for a new custom field on a specified object.\n\nUSAGE\n  $ sfdx schema generate field -l <value> [-o <value>]\n\nFLAGS\n  -l, --label=<value>   (required) The field's label.\n  -o, --object=<value>  The directory that contains the object's source files.\n\nDESCRIPTION\n  Generate metadata source files for a new custom field on a specified object.\n\n  This command is interactive and must be run in a Salesforce DX project\n  directory. You're required to specify the field's label with the \"--label\"\n  flag. The command uses this label to provide intelligent suggestions for other\n  field properties, such as its API name.\n\n  You can generate a custom field on either a standard object, such as Account,\n  or a custom object. In both cases, the source files for the object must\n  already exist in your local project before you run this command. If you create\n  a relationship field, the source files for the parent object must also exist\n  in your local directory.  Use the command \"sf metadata retrieve -m\n  CustomObject:<object>\" to retrieve source files for both standard and custom\n  objects from your org.  To create a custom object, run the \"sf generate\n  metadata sobject\" command or use the Object Manager UI in your Salesforce org.\n\nALIASES\n  $ sfdx generate metadata field\n\nEXAMPLES\n  Create a field with the specified label; the command prompts you for the\n  object:\n\n    $ sfdx schema generate field --label \"My Field\"\n\n  Specify the local path to the object's folder:\n\n    $ sfdx schema generate field --label \"My Field\" --object \\\n      force-app/main/default/objects/MyObject__c\n\nFLAG DESCRIPTIONS\n  -o, --object=<value>  The directory that contains the object's source files.\n\n    The object source files in your local project are grouped in a directoy with\n    the same name as the object. Custom object names always end in \"__c\". An\n    example of the object directory for the Account standard object is\n    \"force-app/main/default/objects/Account\" An example custom object directory\n    is \"force-app/main/default/objects/MyObject__c\"\n\n    If you don't specify this flag, the command prompts you to choose from your\n    local objects\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_326.txt"}}],["ff049b87-6d50-4a8d-a16e-070ba4f00630",{"pageContent":"\n\nThis command is in beta.\n\nGenerate metadata source files for a new platform event.\n\nUSAGE\n  $ sfdx schema generate platformevent -l <value>\n\nFLAGS\n  -l, --label=<value>  (required) The platform event's label.\n\nDESCRIPTION\n  Generate metadata source files for a new platform event.\n\n  This command is interactive and must be run in a Salesforce DX project\n  directory. You're required to specify the event's label with the \"--label\"\n  flag. The command uses this label to provide intelligent suggestions for other\n  event properties, such as its API name.\n\nALIASES\n  $ sfdx generate metadata platformevent\n\nEXAMPLES\n  Create a platform event with the specified label:\n\n    $ sfdx schema generate platformevent --label \"My Platform Event\"\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_327.txt"}}],["958adb34-bf90-4f0c-9a2d-2cb3aaf5d17c",{"pageContent":"\n\nThis command is in beta.\n\nGenerate metadata source files for a new custom object.\n\nUSAGE\n  $ sfdx schema generate sobject -l <value> [-f]\n\nFLAGS\n  -f, --use-default-features  Enable all optional features without prompting.\n  -l, --label=<value>         (required) The custom object's label.\n\nDESCRIPTION\n  Generate metadata source files for a new custom object.\n\n  This command is interactive and must be run in a Salesforce DX project\n  directory. You're required to specify the object's label with the \"--label\"\n  flag. The command uses this label to provide intelligent suggestions for other\n  object properties, such as its API name and plural label.\n\n  All Salesforce objects are required to have a Name field, so this command also\n  prompts you for the label and type of the Name field. Run the \"sf metadata\n  generate field\" command to create additional fields for the object.\n\n  To reduce the number of prompts, use the \"--use-default-features\" flag to\n  automatically enable some features, such as reporting and search on the\n  object.\n\nALIASES\n  $ sfdx generate metadata sobject\n\nEXAMPLES\n  Create a custom object with the specified label and be prompted for\n  additional information:\n\n    $ sfdx schema generate sobject --label \"My Object\"\n\n  Create a custom object and enable optional features without prompting:\n\n    $ sfdx schema generate sobject --label \"My Object\" \\\n      --use-default-features\n\nFLAG DESCRIPTIONS\n  -f, --use-default-features  Enable all optional features without prompting.\n\n    Enables these features:\n\n    * Search: Allows users to find the custom object's records when they search,\n    including SOSL.\n    * Feeds: Enables feed tracking.\n    * Reports: Allows reporting of the data in the custom object records.\n    * History: Enables object history tracking.\n    * Activities: Allows users to associate tasks and scheduled calendar events\n    related to the custom object records.\n    * Bulk API: With Sharing and Streaming API, classifies the custom object as\n    an Enterprise Application object.\n    * Sharing: With Bulk API and Streaming API, classifies the custom object as\n    an Enterprise Application object.\n    * Streaming API: With Bulk API and Sharing, classifies the custom object as\n    an Enterprise Application object\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_328.txt"}}],["375c693b-bfe5-4597-8de9-6fedbf30647c",{"pageContent":"\n\nThis command is in beta.\n\nGenerate the metadata source files for a new custom tab on a custom object.\n\nUSAGE\n  $ sfdx schema generate tab -o <value> -d <value> -i <value> [--json]\n\nFLAGS\n  -d, --directory=<value>  (required) Path to a \"tabs\" directory that will\n                           contain the source files for your new tab.\n  -i, --icon=<value>       (required) [default: 1] Number from 1 to 100 that\n                           specifies the color scheme and icon for the custom\n                           tab.\n  -o, --object=<value>     (required) API name of the custom object you're\n                           generating a tab for.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate the metadata source files for a new custom tab on a custom object.\n\n  Custom tabs let you display custom object data or other web content in\n  Salesforce. Custom tabs appear in Salesforce as an item in the app’s\n  navigation bar and in the App Launcher.\n\n  This command must be run in a Salesforce DX project directory. You must pass\n  all required information to it with the required flags. The source files for\n  the custom object for which you're generating a tab don't need to exist in\n  your local project.\n\nALIASES\n  $ sfdx generate metadata tab\n\nEXAMPLES\n  Create a tab on the MyObject__c custom object:\n\n    $ sfdx schema generate tab --object MyObject__c --icon 54 --directory \\\n      force-app/main/default/tabs\n\nFLAG DESCRIPTIONS\n  -i, --icon=<value>\n\n    Number from 1 to 100 that specifies the color scheme and icon for the custom\n    tab.\n\n    See https://lightningdesignsystem.com/icons/\\#custom for the available\n    icons.\n\n  -o, --object=<value>\n\n    API name of the custom object you're generating a tab for.\n\n    The API name for a custom object always ends in \"__c\", such as\n    \"MyObject__c\"\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_329.txt"}}],["fcb9b93a-8bf3-49cc-a1aa-a05c4c532cb9",{"pageContent":"\n\nPublish an Experience Builder site to make it live.\n\nUSAGE\n  $ sfdx community publish -n <value> -o <value> [--json] [--api-version\n    <value>]\n\nFLAGS\n  -n, --name=<value>        (required) Name of the Experience Builder site to\n                            publish.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Publish an Experience Builder site to make it live.\n\n  Each time you publish it, you update the live site with the most recent\n  updates. When you publish an Experience Builder site for the first time, you\n  make the site's URL live and enable login access for site members.\n\n  Additionally, to send a welcome email to all site members, you must activate\n  the site. (Activation is also required to successfully set up SEO for\n  Experience Builder sites.) To activate a site, update the status field of the\n  Network type in the Metadata API. Alternatively, in Experience Workspaces, go\n  to Administration | Settings, and click Activate.\n\n  Subsequently, each time you publish the site, you update the live site with\n  all changes made to the site since it was last published.\n\n  An email notification informs you when your changes are live.\n\nALIASES\n  $ sfdx force community publish\n\nEXAMPLES\n  Publish the Experience Builder site with name \"My Customer Site':\n\n    $ sfdx community publish --name 'My Customer Site'\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_33.txt"}}],["9543f72d-5f21-4ad8-b6e0-bad0e72671f6",{"pageContent":"\n\nSearch for a command.\n\nUSAGE\n  $ sfdx search\n\nDESCRIPTION\n  Search for a command.\n\n  Once you select a command, hit enter and it will show the help for that\n  command\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_330.txt"}}],["8db8b0e0-a3ea-4fe8-88bf-3c91004b0f55",{"pageContent":"\n\nDisplay the metadata for a standard or custom object or a Tooling API object.\n\nUSAGE\n  $ sfdx sobject describe -o <value> -s <value> [--json] [--api-version\n    <value>] [-t]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -s, --sobject=<value>     (required) API name of the object to describe.\n  -t, --use-tooling-api     Use Tooling API to display metadata for Tooling API\n                            objects.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display the metadata for a standard or custom object or a Tooling API object.\n\n  The metadata is displayed in JSON format. See this topic for a description of\n  each property: https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/\n  sforce_api_calls_describesobjects_describesobjectresult.htm.\n\n  This command displays metadata for Salesforce objects by default. Use the\n  --use-tooling-api flag to view metadata for a Tooling API object.\n\nALIASES\n  $ sfdx force schema sobject describe\n\nEXAMPLES\n  Display the metadata of the \"Account\" standard object in your default org:\n\n    $ sfdx sobject describe --sobject Account\n\n  Display the metadata of the \"MyObject__c\" custom object in the org with\n  alias \"my-scratch-org\":\n\n    $ sfdx sobject describe --sobject MyObject__c --target-org \\\n      my-scratch-org\n\n  Display the metadata of the ApexCodeCoverage Tooling API object in your\n  default org:\n\n    $ sfdx sobject describe --sobject ApexCodeCoverage --use-tooling-api\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_331.txt"}}],["31d4538a-8dc1-4280-ad04-97193905f78c",{"pageContent":"\n\nList all Salesforce objects of a specified category.\n\nUSAGE\n  $ sfdx sobject list -o <value> [--json] [--api-version <value>] [-s\n    <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  -s, --sobject=<value>     [default: ALL] Category of objects to list.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List all Salesforce objects of a specified category.\n\n  You can list the standard objects, custom objects, or all. The lists include\n  only Salesforce objects, not Tooling API objects.\n\nALIASES\n  $ sfdx force schema sobject list\n\nEXAMPLES\n  List all objects in your default org:\n\n    $ sfdx sobject list --sobject all\n\n  List only custom objects in the org with alias \"my-scratch-org\":\n\n    $ sfdx sobject list --sobject custom --target-org my-scratch-org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_332.txt"}}],["ea651187-ee04-4728-9112-6e6c76b45782",{"pageContent":"\n\nGenerate a static resource.\n\nUSAGE\n  $ sfdx static-resource generate -n <value> [--json] [--type <value>] [-d <value>]\n    [--api-version <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -n, --name=<value>        (required) Name of the generated static resource.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n  --type=<value>            [default: application/zip] Content type (mime type)\n                            of the generated static resource.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a static resource.\n\n  Generates the metadata resource file in the specified directory or the current\n  working directory. Static resource files must be contained in a parent\n  directory called \"staticresources\" in your package directory. Either run this\n  command from an existing directory of this name, or use the --output-dir flag\n  to create one or point to an existing one.\n\nALIASES\n  $ sfdx force staticresource create\n\nEXAMPLES\n  Generate the metadata file for a static resource called MyResource in the\n  current directory:\n\n    $ sfdx static-resource generate --name MyResource\n\n  Similar to previous example, but specifies a MIME type of application/json:\n\n    $ sfdx static-resource generate --name MyResource --type \\\n      application/json\n\n  Generate the resource file in the \"force-app/main/default/staticresources\"\n  directory:\n\n    $ sfdx static-resource generate --name MyResource --output-dir \\\n      force-app/main/default/staticresources\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated static resource.\n\n    This name can contain only underscores and alphanumeric characters, and must\n    be unique in your org. It must begin with a letter, not include spaces, not\n    end with an underscore, and not contain two consecutive underscores.\n\n  --type=<value>  Content type (mime type) of the generated static resource.\n\n    Must be a valid MIME type such as application/json, application/javascript,\n    application/zip, text/plain, text/css, etc\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_333.txt"}}],["bd8d315c-78e4-41ba-ae3e-26173d3cb9be",{"pageContent":"\n\nupdate the sfdx CLI\n\nUSAGE\n  $ sfdx update [CHANNEL] [-a] [-v <value> | -i] [--force]\n\nFLAGS\n  -a, --available        Install a specific version.\n  -i, --interactive      Interactively select version to install. This is\n                         ignored if a channel is provided.\n  -v, --version=<value>  Install a specific version.\n  --force                Force a re-download of the requested version.\n\nDESCRIPTION\n  update the sfdx CLI\n\nEXAMPLES\n  Update to the stable channel:\n\n    $ sfdx update stable\n\n  Update to a specific version:\n\n    $ sfdx update --version 1.0.0\n\n  Interactively select version:\n\n    $ sfdx update --interactive\n\n  See available versions:\n\n    $ sfdx update --available\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_334.txt"}}],["8b615b58-6e9f-4f69-954c-a4e63bb473f6",{"pageContent":"\n\nUSAGE\n  $ sfdx version [--json] [--verbose]\n\nFLAGS\n  --verbose  Show additional information about the CLI.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nFLAG DESCRIPTIONS\n  --verbose  Show additional information about the CLI.\n\n    Additionally shows the architecture, node version, operating system, and\n    versions of plugins that the CLI is using\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_335.txt"}}],["8cd79edf-edbe-4736-be75-cf25713ec9a4",{"pageContent":"\n\nGenerate a Visualforce Component.\n\nUSAGE\n  $ sfdx visualforce generate component -n <value> -l <value> [--json] [-t\n    DefaultVFComponent] [-d <value>] [--api-version <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -l, --label=<value>       (required) Visualforce Component label.\n  -n, --name=<value>        (required) Name of the generated Visualforce\n                            Component.\n  -t, --template=<option>   [default: DefaultVFComponent] Template to use for\n                            file creation.\n                            <options: DefaultVFComponent>\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a Visualforce Component.\n\n  The command generates the .Component file and associated metadata file in the\n  specified directory or the current working directory by default.\n\nALIASES\n  $ sfdx force visualforce component create\n\nEXAMPLES\n  Generate the metadata files for a Visualforce component in the current\n  directory:\n\n    $ sfdx visualforce generate component --name mycomponent --label mylabel\n\n  Similar to previous example, but generate the files in the directory\n  \"force-app/main/default/components\":\n\n    $ sfdx visualforce generate component --name mycomponent --label mylabel \\\n      --output-dir components\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Visualforce Component.\n\n    The name can be up to 40 characters and must start with a letter.\n\n  -t, --template=DefaultVFComponent  Template to use for file creation.\n\n    Supplied parameter values or default values are filled into a copy of the\n    template\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_336.txt"}}],["739d450d-17f4-44a7-8f88-5617247f0cea",{"pageContent":"\n\nGenerate a Visualforce Page.\n\nUSAGE\n  $ sfdx visualforce generate page -n <value> -l <value> [--json] [-d <value>]\n    [--api-version <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -l, --label=<value>       (required) Visualforce Page label.\n  -n, --name=<value>        (required) Name of the generated Visualforce Page.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a Visualforce Page.\n\n  The command generates the .Page file and associated metadata file in the\n  specified directory or the current working directory by default.\n\nALIASES\n  $ sfdx force visualforce page create\n\nEXAMPLES\n  Generate the metadata files for a Visualforce page in the current directory:\n\n    $ sfdx visualforce generate page --name mypage --label mylabel\n\n  Similar to previous example, but generate the files in the directory\n  \"force-app/main/default/pages\":\n\n    $ sfdx visualforce generate page --name mypage --label mylabel \\\n      --output-dir pages\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Visualforce Page.\n\n    The name can be up to 40 characters and must start with a letter\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_337.txt"}}],["5c7a191f-be8a-4d6b-9fba-dc05cb68f6c5",{"pageContent":"\n\nDisplay Salesforce CLI release notes on the command line.\n\nUSAGE\n  $ sfdx whatsnew [--json] [-v <value>]\n\nFLAGS\n  -v, --version=<value>  CLI version or tag for which to display release notes.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display Salesforce CLI release notes on the command line.\n\n  By default, this command displays release notes for the currently installed\n  CLI version on your computer. Use the --version flag to view release notes for\n  a different release.\n\nALIASES\n  $ sfdx whatsnew\n\nEXAMPLES\n  Display release notes for the currently installed CLI version:\n\n    $ sfdx whatsnew stable, stable-rc, latest, latest-rc, rc\n\n  Display release notes for CLI version 7.120.0:\n\n    $ sfdx whatsnew --version 7.120.0 stable, stable-rc, latest, latest-rc, \\\n      rc\n\n  Display release notes for the CLI version that corresponds to a tag (stable,\n  stable-rc, latest, latest-rc, rc):\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_338.txt"}}],["c61cb16b-31ab-4c05-9ba1-cdefe28623d5",{"pageContent":"\n\nGet the value of a configuration variable.\n\nUSAGE\n  $ sfdx config get [--json] [--verbose]\n\nFLAGS\n  --verbose  Display whether the configuration variables are set locally or\n             globally.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Get the value of a configuration variable.\n\n  Run \"sf config list\" to see all the configuration variables you've set. Global\n  configuration variable are always displayed; local ones are displayed if you\n  run the command in a project directory. Run \"sf config set\" to set a\n  configuration variable.\n\nALIASES\n  $ sfdx force config get\n\nEXAMPLES\n  Get the value of the \"target-org\" configuration variable.\n\n    $ sfdx config get target-org\n\n  Get multiple configuration variables and display whether they're set locally\n  or globally:\n\n    $ sfdx config get target-org api-version --verbose\n\nCONFIGURATION VARIABLES\n  org-instance-url               URL of the Salesforce instance hosting your\n                                 org. Default: https://login.salesforce.com.\n  org-api-version                API version of your project. Default: API\n                                 version of your Dev Hub org.\n  target-dev-hub                 Username or alias of your default Dev Hub org.\n                                 (sf only)\n  target-org                     Username or alias of the org that all commands\n                                 run against by default. (sf only)\n  org-isv-debugger-sid           ISV debugger SID.\n  org-isv-debugger-url           ISV debugger URL.\n  org-custom-metadata-templates  A valid repository URL or directory for the\n                                 custom org metadata templates.\n  org-max-query-limit            Maximum number of Salesforce records returned\n                                 by a CLI command. Default: 10,000\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_34.txt"}}],["0dd70ca8-26fd-47b3-96f8-e918facd3f2c",{"pageContent":"\n\nList the configuration variables that you've previously set.\n\nUSAGE\n  $ sfdx config list [--json]\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List the configuration variables that you've previously set.\n\n  Global configuration variables apply to any Salesforce DX project and are\n  always displayed. If you run this command from a project directory, local\n  configuration variables are also displayed.\n\nALIASES\n  $ sfdx force config list\n\nEXAMPLES\n  List both global configuration variables and those local to your project:\n\n    $ sfdx config list\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_35.txt"}}],["540efbe3-52e4-4a49-863d-0d1883ef7f32",{"pageContent":"\n\nSet one or more configuration variables, such as your default org.\n\nUSAGE\n  $ sfdx config set [--json] [-g]\n\nFLAGS\n  -g, --global  Set the configuration variables globally, so they can be used\n                from any Salesforce DX project.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Set one or more configuration variables, such as your default org.\n\n  Use configuration variables to set CLI defaults, such as your default org or\n  the API version you want the CLI to use. For example, if you set the\n  \"target-org\" configuration variable, you don't need to specify it as a \"sf\n  deploy metadata\" flag if you're deploying to your default org.\n\n  Local configuration variables apply only to your current project. Global\n  variables, specified with the --global flag, apply in any Salesforce DX\n  project.\n\n  The resolution order if you've set a flag value in multiple ways is as\n  follows:\n\n  1. Flag value specified at the command line.\n  2. Local (project-level) configuration variable.\n  3. Global configuration variable.\n\n  Run \"sf config list\" to see the configuration variables you've already set and\n  their level (local or global).\n\nALIASES\n  $ sfdx force config set\n\nEXAMPLES\n  Set the local target-org configuration variable to an org username:\n\n    $ sfdx config set target-org=me@my.org\n\n  Set the local target-org configuration variable to an alias:\n\n    $ sfdx config set target-org=my-scratch-org\n\n  Set the global target-org configuration variable:\n\n    $ sfdx config set --global target-org=my-scratch-org\n\n  Set a single configuration variable without using an equal sign; this syntax\n  doesn't work when setting multiple configuration variables:\n\n    $ sfdx config set target-org me@my.com\n\nCONFIGURATION VARIABLES\n  org-instance-url               URL of the Salesforce instance hosting your\n                                 org. Default: https://login.salesforce.com.\n  org-api-version                API version of your project. Default: API\n                                 version of your Dev Hub org.\n  target-dev-hub                 Username or alias of your default Dev Hub org.\n                                 (sf only)\n  target-org                     Username or alias of the org that all commands\n                                 run against by default. (sf only)\n  org-isv-debugger-sid           ISV debugger SID.\n  org-isv-debugger-url           ISV debugger URL.\n  org-custom-metadata-templates  A valid repository URL or directory for the\n                                 custom org metadata templates.\n  org-max-query-limit            Maximum number of Salesforce records returned\n                                 by a CLI command. Default: 10,000\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_36.txt"}}],["dc1c8403-ad50-40a1-8e74-6655583bb463",{"pageContent":"\n\nUnset local or global configuration variables.\n\nUSAGE\n  $ sfdx config unset [--json] [-g]\n\nFLAGS\n  -g, --global  Unset the configuration variables globally, so they can no\n                longer be used from any Salesforce DX project.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Unset local or global configuration variables.\n\n  Local configuration variables apply only to your current project. Global\n  configuration variables apply in any Salesforce DX project.\n\nALIASES\n  $ sfdx force config unset\n\nEXAMPLES\n  Unset the local \"target-org\" configuration variable:\n\n    $ sfdx config unset target-org\n\n  Unset multiple configuration variables globally:\n\n    $ sfdx config unset target-org api-version --global\n\nCONFIGURATION VARIABLES\n  org-instance-url               URL of the Salesforce instance hosting your\n                                 org. Default: https://login.salesforce.com.\n  org-api-version                API version of your project. Default: API\n                                 version of your Dev Hub org.\n  target-dev-hub                 Username or alias of your default Dev Hub org.\n                                 (sf only)\n  target-org                     Username or alias of the org that all commands\n                                 run against by default. (sf only)\n  org-isv-debugger-sid           ISV debugger SID.\n  org-isv-debugger-url           ISV debugger URL.\n  org-custom-metadata-templates  A valid repository URL or directory for the\n                                 custom org metadata templates.\n  org-max-query-limit            Maximum number of Salesforce records returned\n                                 by a CLI command. Default: 10,000\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_37.txt"}}],["6eca7d34-7362-47ee-ba12-51f391bafe73",{"pageContent":"\n\nCreate and insert a record into a Salesforce or Tooling API object.\n\nUSAGE\n  $ sfdx data create record -o <value> -s <value> -v <value> [--json]\n    [--api-version <value>] [-t]\n\nFLAGS\n  -o, --target-org=<value>  (required) Org alias or username to use for the\n                            target org.\n  -s, --sobject=<value>     (required) API name of the Salesforce or Tooling API\n                            object that you're inserting a record into.\n  -t, --use-tooling-api     Use Tooling API so you can insert a record in a\n                            Tooling API object.\n  -v, --values=<value>      (required) Values for the flags in the form\n                            <fieldName>=<value>, separate multiple pairs with\n                            spaces.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create and insert a record into a Salesforce or Tooling API object.\n\n  You must specify a value for all required fields of the object.\n\n  When specifying fields, use the format <fieldName>=<value>. Enclose all\n  field-value pairs in one set of double quotation marks, delimited by spaces.\n  Enclose values that contain spaces in single quotes.\n\n  This command inserts a record into Salesforce objects by default. Use the\n  --use-tooling-api flag to insert into a Tooling API object.\n\nALIASES\n  $ sfdx force data record create\n\nEXAMPLES\n  Insert a record into the Account object of your default org; only the\n  required Name field has a value:\n\n    $ sfdx data create record --sobject Account --values \"Name=Acme\"\n\n  Insert an Account record with values for two fields, one value contains a\n  space; the command uses the org with alias \"my-scratch\":\n\n    $ sfdx data create record --sobject Account --values \"Name='Universal \\\n      Containers' Website=www.example.com\" --target-org my-scratch\n\n  Insert a record into the Tooling API object TraceFlag:\n\n    $ sfdx data create record --use-tooling-api --sobject TraceFlag --values \\\n      \"DebugLevelId=7dl170000008U36AAE StartDate=2022-12-15T00:26:04.000+0000 \\\n      ExpirationDate=2022-12-15T00:56:04.000+0000 LogType=CLASS_TRACING \\\n      TracedEntityId=01p17000000R6bLAAS\"\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_38.txt"}}],["37dafa4d-112b-4ee6-98fb-957f17b3a7e8",{"pageContent":"\n\nBulk delete records from an org using a CSV file. Uses Bulk API 2.0.\n\nUSAGE\n  $ sfdx data delete bulk -o <value> -f <value> -s <value> [--json]\n    [--api-version <value>] [-w <value> | -a]\n\nFLAGS\n  -a, --async               Run the command asynchronously.\n  -f, --file=<value>        (required) CSV file that contains the IDs of the\n                            records to delete.\n  -o, --target-org=<value>  (required) Org alias or username to use for the\n                            target org.\n  -s, --sobject=<value>     (required) API name of the Salesforce object, either\n                            standard or custom, that you want to delete records\n                            from.\n  -w, --wait=<value>        [default: 0 minutes] Number of minutes to wait for\n                            the command to complete before displaying the\n                            results.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Bulk delete records from an org using a CSV file. Uses Bulk API 2.0.\n\n  The CSV file must have only one column (\"Id\") and then the list of record IDs\n  you want to delete, one ID per line.\n\n  When you execute this command, it starts a job, displays the ID, and then\n  immediately returns control of the terminal to you by default. If you prefer\n  to wait, set the --wait flag to the number of minutes; if it times out, the\n  command outputs the IDs. Use the job ID to check the status of the job with\n  the \"sfdx data delete resume\" command.\n\nEXAMPLES\n  Bulk delete Account records from your default org using the list of IDs in\n  the \"files/delete.csv\" file:\n\n    $ sfdx data delete bulk --sobject Account --file files/delete.csv\n\n  Bulk delete records from a custom object in an org with alias my-scratch and\n  wait 5 minutes for the command to complete:\n\n    $ sfdx data delete bulk --sobject MyObject\\_\\_c --file files/delete.csv \\\n      --wait 5 --target-org my-scratch\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_39.txt"}}],["65cc9c7e-60d8-4dd4-8177-6ad9e1ad79e1",{"pageContent":"\n\nGenerate a simple Analytics template.\n\nUSAGE\n  $ sfdx analytics generate template -n <value> [--json] [-d <value>] [--api-version\n    <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -n, --name=<value>        (required) Name of the Analytics template.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a simple Analytics template.\n\n  The metadata files associated with the Analytics template must be contained in\n  a parent directory called \"waveTemplates\" in your package directory. Either\n  run this command from an existing directory of this name, or use the\n  --output-dir flag to generate one or point to an existing one.\n\nALIASES\n  $ sfdx force analytics template create\n\nEXAMPLES\n  Generate the metadata files for a simple Analytics template file called\n  myTemplate in the force-app/main/default/waveTemplates directory:\n\n    $ sfdx analytics generate template --name myTemplate --output-dir \\\n      force-app/main/default/waveTemplates\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_4.txt"}}],["1adffe33-71e5-4d87-91ac-658ccb20da62",{"pageContent":"\n\nDeletes a single record from a Salesforce or Tooling API object.\n\nUSAGE\n  $ sfdx data delete record -o <value> -s <value> [--json] [--api-version\n    <value>] [-i <value>] [-w <value>] [-t]\n\nFLAGS\n  -i, --record-id=<value>   ID of the record you’re deleting.\n  -o, --target-org=<value>  (required) Org alias or username to use for the\n                            target org.\n  -s, --sobject=<value>     (required) API name of the Salesforce or Tooling API\n                            object that you're deleting a record from.\n  -t, --use-tooling-api     Use Tooling API so you can delete a record from a\n                            Tooling API object.\n  -w, --where=<value>       List of <fieldName>=<value> pairs that identify the\n                            record you want to delete.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Deletes a single record from a Salesforce or Tooling API object.\n\n  Specify the record you want to delete with either its ID or with a list of\n  field-value pairs that identify the record. If your list of fields identifies\n  more than one record, the delete fails; the error displays how many records\n  were found.\n\n  When specifying field-value pairs, use the format <fieldName>=<value>. Enclose\n  all field-value pairs in one set of double quotation marks, delimited by\n  spaces. Enclose values that contain spaces in single quotes.\n\n  This command deletes a record from Salesforce objects by default. Use the\n  --use-tooling-api flag to delete from a Tooling API object.\n\nALIASES\n  $ sfdx force data record delete\n\nEXAMPLES\n  Delete a record from Account with the specified (truncated) ID:\n\n    $ sfdx data delete record --sobject Account --record-id 00180XX\n\n  Delete a record from Account whose name equals \"Acme\":\n\n    $ sfdx data delete record --sobject Account --where \"Name=Acme\"\n\n  Delete a record from Account identified with two field values, one that\n  contains a space; the command uses the org with alias \"my-scratch\":\n\n    $ sfdx data delete record --sobject Account --where \"Name='Universal \\\n      Containers' Phone='(123) 456-7890'\" --target-org myscratch\n\n  Delete a record from the Tooling API object TraceFlag with the specified\n  (truncated) ID:\n\n    $ sfdx data delete record --use-tooling-api --sobject TraceFlag \\\n      --record-id 7tf8c\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_40.txt"}}],["4e8e0589-d8aa-47a4-b530-7dd8696fe719",{"pageContent":"\n\nResume a bulk delete job that you previously started. Uses Bulk API 2.0.\n\nUSAGE\n  $ sfdx data delete resume [--json] [-o <value>] [--use-most-recent | -i\n    <value>] [--wait <value>] [--api-version <value>]\n\nFLAGS\n  -i, --job-id=<value>      ID of the job you want to resume.\n  -o, --target-org=<value>  Org alias or username to use for the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n  --use-most-recent         Use the ID of the most recently-run bulk job.\n  --wait=<value>            [default: 0 minutes] Number of minutes to wait for\n                            the command to complete before displaying the\n                            results.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Resume a bulk delete job that you previously started. Uses Bulk API 2.0.\n\n  The command uses the job ID returned by the \"sfdx data delete bulk\" command or\n  the most recently-run bulk delete job.\n\nEXAMPLES\n  Resume a bulk delete job from your default org using an ID:\n\n    $ sfdx data delete resume --job-id 750xx000000005sAAA\n\n  Resume the most recently run bulk delete job for an org with alias\n  my-scratch:\n\n    $ sfdx data delete resume --use-most-recent --target-org my-scratch\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_41.txt"}}],["413b1b10-b1d0-44fa-b88f-ea428bcfdf5a",{"pageContent":"\n\nExport data from an org into one or more JSON files.\n\nUSAGE\n  $ sfdx data export tree -o <value> -q <value> [--json] [--api-version\n    <value>] [-p] [-x <value>] [-d <value>]\n\nFLAGS\n  -d, --output-dir=<value>  Directory in which to generate the JSON files;\n                            default is current directory.\n  -o, --target-org=<value>  (required) Org alias or username to use for the\n                            target org.\n  -p, --plan                Generate multiple sObject tree files and a plan\n                            definition file for aggregated import.\n  -q, --query=<value>       (required) SOQL query, or filepath of a file that\n                            contains the query, to retrieve records.\n  -x, --prefix=<value>      Prefix of generated files.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Export data from an org into one or more JSON files.\n\n  Specify a SOQL query, either directly at the command line or read from a file,\n  to retrieve the data you want to export. The exported data is written to JSON\n  files in sObject tree format, which is a collection of nested, parent-child\n  records with a single root record. Use these JSON files to import data into an\n  org with the \"sfdx data import tree\" command.\n\n  If your SOQL query references multiple objects, the command generates a single\n  JSON file by default. You can specify the --plan flag to generate separate\n  JSON files for each object and a plan definition file that aggregates them.\n  You then specify just this plan definition file when you import the data into\n  an org.\n\n  The SOQL query can return a maximum of 2,000 records. For more information,\n  see the REST API Developer Guide. (https://developer.salesforce.com/docs/atlas\n  .en-us.api_rest.meta/api_rest/resources_composite_sobject_tree.htm).\n\nALIASES\n  $ sfdx force data tree export\n\nEXAMPLES\n  Export records retrieved with the specified SOQL query into a single JSON\n  file in the current directory; the command uses your default org:\n\n    $ sfdx data export tree --query \"SELECT Id, Name, (SELECT Name, \\\n      Address__c FROM Properties__r) FROM Broker__c\"\n\n  Export data using a SOQL query in the \"query.txt\" file and generate JSON\n  files for each object and a plan that aggregates them:\n\n    $ sfdx data export tree --query query.txt --plan\n\n  Prepend \"export-demo\" before each generated file and generate the files in\n  the \"export-out\" directory; run the command on the org with alias\n  \"my-scratch\":\n\n    $ sfdx data export tree --query query.txt --plan --prefix export-demo \\\n      --output-dir export-out --target-org my-scratch\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_42.txt"}}],["ea9b6798-88d4-491e-aae0-1c18fb39f1e9",{"pageContent":"\n\nRetrieve and display a single record of a Salesforce or Tooling API object.\n\nUSAGE\n  $ sfdx data get record -o <value> -s <value> [--json] [--api-version\n    <value>] [-i <value>] [-w <value>] [-t]\n\nFLAGS\n  -i, --record-id=<value>   ID of the record you’re retrieving.\n  -o, --target-org=<value>  (required) Org alias or username to use for the\n                            target org.\n  -s, --sobject=<value>     (required) API name of the Salesforce or Tooling API\n                            object that you're retrieving a record from.\n  -t, --use-tooling-api     Use Tooling API so you can retrieve a record from a\n                            Tooling API object.\n  -w, --where=<value>       List of <fieldName>=<value> pairs that identify the\n                            record you want to display.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Retrieve and display a single record of a Salesforce or Tooling API object.\n\n  Specify the record you want to retrieve with either its ID or with a list of\n  field-value pairs that identify the record. If your list of fields identifies\n  more than one record, the command fails; the error displays how many records\n  were found.\n\n  When specifying field-value pairs, use the format <fieldName>=<value>. Enclose\n  all field-value pairs in one set of double quotation marks, delimited by\n  spaces. Enclose values that contain spaces in single quotes.\n\n  The command displays all the record's fields and their values, one field per\n  terminal line. Fields with no values are displayed as \"null\".\n\n  This command retrieves a record from Salesforce objects by default. Use the\n  --use-tooling-api flag to retrieve from a Tooling API object.\n\nALIASES\n  $ sfdx force data record get\n\nEXAMPLES\n  Retrieve and display a record from Account with the specified (truncated)\n  ID:\n\n    $ sfdx data get record --sobject Account --record-id 00180XX\n\n  Retrieve a record from Account whose name equals \"Acme\":\n\n    $ sfdx data get record --sobject Account --where \"Name=Acme\"\n\n  Retrieve a record from Account identified with two field values, one that\n  contains a space; the command uses the org with alias \"my-scratch\":\n\n    $ sfdx data get record --sobject Account --where \"Name='Universal \\\n      Containers' Phone='(123) 456-7890'\" --target-org myscratch\n\n  Retrieve a record from the Tooling API object TraceFlag with the specified\n  (truncated) ID:\n\n    $ sfdx data get record --use-tooling-api --sobject TraceFlag --record-id \\\n      7tf8c\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_43.txt"}}],["ade2dd54-85aa-462e-a910-cd026a85a848",{"pageContent":"\n\nImport data from one or more JSON files into an org.\n\nUSAGE\n  $ sfdx data import tree -o <value> [--json] [--api-version <value>] [-f\n    <value> | -p <value>] [--config-help]\n\nFLAGS\n  -f, --files=<value>...    Comma-separated and in-order JSON files that contain\n                            the records, in sObject tree format, that you want\n                            to insert.\n  -o, --target-org=<value>  (required) Org alias or username to use for the\n                            target org.\n  -p, --plan=<value>        Plan definition file to insert multiple data files.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n  --config-help             Display schema information for the --plan\n                            configuration file to stdout; if you specify this\n                            flag, all other flags except --json are ignored.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Import data from one or more JSON files into an org.\n\n  The JSON files that contain the data are in sObject tree format, which is a\n  collection of nested, parent-child records with a single root record. Use the\n  \"sfdx data export tree\" command to generate these JSON files.\n\n  If you used the --plan flag when exporting the data to generate a plan\n  definition file, use the --plan flag to reference the file when you import. If\n  you're not using a plan, use the --files flag to list the files. If you\n  specify multiple JSON files that depend on each other in a parent-child\n  relationship, be sure you list them in the correct order.\n\n  The sObject Tree API supports requests that contain up to 200 records. For\n  more information, see the REST API Developer Guide.\n  (https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/reso\n  urces_composite_sobject_tree.htm)\n\nALIASES\n  $ sfdx force data tree import\n\nEXAMPLES\n  Import the records contained in two JSON files into the org with alias\n  \"my-scratch\":\n\n    $ sfdx data import tree --files Contact.json,Account.json --target-org \\\n      my-scratch\n\n  Import records using a plan definition file into your default org:\n\n    $ sfdx data import tree --plan Account-Contact-plan.json\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_44.txt"}}],["30b41604-b82c-429a-80a9-5d9c35851e36",{"pageContent":"\n\nExecute a SOQL query.\n\nUSAGE\n  $ sfdx data query -o <value> [--json] [--api-version <value>] [-q\n    <value>] [-f <value>] [-w <value> [-b | -t]] [--async ] [-r human|json|csv]\n\nFLAGS\n  -b, --bulk                    Use Bulk API 2.0 to run the query.\n  -f, --file=<value>            File that contains the SOQL query.\n  -o, --target-org=<value>      (required) Org alias or username to use for the\n                                target org.\n  -q, --query=<value>           SOQL query to execute.\n  -r, --result-format=<option>  [default: human] Format to display the results;\n                                the --json flag overrides this flag.\n                                <options: human|json|csv>\n  -t, --use-tooling-api         Use Tooling API so you can run queries on\n                                Tooling API objects.\n  -w, --wait=<value>            Time to wait for the command to finish, in\n                                minutes.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n  --async                       Use Bulk API 2.0, but don't wait for the job to\n                                complete.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Execute a SOQL query.\n\n  Specify the SOQL query at the command line with the --query flag or read the\n  query from a file with the --file flag.\n\n  If your query returns more than 10,000 records, specify the --bulk flag. The\n  command then runs the query using Bulk API 2.0, which has higher limits than\n  the default API used by the command.\n\n  When using --bulk, the command waits 3 minutes by default for the query to\n  complete. Use the --wait parameter to specify a different number of minutes to\n  wait, or set --wait to 0 to immediately return control to the terminal. If you\n  set --wait to 0, or you use the --async flag, or the command simply times out,\n  the command displays an ID. Pass this ID to the the \"data query resume\"\n  command using the --bulk-query-id flag to get the results; pass the ID to the\n  \"data resume\" command to get the job status.\n\nALIASES\n  $ sfdx force data soql query\n\nEXAMPLES\n  Specify a SOQL query at the command line; the command uses your default org:\n\n    $ sfdx data query --query \"SELECT Id, Name, Account.Name FROM Contact\"\n\n  Read the SOQL query from a file called \"query.txt\"; the command uses the org\n  with alias \"my-scratch\":\n\n    $ sfdx data query --file query.txt --target-org my-scratch\n\n  Use Tooling API to run a query on the ApexTrigger Tooling API object:\n\n    $ sfdx data query --query \"SELECT Name FROM ApexTrigger\" \\\n      --use-tooling-api\n\n  Use Bulk API 2.0 to run a query that returns many rows, and return control\n  to the terminal immediately:\n\n    $ sfdx data query --query \"SELECT Id FROM Contact\" --bulk --wait 0\n\nCOMMANDS\n  data query resume  View the status of a bulk query\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_45.txt"}}],["9e732791-b8e1-4e29-8cff-4b7631a3bfe7",{"pageContent":"\n\nView the status of a bulk query.\n\nUSAGE\n  $ sfdx data query resume [--json] [-o <value>] [--api-version <value>] [-r\n    human|json|csv] [-r | -i <value>]\n\nFLAGS\n  -i, --bulk-query-id=<value>   Job ID of the bulk query.\n  -o, --target-org=<value>      Org alias or username to use for the target org.\n  -r, --result-format=<option>  [default: human] Format to display the results;\n                                the --json flag overrides this flag.\n                                <options: human|json|csv>\n  -r, --use-most-recent         Use the most recent bulk query ID from cache.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  View the status of a bulk query.\n\n  Run this command using the job ID returned from the \"sfdx data query --bulk\"\n  command.\n\nALIASES\n  $ sfdx force data soql bulk report\n\nEXAMPLES\n  View the status of a bulk query with the specified ID:\n\n    $ sfdx data query resume --bulk-query-id 7500x000005BdFzXXX\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_46.txt"}}],["ab43e5f4-0938-44db-a541-6c4d743eae63",{"pageContent":"\n\nUse force:data:bulk:status instead\nView the status of a bulk data load job or batch.\n\nUSAGE\n  $ sfdx data resume -o <value> -i <value> [--json] [--api-version\n    <value>] [-b <value>]\n\nFLAGS\n  -b, --batch-id=<value>    ID of the batch whose status you want to view; you\n                            must also specify the job ID.\n  -i, --job-id=<value>      (required) ID of the job whose status you want to\n                            view.\n  -o, --target-org=<value>  (required) Org alias or username to use for the\n                            target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  View the status of a bulk data load job or batch.\n\n  Run this command using the job ID or batch ID returned from the \"sfdx data\n  delete bulk\" or \"sfdx data upsert bulk\" commands.\n\nEXAMPLES\n  View the status of a bulk load job:\n\n    $ sfdx data resume --job-id 750xx000000005sAAA\n\n  View the status of a bulk load job and a specific batches:\n\n    $ sfdx data resume --job-id 750xx000000005sAAA --batch-id \\\n      751xx000000005nAAA\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_47.txt"}}],["af0d700a-1121-49b2-a18d-a08758186469",{"pageContent":"\n\nUpdates a single record of a Salesforce or Tooling API object.\n\nUSAGE\n  $ sfdx data update record -o <value> -s <value> -v <value> [--json]\n    [--api-version <value>] [-i <value>] [-w <value>] [-t]\n\nFLAGS\n  -i, --record-id=<value>   ID of the record you’re updating.\n  -o, --target-org=<value>  (required) Org alias or username to use for the\n                            target org.\n  -s, --sobject=<value>     (required) API name of the Salesforce or Tooling API\n                            object that contains the record you're updating.\n  -t, --use-tooling-api     Use Tooling API so you can update a record in a\n                            Tooling API object.\n  -v, --values=<value>      (required) Fields that you're updating, in the\n                            format of <fieldName>=<value> pairs.\n  -w, --where=<value>       List of <fieldName>=<value> pairs that identify the\n                            record you want to update.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Updates a single record of a Salesforce or Tooling API object.\n\n  Specify the record you want to update with either its ID or with a list of\n  field-value pairs that identify the record. If your list of fields identifies\n  more than one record, the delete fails; the error displays how many records\n  were found.\n\n  When using field-value pairs for both identifying the record and specifiyng\n  the new field values, use the format <fieldName>=<value>. Enclose all\n  field-value pairs in one set of double quotation marks, delimited by spaces.\n  Enclose values that contain spaces in single quotes.\n\n  This command updates a record in Salesforce objects by default. Use the\n  --use-tooling-api flag to update a Tooling API object.\n\nALIASES\n  $ sfdx force data record update\n\nEXAMPLES\n  Update the Name field of an Account record with the specified (truncated)\n  ID:\n\n    $ sfdx data update record --sobject Account --record-id 001D0 --values \\\n      \"Name=NewAcme\"\n\n  Update the Name field of an Account record whose current name is 'Old Acme':\n\n    $ sfdx data update record --sobject Account --where \"Name='Old Acme'\" \\\n      --values \"Name='New Acme'\"\n\n  Update the Name and Website fields of an Account record with the specified\n  (truncated) ID:\n\n    $ sfdx data update record --sobject Account --record-id 001D0 --values \\\n      \"Name='Acme III' Website=www.example.com\"\n\n  Update the ExpirationDate field of a record of the Tooling API object\n  TraceFlag using the specified (truncated) ID:\n\n    $ sfdx data update record -t --sobject TraceFlag --record-id \\\n      7tf170000009cUBAAY --values \\\n      \"ExpirationDate=2017-12-01T00:58:04.000+0000\"\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_48.txt"}}],["ffdb3b75-35f8-4330-87e7-19e5d2895f2a",{"pageContent":"\n\nBulk upsert records to an org from a CSV file. Uses Bulk API 2.0.\n\nUSAGE\n  $ sfdx data upsert bulk -o <value> -f <value> -s <value> -i <value> [--json]\n    [--api-version <value>] [-w <value> | -a]\n\nFLAGS\n  -a, --async                Run the command asynchronously.\n  -f, --file=<value>         (required) CSV file that contains the IDs of the\n                             records to delete.\n  -i, --external-id=<value>  (required) Name of the external ID field, or the Id\n                             field.\n  -o, --target-org=<value>   (required) Org alias or username to use for the\n                             target org.\n  -s, --sobject=<value>      (required) API name of the Salesforce object,\n                             either standard or custom, that you want to delete\n                             records from.\n  -w, --wait=<value>         [default: 0 minutes] Number of minutes to wait for\n                             the command to complete before displaying the\n                             results.\n  --api-version=<value>      Override the api version used for api requests made\n                             by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Bulk upsert records to an org from a CSV file. Uses Bulk API 2.0.\n\n  An upsert refers to inserting a record into a Salesforce object if the record\n  doesn't already exist, or updating it if it does exist.\n\n  When you execute this command, it starts a job, displays the ID, and then\n  immediately returns control of the terminal to you by default. If you prefer\n  to wait, set the --wait flag to the number of minutes; if it times out, the\n  command outputs the IDs. Use the job and batch IDs to check the status of the\n  job with the \"sfdx data upsert resume\" command.\n\n  See \"Prepare CSV Files\" in the Bulk API Developer Guide for details on\n  formatting your CSV file. (https://developer.salesforce.com/docs/atlas.en-us.a\n  pi_asynch.meta/api_asynch/datafiles_prepare_csv.htm)\n\nEXAMPLES\n  Bulk upsert records to the Contact object in your default org:\n\n    $ sfdx data upsert bulk --sobject Contact --file files/contacts.csv \\\n      --external-id Id\n\n  Bulk upsert records to a custom object in an org with alias my-scratch and\n  wait 5 minutes for the command to complete:\n\n    $ sfdx data upsert bulk --sobject MyObject**c --file files/file.csv \\\n      --external-id MyField**c --wait 5 --target-org my-scratch\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_49.txt"}}],["2fba8b6c-63f3-4ccd-99fa-8f1b6a8d76d0",{"pageContent":"\n\nGenerate an Apex class.\n\nUSAGE\n  $ sfdx apex generate class -n <value> [--json] [-t\n    ApexException|ApexUnitTest|DefaultApexClass|InboundEmailService] [-d\n    <value>] [--api-version <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -n, --name=<value>        (required) Name of the generated Apex class.\n  -t, --template=<option>   [default: DefaultApexClass] Template to use for file\n                            creation.\n                            <options: ApexException|ApexUnitTest|DefaultApexClas\n                            s|InboundEmailService>\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate an Apex class.\n\n  Generates the Apex *.cls file and associated metadata file. These files must\n  be contained in a parent directory called \"classes\" in your package directory.\n  Either run this command from an existing directory of this name, or use the\n  --output-dir flag to generate one or point to an existing one.\n\nALIASES\n  $ sfdx force apex class create\n\nEXAMPLES\n  Generate two metadata files associated with the MyClass Apex class\n  (MyClass.cls and MyClass.cls-meta.xml) in the current directory:\n\n    $ sfdx apex generate class --name MyClass\n\n  Similar to previous example, but generates the files in the\n  \"force-app/main/default/classes\" directory:\n\n    $ sfdx apex generate class --name MyClass --output-dir \\\n      force-app/main/default/classes\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Apex class.\n\n    The name can be up to 40 characters and must start with a letter.\n\n  -t, --template=ApexException|ApexUnitTest|DefaultApexClass|InboundEmailService\n\n    Template to use for file creation.\n\n    Supplied parameter values or default values are filled into a copy of the\n    template\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_5.txt"}}],["580f30d6-7a20-41c8-b6e7-4fe207df937c",{"pageContent":"\n\nResume a bulk upsert job that you previously started. Uses Bulk API 2.0.\n\nUSAGE\n  $ sfdx data upsert resume [--json] [-o <value>] [--use-most-recent | -i\n    <value>] [--wait <value>] [--api-version <value>]\n\nFLAGS\n  -i, --job-id=<value>      ID of the job you want to resume.\n  -o, --target-org=<value>  Org alias or username to use for the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n  --use-most-recent         Use the ID of the most recently-run bulk job.\n  --wait=<value>            [default: 0 minutes] Number of minutes to wait for\n                            the command to complete before displaying the\n                            results.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Resume a bulk upsert job that you previously started. Uses Bulk API 2.0.\n\n  The command uses the job ID returned from the \"sfdx data upsert bulk\" command\n  or the most recently-run bulk upsert job.\n\nEXAMPLES\n  Resume a bulk upsert job from your default org using an ID:\n\n    $ sfdx data upsert resume --job-id 750xx000000005sAAA\n\n  Resume the most recently run bulk upsert job for an org with alias\n  my-scratch:\n\n    $ sfdx data upsert resume --use-most-recent --target-org my-scratch\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_50.txt"}}],["dfd9aa64-fca3-44c2-8ffa-3026872f672e",{"pageContent":"\n\nThe top-level deploy command is deprecated. You should use `functions deploy` to deploy functions, and use `project deploy start` to deploy metadata to Salesforce orgs.\nDeploy a project interactively to any Salesforce environment.\n\nUSAGE\n  $ sfdx deploy [--interactive]\n\nFLAGS\n  --interactive  Force the CLI to prompt for all deployment inputs.\n\nDESCRIPTION\n  Deploy a project interactively to any Salesforce environment.\n\n  This command must be run from within a project.\n\n  The command first analyzes your project, your active or logged-into\n  environments, and local defaults to determine what to deploy and where to\n  deploy it. The command then prompts you for information about this particular\n  deployment and provides intelligent choices based on its analysis.\n\n  For example, if your local project contains a source directory with metadata\n  files in source format, the command asks if you want to deploy that Salesforce\n  app to an org. The command lists your connected orgs and asks which one you\n  want to deploy to. The list of orgs starts with scratch orgs, ordered by\n  expiration date with the most recently created one first, and then Dev Hub and\n  production orgs ordered by name. If the command finds Apex tests, it asks if\n  you want to run them and at which level.\n\n  The command stores your responses in the \"deploy-options.json\" file in your\n  local project directory and uses them as defaults when you rerun the command.\n  Specify --interactive to force the command to reprompt.\n\n  Use this command for quick and simple deploys. For more complicated\n  deployments, use the environment-specific commands, such as \"sfdx project\n  deploy start\", that provide additional flags.\n\nEXAMPLES\n  Deploy a project and use stored values from a previous command run:\n\n    $ sfdx deploy\n\n  Reprompt for all deployment inputs:\n\n    $ sfdx deploy --interactive\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_51.txt"}}],["0a6c8e47-4f60-4feb-ac6d-0fef685346b0",{"pageContent":"\n\nDeploy metadata to an org from your local project.\n\nUSAGE\n  $ sfdx project deploy start -o <value> [--json] [-a <value>] [--async | -w\n    <value>] [--concise | --verbose] [--dry-run] [-c] [-r] [-g]\n    [--single-package ] [-t <value>] [-l\n    NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg]\n    [--purge-on-delete [-x <value> | -d <value> | -m <value> | --metadata-dir\n    <value>]] [--pre-destructive-changes <value> ] [--post-destructive-changes\n    <value> ] [--junit --coverage-formatters clover|cobertura|html-spa|html|json\n    |json-summary|lcovonly|none|teamcity|text|text-summary] [--results-dir\n    <value> ]\n\nFLAGS\n  -a, --api-version=<value>           Target API version for the deploy.\n  -c, --ignore-conflicts              Ignore conflicts and deploy local files,\n                                      even if they overwrite changes in the org.\n  -d, --source-dir=<value>...         Path to the local source files to deploy.\n  -g, --ignore-warnings               Ignore warnings and allow a deployment to\n                                      complete successfully.\n  -l, --test-level=<option>           Deployment Apex testing level.\n                                      <options: NoTestRun|RunSpecifiedTests|RunL\n                                      ocalTests|RunAllTestsInOrg>\n  -m, --metadata=<value>...           Metadata component names to deploy.\n  -o, --target-org=<value>            (required) Login username or alias for the\n                                      target org.\n  -r, --ignore-errors                 Ignore any errors and don’t roll back\n                                      deployment.\n  -t, --tests=<value>...              Apex tests to run when --test-level is\n                                      RunSpecifiedTests.\n  -w, --wait=<minutes>                [default: 33 minutes] Number of minutes to\n                                      wait for command to complete and display\n                                      results.\n  -x, --manifest=<value>              Full file path for manifest (package.xml)\n                                      of components to deploy.\n  --async                             Run the command asynchronously.\n  --concise                           Show concise output of the deploy result.\n  --coverage-formatters=<option>...   Format of the code coverage results.\n                                      <options: clover|cobertura|html-spa|html|j\n                                      son|json-summary|lcovonly|none|teamcity|te\n                                      xt|text-summary>\n  --dry-run                           Validate deploy and run Apex tests but\n                                      don’t save to the org.\n  --junit                             Output JUnit test results.\n  --metadata-dir=<value>              Root of directory or zip file of metadata\n                                      formatted files to deploy.\n  --post-destructive-changes=<value>  File path for a manifest\n                                      (destructiveChangesPost.xml) of components\n                                      to delete after the deploy.\n  --pre-destructive-changes=<value>   File path for a manifest\n                                      (destructiveChangesPre.xml) of components\n                                      to delete before the deploy\n  --purge-on-delete                   Specify that deleted components in the\n                                      destructive changes manifest file are\n                                      immediately eligible for deletion rather\n                                      than being stored in the Recycle Bin.\n  --results-dir=<value>               Output directory for code coverage and\n                                      JUnit results; defaults to the deploy ID.\n  --single-package                    Indicates that the metadata zip file\n                                      points to a directory structure for a\n                                      single package.\n  --verbose                           Show verbose output of the deploy result.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Deploy metadata to an org from your local project.\n\n  You must run this command from within a project.\n\n  Metadata components are deployed in source format by default. Deploy them in\n  metadata format by specifying the --metadata-dir flag, which specifies the\n  root directory or ZIP file that contains the metadata formatted files you want\n  to deploy.\n\n  If your org allows source tracking, then this command tracks the changes in\n  your source. Some orgs, such as production org, never allow source tracking.\n  Source tracking is enabled by default on scratch and sandbox orgs; you can\n  disable source tracking when you create the orgs by specifying the\n  --no-track-source flag on the \"sfdx org create scratch|sandbox\" commands.\n\n  To deploy multiple metadata components, either set multiple --metadata <name>\n  flags or a single --metadata flag with multiple names separated by spaces.\n  Enclose names that contain spaces in one set of double quotes. The same syntax\n  applies to --manifest and --source-dir.\n\nALIASES\n  $ sfdx deploy metadata\n\nEXAMPLES\n  Deploy local changes not in the org; uses your default org:\n\n    $ sfdx project deploy start\n\n  Deploy the source files in a directory to an org with alias \"my-scratch\":\n\n    $ sfdx project deploy start  --source-dir path/to/source --target-org \\\n      my-scratch\n\n  Deploy a specific Apex class and the objects whose source is in a directory\n  (both examples are equivalent):\n\n    $ sfdx project deploy start --source-dir \\\n      path/to/apex/classes/MyClass.cls path/to/source/objects\n    $ sfdx project deploy start --source-dir \\\n      path/to/apex/classes/MyClass.cls --source-dir path/to/source/objects\n\n  Deploy all Apex classes:\n\n    $ sfdx project deploy start --metadata ApexClass\n\n  Deploy a specific Apex class:\n\n    $ sfdx project deploy start --metadata ApexClass:MyApexClass\n\n  Deploy all custom objects and Apex classes (both examples are equivalent):\n\n    $ sfdx project deploy start --metadata CustomObject ApexClass\n    $ sfdx project deploy start --metadata CustomObject --metadata ApexClass\n\n  Deploy all Apex classes and a profile that has a space in its name:\n\n    $ sfdx project deploy start --metadata ApexClass --metadata \"Profile:My \\\n      Profile\"\n\n  Deploy all components listed in a manifest:\n\n    $ sfdx project deploy start --manifest path/to/package.xml\n\n  Run the tests that aren’t in any managed packages as part of a deployment:\n\n    $ sfdx project deploy start --metadata ApexClass --test-level \\\n      RunLocalTests\n\nFLAG DESCRIPTIONS\n  -a, --api-version=<value>  Target API version for the deploy.\n\n    Use this flag to override the default API version with the API version of\n    your package.xml file. The default API version is the latest version\n    supported by the CLI.\n\n  -c, --ignore-conflicts\n\n    Ignore conflicts and deploy local files, even if they overwrite changes in\n    the org.\n\n    This flag applies only to orgs that allow source tracking. It has no effect\n    on orgs that don't allow it, such as production orgs.\n\n  -d, --source-dir=<value>...  Path to the local source files to deploy.\n\n    The supplied path can be to a single file (in which case the operation is\n    applied to only one file) or to a folder (in which case the operation is\n    applied to all metadata types in the directory and its subdirectories).\n\n    If you specify this flag, don’t specify --metadata or --manifest.\n\n  -g, --ignore-warnings\n\n    Ignore warnings and allow a deployment to complete successfully.\n\n    If a warning occurs and this flag is set to true, the success status of the\n    deployment is set to true. When this flag is set to false, success is set to\n    false, and the warning is treated like an error.\n\n  -l, --test-level=NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg\n\n    Deployment Apex testing level.\n\n    Valid values are:\n\n    - NoTestRun — No tests are run. This test level applies only to deployments\n    to development environments, such as sandbox, Developer Edition, or trial\n    orgs. This test level is the default for development environments.\n\n    - RunSpecifiedTests — Runs only the tests that you specify with the\n    --run-tests flag. Code coverage requirements differ from the default\n    coverage requirements when using this test level. Executed tests must\n    comprise a minimum of 75% code coverage for each class and trigger in the\n    deployment package. This coverage is computed for each class and trigger\n    individually and is different than the overall coverage percentage.\n\n    - RunLocalTests — All tests in your org are run, except the ones that\n    originate from installed managed and unlocked packages. This test level is\n    the default for production deployments that include Apex classes or\n    triggers.\n\n    - RunAllTestsInOrg — All tests in your org are run, including tests of\n    managed packages.\n\n    If you don’t specify a test level, the default behavior depends on the\n    contents of your deployment package and target org. For more information,\n    see [Running Tests in a Deployment](https://developer.salesforce.com/docs/at\n    las.en-us.api_meta.meta/api_meta/meta_deploy_running_tests.htm) in the\n    \"Metadata API Developer Guide\".\n\n  -o, --target-org=<value>  Login username or alias for the target org.\n\n    Overrides your default org.\n\n  -r, --ignore-errors  Ignore any errors and don’t roll back deployment.\n\n    When deploying to a production org, keep this flag set to false (default\n    value). When set to true, components without errors are deployed and\n    components with errors are skipped, and could result in an inconsistent\n    production org.\n\n  -t, --tests=<value>...\n\n    Apex tests to run when --test-level is RunSpecifiedTests.\n\n    If a test name contains a space, enclose it in double quotes.\n    For multiple test names, use one of the following formats:\n\n    - Repeat the flag for multiple test names: --tests Test1 --tests Test2\n    --tests \"Test With Space\"\n    - Separate the test names with spaces: --tests Test1 Test2 \"Test With Space\"\n\n  -w, --wait=<minutes>\n\n    Number of minutes to wait for command to complete and display results.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you and returns the job ID. To resume the\n    deployment, run \"sfdx project deploy resume\". To check the status of the\n    deployment, run \"sfdx project deploy report\".\n\n  -x, --manifest=<value>\n\n    Full file path for manifest (package.xml) of components to deploy.\n\n    All child components are included. If you specify this flag, don’t specify\n    --metadata or --source-dir.\n\n  --async  Run the command asynchronously.\n\n    The command immediately returns the job ID and control of the terminal to\n    you. This way, you can continue to use the CLI. To resume the deployment,\n    run \"sfdx project deploy resume\". To check the status of the deployment, run\n    \"sfdx project deploy report\".\n\n  --coverage-formatters=clover|cobertura|html-spa|html|json|json-summary|lcovonly|none|teamcity|text|text-summary...\n\n    Format of the code coverage results.\n\n    For multiple formatters, repeat the flag for each formatter.\n    --coverage-formatters lcov --coverage-formatters clover\n\nCONFIGURATION VARIABLES\n  target-org       Username or alias of the org that all commands run against by\n                   default. (sf only)\n  org-api-version  API version of your project. Default: API version of your Dev\n                   Hub org.\n\nENVIRONMENT VARIABLES\n  SF_TARGET_ORG        Username or alias of your default org. Overrides the\n                       target-org configuration variable.\n  SF_USE_PROGRESS_BAR  Set to false to disable the progress bar when running the\n                       metadata deploy command.\n\nERROR CODES\n  Succeeded (0)          The deploy succeeded.\n  Canceled (1)           The deploy was canceled.\n  Failed (1)             The deploy failed.\n  SucceededPartial (68)  The deploy partially succeeded.\n  InProgress (69)        The deploy is in progress.\n  Pending (69)           The deploy is pending.\n  Canceling (69)         The deploy is being canceled\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_52.txt"}}],["958af838-34c0-45e2-948c-75e5b9f4f549",{"pageContent":"\n\nCancel a deploy operation.\n\nUSAGE\n  $ sfdx deploy metadata cancel [--json] [--async | -w <value>] [-i <value>]\n  [-r]\n\nFLAGS\n  -i, --job-id=<value>   Job ID of the deploy operation you want to cancel.\n  -r, --use-most-recent  Use the job ID of the most recent deploy operation.\n  -w, --wait=<minutes>   Number of minutes to wait for the command to complete\n                         and display results.\n  --async                Run the command asynchronously.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Cancel a deploy operation.\n\n  Use this command to cancel a deploy operation that hasn't yet completed in the\n  org. Deploy operations include standard deploys, quick deploys, deploy\n  validations, and deploy cancellations.\n\n  Run this command by either passing it a job ID or specifying the\n  --use-most-recent flag to use the job ID of the most recent deploy operation.\n\nALIASES\n  $ sfdx deploy metadata cancel\n\nEXAMPLES\n  Cancel a deploy operation using a job ID:\n\n    $ sfdx deploy metadata cancel --job-id 0Af0x000017yLUFCA2\n\n  Cancel the most recent deploy operation:\n\n    $ sfdx deploy metadata cancel --use-most-recent\n\nFLAG DESCRIPTIONS\n  -i, --job-id=<value>  Job ID of the deploy operation you want to cancel.\n\n    These commands return a job ID if they time out or you specified the --async\n    flag:\n\n    - sfdx project deploy start\n    - sfdx project deploy validate\n    - sfdx project deploy quick\n    - sfdx project deploy cancel\n\n    The job ID is valid for 10 days from when you started the deploy operation.\n\n  -r, --use-most-recent  Use the job ID of the most recent deploy operation.\n\n    For performance reasons, this flag uses job IDs for deploy operations that\n    started only in the past 3 days or less. If your most recent deploy\n    operations was more than 3 days ago, this flag won't find a job ID.\n\n  -w, --wait=<minutes>\n\n    Number of minutes to wait for the command to complete and display results.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you. To resume watching the cancellation,\n    run \"sfdx project deploy resume\". To check the status of the cancellation,\n    run \"sfdx project deploy report\".\n\n  --async  Run the command asynchronously.\n\n    The command immediately returns the control of the terminal to you. This\n    way, you can continue to use the CLI. To resume watching the cancellation,\n    run \"sfdx project deploy resume\". To check the status of the cancellation,\n    run \"sfdx project deploy report\"\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_53.txt"}}],["b07096f9-49c5-47d0-bbbe-4b5ccf129d59",{"pageContent":"\n\nPreview a deployment to see what will deploy to the org, the potential conflicts, and the ignored files.\n\nUSAGE\n  $ sfdx project deploy preview -o <value> [--json] [-c] [-x <value> | -d <value> |\n    -m <value>]\n\nFLAGS\n  -c, --ignore-conflicts       Don't display conflicts in preview of the\n                               deployment.\n  -d, --source-dir=<value>...  Path to the local source files to preview.\n  -m, --metadata=<value>...    Metadata component names to preview.\n  -o, --target-org=<value>     (required) Login username or alias for the target\n                               org.\n  -x, --manifest=<value>       Full file path for manifest (package.xml) of\n                               components to preview.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Preview a deployment to see what will deploy to the org, the potential\n  conflicts, and the ignored files.\n\n  You must run this command from within a project.\n\n  The command outputs a table that describes what will happen if you run the\n  \"sfdx project deploy start\" command. The table lists the metadata components\n  that will be deployed and deleted. The table also lists the current conflicts\n  between files in your local project and components in the org. Finally, the\n  table lists the files that won't be deployed because they're included in your\n  .forceignore file.\n\n  If your org allows source tracking, then this command displays potential\n  conflicts between the org and your local project. Some orgs, such as\n  production org, never allow source tracking. Source tracking is enabled by\n  default on scratch and sandbox orgs; you can disable source tracking when you\n  create the orgs by specifying the --no-track-source flag on the \"sfdx org\n  create scratch|sandbox\" commands.\n\n  To preview the deployment of multiple metadata components, either set multiple\n  --metadata <name> flags or a single --metadata flag with multiple names\n  separated by spaces. Enclose names that contain spaces in one set of double\n  quotes. The same syntax applies to --manifest and --source-dir.\n\nALIASES\n  $ sfdx deploy metadata preview\n\nEXAMPLES\n  NOTE: The commands to preview a deployment and actually deploy it use similar flags. We provide a few preview examples here, but see the help for \"sfdx project deploy start\" for more examples that you can adapt for previewing.\n\n  Preview the deployment of source files in a directory, such as force-app, to\n  your default org:\n\n    $ sfdx project deploy preview  --source-dir force-app\n\n  Preview the deployment of all Apex classes to an org with alias\n  \"my-scratch\":\n\n    $ sfdx project deploy preview --metadata ApexClass --target-org \\\n      my-scratch\n\n  Preview deployment of a specific Apex class:\n\n    $ sfdx project deploy preview --metadata ApexClass:MyApexClass\n\n  Preview deployment of all components listed in a manifest:\n\n    $ sfdx project deploy preview --manifest path/to/package.xml\n\nFLAG DESCRIPTIONS\n  -c, --ignore-conflicts  Don't display conflicts in preview of the deployment.\n\n    This flag applies only to orgs that allow source tracking. It has no effect\n    on orgs that don't allow it, such as production orgs.\n\n  -d, --source-dir=<value>...  Path to the local source files to preview.\n\n    The supplied path can be to a single file (in which case the operation is\n    applied to only one file) or to a folder (in which case the operation is\n    applied to all metadata types in the directory and its subdirectories).\n\n    If you specify this flag, don’t specify --metadata or --manifest.\n\n  -o, --target-org=<value>  Login username or alias for the target org.\n\n    Overrides your default org.\n\n  -x, --manifest=<value>\n\n    Full file path for manifest (package.xml) of components to preview.\n\n    All child components are included. If you specify this flag, don’t specify\n    --metadata or --source-dir\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_54.txt"}}],["43697ba8-921d-4707-8d95-131af7139eee",{"pageContent":"\n\nQuickly deploy a validated deployment to an org.\n\nUSAGE\n  $ sfdx project deploy quick [--json] [--async | -w <value>] [--concise |\n    --verbose] [-i <value>] [-o <value>] [-r] [-a <value>]\n\nFLAGS\n  -a, --api-version=<value>  Target API version for the deploy.\n  -i, --job-id=<value>       Job ID of the deployment you want to quick deploy.\n  -o, --target-org=<value>   Login username or alias for the target org.\n  -r, --use-most-recent      Use the job ID of the most recently validated\n                             deployment.\n  -w, --wait=<minutes>       [default: 33 minutes] Number of minutes to wait for\n                             the command to complete and display results.\n  --async                    Run the command asynchronously.\n  --concise                  Show concise output of the deploy result.\n  --verbose                  Show verbose output of the deploy result.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Quickly deploy a validated deployment to an org.\n\n  Before you run this command, first create a validated deployment with the\n  \"sfdx project deploy validate\" command, which returns a job ID. Validated\n  deployments haven't been deployed to the org yet; you deploy them with this\n  command. Either pass the job ID to this command or use the --use-most-recent\n  flag to use the job ID of the most recently validated deployment. For the\n  quick deploy to succeed, the associated validated deployment must also have\n  succeeded.\n\n  Executing this quick deploy command takes less time than a standard deploy\n  because it skips running Apex tests. These tests were previously run as part\n  of the validation. Validating first and then running a quick deploy is useful\n  if the deployment to your production org take several hours and you don’t want\n  to risk a failed deploy.\n\n  This command doesn't support source-tracking. The source you deploy overwrites\n  the corresponding metadata in your org. This command doesn’t attempt to merge\n  your source with the versions in your org.\n\nALIASES\n  $ sfdx deploy metadata quick\n\nEXAMPLES\n  Run a quick deploy to your default org using a job ID:\n\n    $ sfdx project deploy quick --job-id 0Af0x000017yLUFCA2\n\n  Asynchronously run a quick deploy of the most recently validated deployment\n  to an org with alias \"my-prod-org\":\n\n    $ sfdx project deploy quick --async --use-most-recent --target-org \\\n      my-prod-org\n\nFLAG DESCRIPTIONS\n  -a, --api-version=<value>  Target API version for the deploy.\n\n    Use this flag to override the default API version with the API version of\n    your package.xml file. The default API version is the latest version\n    supported by the CLI.\n\n  -i, --job-id=<value>  Job ID of the deployment you want to quick deploy.\n\n    The job ID is valid for 10 days from when you started the validation.\n\n  -o, --target-org=<value>  Login username or alias for the target org.\n\n    Overrides your default org.\n\n  -r, --use-most-recent\n\n    Use the job ID of the most recently validated deployment.\n\n    For performance reasons, this flag uses only job IDs that were validated in\n    the past 3 days or less. If your most recent deployment validation was more\n    than 3 days ago, this flag won't find a job ID.\n\n  -w, --wait=<minutes>\n\n    Number of minutes to wait for the command to complete and display results.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you. To resume watching the deploy, run\n    \"sfdx project deploy resume\". To check the status of the deploy, run \"sfdx\n    project deploy report\".\n\n  --async  Run the command asynchronously.\n\n    The command immediately returns the control of the terminal to you. This\n    way, you can continue to use the CLI. To resume watching the deploy, run\n    \"sfdx project deploy resume\". To check the status of the deploy, run \"sfdx\n    project deploy report\".\n\nERROR CODES\n  Succeeded (0)          The deploy succeeded.\n  Canceled (1)           The deploy was canceled.\n  Failed (1)             The deploy failed.\n  SucceededPartial (68)  The deploy partially succeeded.\n  InProgress (69)        The deploy is in progress.\n  Pending (69)           The deploy is pending.\n  Canceling (69)         The deploy is being canceled\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_55.txt"}}],["5e0e9b66-c885-415f-82fd-35ca6a155191",{"pageContent":"\n\nCheck the status of a deploy operation.\n\nUSAGE\n  $ sfdx deploy metadata report [--json] [-i <value>] [-r] [--results-dir <value>\n    --junit --coverage-formatters clover|cobertura|html-spa|html|json|json-summa\n    ry|lcovonly|none|teamcity|text|text-summary]\n\nFLAGS\n  -i, --job-id=<value>               Job ID of the deploy operation you want to\n                                     check the status of.\n  -r, --use-most-recent              Use the job ID of the most recent deploy\n                                     operation.\n  --coverage-formatters=<option>...  Format of the code coverage results.\n                                     <options: clover|cobertura|html-spa|html|js\n                                     on|json-summary|lcovonly|none|teamcity|text\n                                     |text-summary>\n  --junit                            Output JUnit test results.\n  --results-dir=<value>              Output directory for code coverage and\n                                     JUnit results; defaults to the deploy ID.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Check the status of a deploy operation.\n\n  Deploy operations include standard deploys, quick deploys, deploy validations,\n  and deploy cancellations.\n\n  Run this command by either passing it a job ID or specifying the\n  --use-most-recent flag to use the job ID of the most recent deploy operation.\n\nALIASES\n  $ sfdx deploy metadata report\n\nEXAMPLES\n  Check the status using a job ID:\n\n    $ sfdx deploy metadata report --job-id 0Af0x000017yLUFCA2\n\n  Check the status of the most recent deploy operation:\n\n    $ sfdx deploy metadata report --use-most-recent\n\nFLAG DESCRIPTIONS\n  -i, --job-id=<value>\n\n    Job ID of the deploy operation you want to check the status of.\n\n    These commands return a job ID if they time out or you specified the --async\n    flag:\n\n    - sfdx project deploy start\n    - sfdx project deploy validate\n    - sfdx project deploy quick\n    - sfdx project deploy cancel\n\n    The job ID is valid for 10 days from when you started the deploy operation.\n\n  -r, --use-most-recent  Use the job ID of the most recent deploy operation.\n\n    For performance reasons, this flag uses job IDs for deploy operations that\n    started only in the past 3 days or less. If your most recent operation was\n    more than 3 days ago, this flag won't find a job ID.\n\n  --coverage-formatters=clover|cobertura|html-spa|html|json|json-summary|lcovonly|none|teamcity|text|text-summary...\n\n    Format of the code coverage results.\n\n    For multiple formatters, repeat the flag for each formatter.\n    --coverage-formatters lcov --coverage-formatters clover\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_56.txt"}}],["dfbea98f-e279-4344-8eb4-70863f091166",{"pageContent":"\n\nResume watching a deploy operation.\n\nUSAGE\n  $ sfdx deploy metadata resume [--json] [--concise | --verbose] [-i <value>] [-r]\n    [-w <value>] [--results-dir <value> --junit --coverage-formatters\n    clover|cobertura|html-spa|html|json|json-summary|lcovonly|none|teamcity|text\n    |text-summary]\n\nFLAGS\n  -i, --job-id=<value>               Job ID of the deploy operation you want to\n                                     resume.\n  -r, --use-most-recent              Use the job ID of the most recent deploy\n                                     operation.\n  -w, --wait=<minutes>               Number of minutes to wait for the command\n                                     to complete and display results.\n  --concise                          Show concise output of the deploy operation\n                                     result.\n  --coverage-formatters=<option>...  Format of the code coverage results.\n                                     <options: clover|cobertura|html-spa|html|js\n                                     on|json-summary|lcovonly|none|teamcity|text\n                                     |text-summary>\n  --junit                            Output JUnit test results.\n  --results-dir=<value>              Output directory for code coverage and\n                                     JUnit results; defaults to the deploy ID.\n  --verbose                          Show verbose output of the deploy operation\n                                     result.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Resume watching a deploy operation.\n\n  Use this command to resume watching a deploy operation if the original command\n  times out or you specified the --async flag. Deploy operations include\n  standard deploys, quick deploys, deploy validations, and deploy cancellations.\n  This command doesn't resume the original operation itself, because the\n  operation always continues after you've started it, regardless of whether\n  you're watching it or not.\n\n  Run this command by either passing it a job ID or specifying the\n  --use-most-recent flag to use the job ID of the most recent deploy operation.\n\nALIASES\n  $ sfdx deploy metadata resume\n\nEXAMPLES\n  Resume watching a deploy operation using a job ID:\n\n    $ sfdx deploy metadata resume --job-id 0Af0x000017yLUFCA2\n\n  Resume watching the most recent deploy operation:\n\n    $ sfdx deploy metadata resume --use-most-recent\n\nFLAG DESCRIPTIONS\n  -i, --job-id=<value>  Job ID of the deploy operation you want to resume.\n\n    These commands return a job ID if they time out or you specified the --async\n    flag:\n\n    - sfdx project deploy start\n    - sfdx project deploy validate\n    - sfdx project deploy quick\n    - sfdx project deploy cancel\n\n    The job ID is valid for 10 days from when you started the deploy operation.\n\n  -r, --use-most-recent  Use the job ID of the most recent deploy operation.\n\n    For performance reasons, this flag uses job IDs for deploy operations that\n    started only in the past 3 days or less. If your most recent operation was\n    more than 3 days ago, this flag won't find a job ID.\n\n  -w, --wait=<minutes>\n\n    Number of minutes to wait for the command to complete and display results.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you. To resume watching the deploy\n    operation, run this command again. To check the status of the deploy\n    operation, run \"sfdx project deploy report\".\n\n  --coverage-formatters=clover|cobertura|html-spa|html|json|json-summary|lcovonly|none|teamcity|text|text-summary...\n\n    Format of the code coverage results.\n\n    For multiple formatters, repeat the flag for each formatter.\n    --coverage-formatters lcov --coverage-formatters clover\n\nENVIRONMENT VARIABLES\n  SF_USE_PROGRESS_BAR  Set to false to disable the progress bar when running the\n                       metadata deploy command.\n\nERROR CODES\n  Succeeded (0)          The deploy succeeded.\n  Canceled (1)           The deploy was canceled.\n  Failed (1)             The deploy failed.\n  SucceededPartial (68)  The deploy partially succeeded.\n  InProgress (69)        The deploy is in progress.\n  Pending (69)           The deploy is pending.\n  Canceling (69)         The deploy is being canceled\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_57.txt"}}],["30cb3762-2ab6-4569-92b4-d024d7456e43",{"pageContent":"\n\nValidate a metadata deployment without actually executing it.\n\nUSAGE\n  $ sfdx project deploy validate -o <value> [--json] [-a <value>] [--async]\n    [--concise | --verbose] [-x <value>] [-m <value>] [-d <value>]\n    [--single-package --metadata-dir <value>] [-t <value>] [-l\n    RunAllTestsInOrg|RunLocalTests|RunSpecifiedTests] [-w <value>]\n\nFLAGS\n  -a, --api-version=<value>    Target API version for the validation.\n  -d, --source-dir=<value>...  Path to the local source files to validate for\n                               deployment.\n  -l, --test-level=<option>    [default: RunLocalTests] Deployment Apex testing\n                               level.\n                               <options:\n                               RunAllTestsInOrg|RunLocalTests|RunSpecifiedTests>\n  -m, --metadata=<value>...    Metadata component names to validate for\n                               deployment.\n  -o, --target-org=<value>     (required) Login username or alias for the target\n                               org.\n  -t, --tests=<value>...       Apex tests to run when --test-level is\n                               RunSpecifiedTests.\n  -w, --wait=<minutes>         [default: 33 minutes] Number of minutes to wait\n                               for the command to complete and display results.\n  -x, --manifest=<value>       Full file path for manifest (package.xml) of\n                               components to validate for deployment.\n  --async                      Run the command asynchronously.\n  --concise                    Show concise output of the validation result.\n  --metadata-dir=<value>       Root of directory or zip file of metadata\n                               formatted files to deploy.\n  --single-package             Indicates that the metadata zip file points to a\n                               directory structure for a single package.\n  --verbose                    Show verbose output of the validation result.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Validate a metadata deployment without actually executing it.\n\n  Use this command to verify whether a deployment will succeed without actually\n  deploying the metadata to your org. This command is similar to \"sfdx project\n  deploy start\", except you're required to run Apex tests, and the command\n  returns a job ID rather than executing the deployment. If the validation\n  succeeds, then you pass this job ID to the \"sfdx project deploy quick\" command\n  to actually deploy the metadata. This quick deploy takes less time because it\n  skips running Apex tests. The job ID is valid for 10 days from when you\n  started the validation. Validating first is useful if the deployment to your\n  production org take several hours and you don’t want to risk a failed deploy.\n\n  You must run this command from within a project.\n\n  This command doesn't support source-tracking. When you quick deploy with the\n  resulting job ID, the source you deploy overwrites the corresponding metadata\n  in your org.\n\n  To validate the deployment of multiple metadata components, either set\n  multiple --metadata <name> flags or a single --metadata flag with multiple\n  names separated by spaces. Enclose names that contain spaces in one set of\n  double quotes. The same syntax applies to --manifest and --source-dir.\n\nALIASES\n  $ sfdx deploy metadata validate\n\nEXAMPLES\n  NOTE: These examples focus on validating large deployments. See the help for \"sfdx project deploy start\" for examples of deploying smaller sets of metadata which you can also use to validate.\n\n  Validate the deployment of all source files in a directory to the default\n  org:\n\n    $ sfdx project deploy validate --source-dir path/to/source\n\n  Asynchronously validate the deployment and run all tests in the org with\n  alias \"my-prod-org\"; command immediately returns the job ID:\n\n    $ sfdx project deploy validate --source-dir path/to/source --async \\\n      --test-level RunAllTestsInOrg --target-org my-prod-org\n\n  Validate the deployment of all components listed in a manifest:\n\n    $ sfdx project deploy validate --manifest path/to/package.xml\n\nFLAG DESCRIPTIONS\n  -a, --api-version=<value>  Target API version for the validation.\n\n    Use this flag to override the default API version with the API version of\n    your package.xml file. The default API version is the latest version\n    supported by the CLI.\n\n  -d, --source-dir=<value>...\n\n    Path to the local source files to validate for deployment.\n\n    The supplied path can be to a single file (in which case the operation is\n    applied to only one file) or to a folder (in which case the operation is\n    applied to all metadata types in the directory and its subdirectories).\n\n    If you specify this flag, don’t specify --metadata or --manifest.\n\n  -l, --test-level=RunAllTestsInOrg|RunLocalTests|RunSpecifiedTests\n\n    Deployment Apex testing level.\n\n    Valid values are:\n\n    - RunSpecifiedTests — Runs only the tests that you specify with the\n    --run-tests flag. Code coverage requirements differ from the default\n    coverage requirements when using this test level. Executed tests must\n    comprise a minimum of 75% code coverage for each class and trigger in the\n    deployment package. This coverage is computed for each class and trigger\n    individually and is different than the overall coverage percentage.\n\n    - RunLocalTests — All tests in your org are run, except the ones that\n    originate from installed managed and unlocked packages. This test level is\n    the default.\n\n    - RunAllTestsInOrg — All tests in your org are run, including tests of\n    managed packages.\n\n  -o, --target-org=<value>  Login username or alias for the target org.\n\n    Overrides your default org.\n\n  -t, --tests=<value>...\n\n    Apex tests to run when --test-level is RunSpecifiedTests.\n\n    If a test name contains a space, enclose it in double quotes.\n    For multiple test names, use one of the following formats:\n\n    - Repeat the flag for multiple test names: --tests Test1 --tests Test2\n    --tests \"Test With Space\"\n    - Separate the test names with spaces: --tests Test1 Test2 \"Test With Space\"\n\n  -w, --wait=<minutes>\n\n    Number of minutes to wait for the command to complete and display results.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you and returns the job ID. To resume\n    watching the validation, run \"sfdx project deploy resume\". To check the\n    status of the validation, run \"sfdx project deploy report\".\n\n  -x, --manifest=<value>\n\n    Full file path for manifest (package.xml) of components to validate for\n    deployment.\n\n    All child components are included. If you specify this flag, don’t specify\n    --metadata or --source-dir.\n\n  --async  Run the command asynchronously.\n\n    The command immediately returns the job ID and control of the terminal to\n    you. This way, you can continue to use the CLI. To resume watching the\n    validation, run \"sfdx project deploy resume\". To check the status of the\n    validation, run \"sfdx project deploy report\".\n\nCONFIGURATION VARIABLES\n  target-org       Username or alias of the org that all commands run against by\n                   default. (sf only)\n  org-api-version  API version of your project. Default: API version of your Dev\n                   Hub org.\n\nENVIRONMENT VARIABLES\n  SF_TARGET_ORG        Username or alias of your default org. Overrides the\n                       target-org configuration variable.\n  SF_USE_PROGRESS_BAR  Set to false to disable the progress bar when running the\n                       metadata deploy command.\n\nERROR CODES\n  Succeeded (0)          The deploy succeeded.\n  Canceled (1)           The deploy was canceled.\n  Failed (1)             The deploy failed.\n  SucceededPartial (68)  The deploy partially succeeded.\n  InProgress (69)        The deploy is in progress.\n  Pending (69)           The deploy is pending.\n  Canceling (69)         The deploy is being canceled\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_58.txt"}}],["e5be0d12-58ff-4b67-a609-acd4eeb509dd",{"pageContent":"\n\nAudit messages in a plugin's messages directory to locate unused messages and missing messages that have references in source code.\n\nUSAGE\n  $ sfdx dev audit messages [--json] [-p <value>] [-m <value>] [-s <value>]\n\nFLAGS\n  -m, --messages-dir=<value>  [default: messages] Directory that contains the\n                              plugin's message files.\n  -p, --project-dir=<value>   [default: .] Location of the project where\n                              messages are to be audited.\n  -s, --source-dir=<value>    [default: src] Directory that contains the\n                              plugin's source code.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nEXAMPLES\n  Audit messages using default directories:\n\n    $ sfdx dev audit messages\n\n  Audit messages in the \"messages\" directory in the current working directory;\n  the plugin's source directory is in \"src\":\n\n    $ sfdx dev audit messages --messages-dir ./messages --source-dir ./src\n\nFLAG DESCRIPTIONS\n  -m, --messages-dir=<value>  Directory that contains the plugin's message files.\n\n    The default is the \"messages\" directory in the current working directory.\n\n  -s, --source-dir=<value>  Directory that contains the plugin's source code.\n\n    The default is the \"src\" directory in the current working directory\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_59.txt"}}],["be73000d-07dd-4313-a7c4-22103ac5dd68",{"pageContent":"\n\nGenerate an Apex trigger.\n\nUSAGE\n  $ sfdx apex generate trigger -n <value> [--json] [-t ApexTrigger] [-d <value>]\n    [--api-version <value>] [-s <value>] [-e before insert|before update|before\n    delete|after insert|after update|after delete|after undelete]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -e, --event=<option>...   [default: before insert] Events that fire the\n                            trigger.\n                            <options: before insert|before update|before\n                            delete|after insert|after update|after delete|after\n                            undelete>\n  -n, --name=<value>        (required) Name of the generated Apex trigger\n  -s, --sobject=<value>     [default: SOBJECT] Salesforce object to generate a\n                            trigger on.\n  -t, --template=<option>   [default: ApexTrigger] Template to use for file\n                            creation.\n                            <options: ApexTrigger>\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate an Apex trigger.\n\n  Generates the Apex trigger *.trigger file and associated metadata file. These\n  files must be contained in a parent directory called \"triggers\" in your\n  package directory. Either run this command from an existing directory of this\n  name, or use the --output-dir flag to generate one or point to an existing\n  one.\n\n  If you don't specify the --sobject flag, the .trigger file contains the\n  generic placeholder SOBJECT; replace it with the Salesforce object you want to\n  generate a trigger for. If you don't specify --event, \"before insert\" is used.\n\nALIASES\n  $ sfdx force apex trigger create\n\nEXAMPLES\n  Generate two files associated with the MyTrigger Apex trigger\n  (MyTrigger.trigger and MyTrigger.trigger-meta.xml) in the current directory:\n\n    $ sfdx apex generate trigger --name MyTrigger\n\n  Similar to the previous example, but generate the files in the\n  \"force-app/main/default/triggers\" directory:\n\n    $ sfdx apex generate trigger --name MyTrigger --output-dir \\\n      force-app/main/default/triggers\n\n  Generate files for a trigger that fires on the Account object before and\n  after an insert:\n\n    $ sfdx apex generate trigger --name MyTrigger --sobject Account --event \\\n      \"before insert,after insert\"\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Apex trigger\n\n    The name can be up to 40 characters and must start with a letter.\n\n  -t, --template=ApexTrigger  Template to use for file creation.\n\n    Supplied parameter values or default values are filled into a copy of the\n    template\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_6.txt"}}],["498049dc-a21a-4487-9aff-c87dff2b1b9f",{"pageContent":"\n\nConfigure a GitHub repo for the GitHub Actions pipeline.\n\nUSAGE\n  $ sfdx dev configure repo -r <value> [--json] [-d] [-b <value>]\n\nFLAGS\n  -b, --bot=<value>         [default: SF-CLI-BOT] GitHub login/username for the\n                            bot.\n  -d, --dry-run             Make no changes.\n  -r, --repository=<value>  (required) GitHub owner/repo for which you want to\n                            configure GitHub Actions.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Configure a GitHub repo for the GitHub Actions pipeline.\n\n  Sets up labels and exempts the CLI bot for branch protection and PR rules.\n\nEXAMPLES\n  Configure the repo \"testPackageRelease\", with owner \"salesforcecli\", for\n  GitHub Actions.\n\n    $ sfdx dev configure repo --repository salesforcecli/testPackageRelease\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_60.txt"}}],["506f4b45-bc3a-4b5b-a074-e49b60866bf5",{"pageContent":"\n\nEnsures a GitHub repo has correct access to secrets based on its workflows.\n\nUSAGE\n  $ sfdx dev configure secrets -r <value> [--json] [-d]\n\nFLAGS\n  -d, --dry-run             Make no changes.\n  -r, --repository=<value>  (required) Github owner/repo.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Ensures a GitHub repo has correct access to secrets based on its workflows.\n\n  Inspects a repo's yaml files and verifies that secrets required are available\n  for the repo (either set at the repo level or shared via organization-level\n  secrets).\n\n  This command requires scope:admin permissions to inspect the org secrets and\n  admin access to the repo to inspect the repo secrets.\n\nEXAMPLES\n  Ensure secrets access for the repo \"testPackageRelease\", with owner \"salesforcecli\":\n\n  $ sfdx dev configure secrets --repository salesforcecli/testPackageRelease\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_61.txt"}}],["aa0f692f-4f4c-4e50-84e9-36a7763ada2d",{"pageContent":"\n\nConvert a .json messages file into Markdown.\n\nUSAGE\n  $ sfdx dev convert messages -f <value> [--json] [-p <value>]\n\nFLAGS\n  -f, --file-name=<value>...  (required) Filename to convert.\n  -p, --project-dir=<value>   [default: .] Location of the project whose\n                              messages are to be converted.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nEXAMPLES\n  Convert the my-command.json message file into my-command.md with the\n  standard messages headers:\n\n    $ sfdx dev convert messages --filename my-command.json\n\n  Similar to previous example, but specify the plugin project directory:\n\n  $ sfdx dev convert messages --project-dir ./path/to/plugin --filename my-command.json\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_62.txt"}}],["06c975e7-8534-4a6b-9177-57d13f92e46f",{"pageContent":"\n\nConvert a script file that contains deprecated sfdx-style commands to use the new sf-style commands instead.\n\nUSAGE\n  $ sfdx dev convert script -s <value> [--json]\n\nFLAGS\n  -s, --script=<value>  (required) Filepath to the script you want to convert.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Convert a script file that contains deprecated sfdx-style commands to use the\n  new sf-style commands instead.\n\n  Important: Use this command only to get started on the sfdx->sf script\n  migration. We don't guarantee that the new sf-style command replacements work\n  correctly or as you expect. You must test, and probably update, the new script\n  before putting it into production. We also don't guarantee that the JSON\n  results are the same as before.\n\n  This command can convert a large part of your script, but possibly not all.\n  There are some sfdx-style commands that don't have an obvious sf-style\n  equivalent. In this case, this command doesn't replace the sfdx-style command\n  but instead adds a comment to remind you that you must convert it manually.\n  See the Salesforce CLI Command Reference for migration information about each\n  deprecated sfdx-style command: https://developer.salesforce.com/docs/atlas.en-\n  us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference.htm.\n\n  This command is interactive; as it scans your script, it prompts you when it\n  finds an sfdx-style command or flag and asks if you want to convert it to the\n  displayed suggestion. The command doesn't update the script file directly;\n  rather, it creates a new file whose name is the original name but with\n  \"-converted\" appended to it. The script replaces all instances of \"sfdx\" with\n  \"sf\". For each prompt you answer \"y\" to, the command replaces the sfdx-style\n  names with their equivalent sf-style ones. For example, \"sfdx\n  force:apex:execute --targetusername myscratch\" is replaced with \"sf apex run\n  --target-org myscratch\".\n\nEXAMPLES\n  Convert the YAML file called \"myScript.yml\" located in the current\n  directory; the new file that contains the replacements is called\n  \"myScript-converted.yml\":\n\n    $ sfdx dev convert script --script ./myScript.yml\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_63.txt"}}],["7f7b75e7-3c23-4690-bb3b-a9fe9d4eb39e",{"pageContent":"\n\nGenerate a new sf command.\n\nUSAGE\n  $ sfdx dev generate command -n <value> [--force] [--nuts] [--unit]\n\nFLAGS\n  -n, --name=<value>  (required) Name of the new command. Use colons to separate\n                      the topic and command names.\n  --force             Overwrite existing files.\n  --[no-]nuts         Generate a NUT test file for the command.\n  --[no-]unit         Generate a unit test file for the command.\n\nDESCRIPTION\n  Generate a new sf command.\n\n  You must run this command from within a plugin directory, such as the\n  directory created with the \"sf dev generate plugin\" command.\n\n  The command generates basic source files, messages (\\*.md), and test files for\n  your new command.  The Typescript files contain import statements for the\n  minimum required Salesforce libraries, and scaffold some basic code. The new\n  type names come from the value you passed to the --name flag.\n\n  The command updates the package.json file, so if it detects conflicts with the\n  existing file, you're prompted whether you want to overwrite the file. There\n  are a number of package.json updates required for a new command, so we\n  recommend you answer \"y\" so the command takes care of them all. If you answer\n  \"n\", you must update the package.json file manually.\n\nEXAMPLES\n  Generate the files for a new \"sf my exciting command\":\n\n    $ sfdx dev generate command --name my:exciting:command\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_64.txt"}}],["ce97a504-91e6-419d-94cb-421876bf1cf7",{"pageContent":"\n\nGenerate a flag for an existing command.\n\nUSAGE\n  $ sfdx dev generate flag [-d]\n\nFLAGS\n  -d, --dry-run  Print new flag code instead of adding it to the command file.\n\nDESCRIPTION\n  Generate a flag for an existing command.\n\n  You must run this command from within a plugin directory, such as the\n  directory created with the \"sf dev generate plugin\" command.\n\n  This command is interactive. It first discovers all the commands currently\n  implemented in the plugin, and asks you which you want to create a new flag\n  for. It then prompts for other flag properties, such as its long name,\n  optional short name, type, whether it's required, and so on. Long flag names\n  must be kebab-case and not camelCase. The command doesn't let you use an\n  existing long or short flag name. When the command completes, the Typescript\n  file for the command is updated with the code for the new flag.\n\n  Use the --dry-run flag to review new code for the command file without\n  actually udpating it.\n\nEXAMPLES\n  Generate a new flag and update the command file:\n\n    $ sfdx dev generate flag\n\n  Don't actually update the command file, just view the generated code:\n\n    $ sfdx dev generate flag --dry-run\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_65.txt"}}],["51d71230-f670-4432-948e-59bb63a307ae",{"pageContent":"\n\nGenerate a new sf hook.\n\nUSAGE\n  $ sfdx dev generate hook --event\n    sf:env:list|sf:env:display|sf:deploy|sf:logout [--force]\n\nFLAGS\n  --event=<option>  (required) Event to run hook on. Use colons to separate\n                    topic and command names of the event.\n                    <options: sf:env:list|sf:env:display|sf:deploy|sf:logout>\n  --force           Overwrite existing files.\n\nDESCRIPTION\n  Generate a new sf hook.\n\n  You must run this command from within a plugin directory, such as the\n  directory created with the \"sf dev generate plugin\" command.\n\n  The command generates a basic Typescript source file in the \"src/hooks\"\n  directory to get you started. The source file's name is based on the event\n  you're hooking into, such as envList.ts for the \"sf env list\" command.\n\n  The command updates the package.json file, so if it detects conflicts with the\n  existing file, you're prompted whether you want to overwrite the file. There\n  are a number of package.json updates required for a new hook, so we recommend\n  you answer \"y\" so the command takes care of them all. If you answer \"n\", you\n  must update the package.json file manually.\n\nEXAMPLES\n  Generate source file for a hook into the \"sf env display\" command:\n\n    $ sfdx dev generate hook --event sf:env:display\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_66.txt"}}],["d02cb16c-9aa6-43f7-ac4b-879e0a5dbb9f",{"pageContent":"\n\nGenerate a new library.\n\nUSAGE\n  $ sfdx dev generate library\n\nDESCRIPTION\n  Generate a new library.\n\n  This command is interactive. You're prompted for information to populate the\n  new library, such as the npm scope (which must start with \"@\"), the name and\n  description of the library, and its GitHub organization. The command clones\n  the 'forcedotcom/library-template' GitHub repository, installs the library's\n  npm package dependencies using yarn install, and updates the package\n  properties.\n\n  When the command completes, your new library contains a few sample source and\n  test files to get you started.\n\nEXAMPLES\n  $ sfdx dev generate library\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_67.txt"}}],["0011649c-2167-41ea-a2d6-c88d55e692a5",{"pageContent":"\n\nGenerate a new sf plugin.\n\nUSAGE\n  $ sfdx dev generate plugin\n\nDESCRIPTION\n  Generate a new sf plugin.\n\n  This command is interactive. You're prompted for information to populate your\n  new plugin, such as its name, description, author, and percentage of code\n  coverage you want. The command clones the 'salesforcecli/plugin-template-sf'\n  GitHub repository, installs the plug-in's npm package dependencies using yarn\n  install, and updates the package properties.\n\n  When the command completes, your new plugin contains the source, message, and\n  test files for a sample \"sf hello world\" command.\n\nALIASES\n  $ sfdx plugins generate\n\nEXAMPLES\n  $ sfdx dev generate plugin\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_68.txt"}}],["44027ae7-ed7c-4d48-88bd-3a47d5dec2b1",{"pageContent":"\n\nRun a hook. For testing purposes only.\n\nUSAGE\n  $ sfdx dev hook HOOK [--json] [-p <value>]\n\nARGUMENTS\n  HOOK  Name of hook to execute.\n\nFLAGS\n  -p, --plugin=<value>  Specific plugin from which to execute hook\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nEXAMPLES\n  Execute a hook by name:\n\n    $ sfdx dev hook sf:env:list\n\n  Execute a hook by name in a specific plugin:\n\n    $ sfdx dev hook sf:env:list --plugin env\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_69.txt"}}],["05056626-a379-4af9-ad8c-484dd304ae9c",{"pageContent":"\n\nFetch the specified log or given number of most recent logs from the org.\n\nUSAGE\n  $ sfdx apex get log -o <value> [--json] [--api-version <value>] [-i\n    <value>] [-n <value>] [-d <value>]\n\nFLAGS\n  -d, --output-dir=<value>  Directory for saving the log files.\n  -i, --log-id=<value>      ID of the specific log to display.\n  -n, --number=<value>      Number of the most recent logs to display.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Fetch the specified log or given number of most recent logs from the org.\n\n  To get the IDs for your debug logs, run \"sfdx apex log list\". Executing this\n  command without flags returns the most recent log.\n\nALIASES\n  $ sfdx force apex log get\n\nEXAMPLES\n  Fetch the log in your default org using an ID:\n\n    $ sfdx apex get log --log-id <log id>\n\n  Fetch the log in the org with the specified username using an ID:\n\n    $ sfdx apex get log --log-id <log id> --target-org me@my.org\n\n  Fetch the two most recent logs in your default org:\n\n    $ sfdx apex get log --number 2\n\n  Similar to previous example, but save the two log files in the specified\n  directory:\n\n    $ sfdx apex get log --output-dir /Users/sfdxUser/logs --number 2\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the log files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_7.txt"}}],["2bf835b5-a7a3-4251-ba1d-d3dc7ac6e0ec",{"pageContent":"\n\nGather CLI configuration data and run diagnostic tests to discover and report potential problems in your environment.\n\nUSAGE\n  $ sfdx doctor [--json] [-c <value>] [-p <value>] [-d <value>] [-i]\n\nFLAGS\n  -c, --command=<value>     Command to run in debug mode; results are written to\n                            a log file.\n  -d, --output-dir=<value>  Directory to save all created files rather than the\n                            current working directory.\n  -i, --create-issue        Create a new issue on our GitHub repo and attach all\n                            diagnostic results.\n  -p, --plugin=<value>      Specific plugin on which to run diagnostics.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Gather CLI configuration data and run diagnostic tests to discover and report\n  potential problems in your environment.\n\n  When you run the doctor command without parameters, it first displays a\n  diagnostic overview of your environment. It then writes a detailed diagnosis\n  to a JSON file in the current directory. Use the --outputdir to specify a\n  different directory. To run diagnostic tests on a specific plugin, use the\n  --plugin parameter. If the plugin isn't listening to the doctor, then you get\n  a warning.\n\n  Use the --command parameter to run a specific command in debug mode; the\n  doctor writes both stdout and stderr to \\*.log files that you can provide to\n  Salesforce Customer Support or attach to a GitHub issue.\n\n  Plugin providers can also implement their own doctor diagnostic tests by\n  listening to the \"sf-doctor\" event and running plugin specific tests that are\n  then included in the doctor diagnostics log.\n\nEXAMPLES\n  Run CLI doctor diagnostics:\n\n    $ sfdx doctor\n\n  Run CLI doctor diagnostics and the specified command, and write the debug\n  output to a file:\n\n    $ sfdx doctor --command \"force:org:list --all\"\n\n  Run CLI doctor diagnostics for a specific plugin:\n\n    $ sfdx doctor --plugin @salesforce/plugin-source\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_70.txt"}}],["4ff9f1bf-f118-43b7-afcb-99b0f1ae1bc2",{"pageContent":"\n\nCreate a sandbox org.\n\nUSAGE\n  $ sfdx org create sandbox -o <value> [--json] [-f <value> | -n <value> | -l\n    Developer|Developer_Pro|Partial|Full] [-s] [-a <value>] [-w <value> |\n    --async] [-i <value> | ] [-c <value> | ] [--no-prompt] [--no-track-source]\n\nFLAGS\n  -a, --alias=<value>            Alias for the sandbox org.\n  -c, --clone=<value>            Name of the sandbox org to clone.\n  -f, --definition-file=<value>  Path to a sandbox definition file.\n  -i, --poll-interval=<seconds>  [default: 30 seconds] Number of seconds to wait\n                                 between retries.\n  -l, --license-type=<option>    Type of sandbox license.\n                                 <options: Developer|Developer_Pro|Partial|Full>\n  -n, --name=<value>             Name of the sandbox org.\n  -o, --target-org=<value>       (required) Username or alias of the production\n                                 org that contains the sandbox license.\n  -s, --set-default              Set the sandbox org as your default org.\n  -w, --wait=<minutes>           [default: 30 minutes] Number of minutes to wait\n                                 for the sandbox org to be ready.\n  --async                        Request the sandbox creation, but don't wait\n                                 for it to complete.\n  --no-prompt                    Don't prompt for confirmation about the sandbox\n                                 configuration.\n  --no-track-source              Do not use source tracking for this sandbox.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a sandbox org.\n\n  There are two ways to create a sandbox org: specify a definition file that\n  contains the sandbox options or use the --name and --license-type flags to\n  specify the two required options. If you want to set an option other than name\n  or license type, such as apexClassId, you must use a definition file.\n\nALIASES\n  $ sfdx env create sandbox\n\nEXAMPLES\n  Create a sandbox org using a definition file and give it the alias\n  \"MyDevSandbox\". The production org that contains the sandbox license has the\n  alias \"prodOrg\".\n\n    $ sfdx org create sandbox -f config/dev-sandbox-def.json --alias \\\n      MyDevSandbox --target-org prodOrg\n\n  Create a sandbox org by directly specifying its name and type of license\n  (Developer) instead of using a definition file. Set the sandbox org as your\n  default.\n\n    $ sfdx org create sandbox --name mysandbox --license-type Developer \\\n      --alias MyDevSandbox --target-org prodOrg --set-default\n\nFLAG DESCRIPTIONS\n  -a, --alias=<value>  Alias for the sandbox org.\n\n    When you create a sandbox, the generated usernames are based on the\n    usernames present in the production org. To ensure uniqueness, the new\n    usernames are appended with the name of the sandbox. For example, the\n    username \"user@example.com\" in the production org results in the username\n    \"user@example.com.mysandbox\" in a sandbox named \"mysandbox\". When you set an\n    alias for a sandbox org, it's assigned to the resulting username of the user\n    running this command.\n\n  -c, --clone=<value>  Name of the sandbox org to clone.\n\n    The value of clone must be an existing sandbox in the same target-org.\n\n  -f, --definition-file=<value>  Path to a sandbox definition file.\n\n    The sandbox definition file is a blueprint for the sandbox. You can create\n    different definition files for each sandbox type that you use in the\n    development process. See <https://developer.salesforce.com/docs/atlas.en-us.\n    sfdx_dev.meta/sfdx_dev/sfdx_dev_sandbox_definition.htm> for all the options\n    you can specify in the defintion file.\n\n  -n, --name=<value>  Name of the sandbox org.\n\n    The name must be a unique alphanumeric string (10 or fewer characters) to\n    identify the sandbox. You can’t reuse a name while a sandbox is in the\n    process of being deleted.\n\n  -o, --target-org=<value>\n\n    Username or alias of the production org that contains the sandbox license.\n\n    When it creates the sandbox org, Salesforce copies the metadata, and\n    optionally data, from your production org to the new sandbox org.\n\n  -w, --wait=<minutes>\n\n    Number of minutes to wait for the sandbox org to be ready.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal to you and displays the \"sfdx org resume sandbox\"\n    command you run to check the status of the create. The displayed command\n    includes the job ID for the running sandbox creation.\n\n  --async  Request the sandbox creation, but don't wait for it to complete.\n\n    The command immediately displays the job ID and returns control of the\n    terminal to you. This way, you can continue to use the CLI. To check the\n    status of the sandbox creation, run \"sfdx org resume sandbox\".\n\n  --no-track-source  Do not use source tracking for this sandbox.\n\n    We recommend you enable source tracking in Developer and Developer Pro\n    sandbox, which is why it's the default behavior. Source tracking allows you\n    to track the changes you make to your metadata, both in your local project\n    and in the sandbox, and to detect any conflicts between the two.\n\n    To disable source tracking in the new sandbox, specify the --no-track-source\n    flag. The main reason to disable source tracking is for performance. For\n    example, while you probably want to deploy metadata and run Apex tests in\n    your CI/CD jobs, you probably don't want to incur the costs of source\n    tracking (checking for conflicts, polling the SourceMember object, various\n    file system operations.) This is a good use case for disabling source\n    tracking in the sandbox\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_71.txt"}}],["2fba4038-5fa4-402d-befd-fe333971de2a",{"pageContent":"\n\nCreate a scratch org.\n\nUSAGE\n  $ sfdx org create scratch -v <value> [--json] [-a <value>] [--async] [-d] [-f\n    <value>] [-c] [-e developer|enterprise|group|professional|partner-developer|\n    partner-enterprise|partner-group|partner-professional] [-m] [-y <value>] [-w\n    <value>] [--api-version <value>] [-i <value>] [-t] [--username <value>]\n    [--description <value>] [--name <value>] [--release preview|previous]\n    [--admin-email <value>] [-i <value>]\n\nFLAGS\n  -a, --alias=<value>\n      Alias for the scratch org.\n\n  -d, --set-default\n      Set the scratch org as your default org\n\n  -e, --edition=<option>\n      Salesforce edition of the scratch org. Overrides the value of the \"edition\"\n      option in the definition file, if set.\n      <options: developer|enterprise|group|professional|partner-developer|partner-\n      enterprise|partner-group|partner-professional>\n\n  -f, --definition-file=<value>\n      Path to a scratch org definition file.\n\n  -i, --client-id=<value>\n      Consumer key of the Dev Hub connected app.\n\n  -i, --source-org=<value>\n      15-character ID of the org whose shape the new scratch org will be based on.\n      Overrides the value of the \"sourceOrg\" option in the definition file, if\n      set.\n\n  -t, --[no-]track-source\n      Use source tracking for this scratch org. Set --no-track-source to disable\n      source tracking.\n\n  -v, --target-dev-hub=<value>\n      (required) Username or alias of the Dev Hub org.\n\n  -w, --wait=<minutes>\n      [default: 5 minutes] Number of minutes to wait for the scratch org to be\n      ready.\n\n  -y, --duration-days=<days>\n      [default: 7 days] Number of days before the org expires.\n\n  --admin-email=<value>\n      Email address that will be applied to the org's admin user. Overrides the\n      value of the \"adminEmail\" option in the definition file, if set.\n\n  --api-version=<value>\n      Override the api version used for api requests made by this command\n\n  --async\n      Request the org, but don't wait for it to complete.\n\n  --description=<value>\n      Description of the scratch org in the Dev Hub. Overrides the value of the\n      \"description\" option in the definition file, if set.\n\n  --name=<value>\n      Name of the org, such as \"Acme Company\". Overrides the value of the\n      \"orgName\" option in the definition file, if set.\n\n  --release=<option>\n      Release of the scratch org as compared to the Dev Hub release.\n      <options: preview|previous>\n\n  --username=<value>\n      Username of the scratch org admin user. Overrides the value of the\n      \"username\" option in the definition file, if set.\n\nPACKAGING FLAGS\n  -c, --no-ancestors  Don't include second-generation managed package (2GP)\n                      ancestors in the scratch org.\n  -m, --no-namespace  Create the scratch org with no namespace, even if the Dev\n                      Hub has a namespace.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Create a scratch org.\n\n  There are two ways to create a scratch org: either specify a definition file\n  that contains the options or use the --edition flag to specify the one\n  required option.\n\n  For either method, you can also use these flags; if you use them with\n  --definition-file, they override their equivalent option in the scratch org\n  definition file:\n\n  * --description\n  * --name  (equivalent to the \"orgName\" option)\n  * --username\n  * --release\n  * --edition\n  * --admin-email (equivalent to the \"adminEmail\" option)\n  * --source-org (equivalent to the \"sourceOrg\" option)\n\n  If you want to set options other than the preceding ones, such as org features\n  or settings, you must use a definition file.\n\n  You must specify a Dev Hub to create a scratch org, either with the\n  --target-dev-hub flag or by setting your default Dev Hub with the\n  target-dev-hub configuration variable.\n\nALIASES\n  $ sfdx env create scratch\n\nEXAMPLES\n  Create a Developer edition scratch org using your default Dev Hub and give\n  the scratch org an alias:\n\n    $ sfdx org create scratch --edition=developer --alias my-scratch-org\n\n  Create a scratch org with a definition file. Specify the Dev Hub using its\n  alias, set the scratch org as your default, and specify that it expires in 3\n  days:\n\n    $ sfdx org create scratch --target-dev-hub MyHub --definition-file \\\n      config/project-scratch-def.json --set-default --duration-days 3\n\n  Create a preview Enterprise edition scratch org; for use only during\n  Salesforce release transition periods:\n\n    $ sfdx org create scratch --edition=enterprise --alias my-scratch-org \\\n      --target-dev-hub MyHub --release preview\n\nFLAG DESCRIPTIONS\n  -a, --alias=<value>  Alias for the scratch org.\n\n    New scratch orgs include one administrator by default. The admin user's\n    username is auto-generated and looks something like\n    test-wvkpnfm5z113@example.com. When you set an alias for a new scratch org,\n    it's assigned this username.\n\n  -e, --edition=developer|enterprise|group|professional|partner-developer|partner-enterprise|partner-group|partner-professional\n\n    Salesforce edition of the scratch org. Overrides the value of the \"edition\"\n    option in the definition file, if set.\n\n    The editions that begin with \"partner-\" are available only if the Dev Hub\n    org is a Partner Business Org.\n\n  -f, --definition-file=<value>  Path to a scratch org definition file.\n\n    The scratch org definition file is a blueprint for the scratch org. It\n    mimics the shape of an org that you use in the development life cycle, such\n    as acceptance testing, packaging, or production. See\n    <https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sf\n    dx_dev_scratch_orgs_def_file.htm> for all the option you can specify in the\n    definition file.\n\n  -t, --[no-]track-source\n\n    Use source tracking for this scratch org. Set --no-track-source to disable\n    source tracking.\n\n    We recommend you enable source tracking in scratch orgs, which is why it's\n    the default behavior. Source tracking allows you to track the changes you\n    make to your metadata, both in your local project and in the scratch org,\n    and to detect any conflicts between the two.\n\n    To disable source tracking in the new scratch org, specify the\n    --no-track-source flag. The main reason to disable source tracking is for\n    performance. For example, while you probably want to deploy metadata and run\n    Apex tests in your CI/CD jobs, you probably don't want to incur the costs of\n    source tracking (checking for conflicts, polling the SourceMember object,\n    various file system operations.) This is a good use case for disabling\n    source tracking in the scratch org.\n\n  -v, --target-dev-hub=<value>  Username or alias of the Dev Hub org.\n\n    Overrides the value of the target-dev-hub configuration variable, if set.\n\n  -w, --wait=<minutes>\n\n    Number of minutes to wait for the scratch org to be ready.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal to you and displays the job ID. To resume the\n    scratch org creation, run the org resume scratch command and pass it the job\n    ID.\n\n  --async  Request the org, but don't wait for it to complete.\n\n    The command immediately displays the job ID and returns control of the\n    terminal to you. This way, you can continue to use the CLI. To resume the\n    scratch org creation, run \"sfdx org resume scratch\".\n\n  --release=preview|previous\n\n    Release of the scratch org as compared to the Dev Hub release.\n\n    By default, scratch orgs are on the same release as the Dev Hub. During\n    Salesforce release transition periods, you can override this default\n    behavior and opt in or out of the new release.\n\n  --username=<value>\n\n    Username of the scratch org admin user. Overrides the value of the\n    \"username\" option in the definition file, if set.\n\n    The username must be unique within the entire scratch org and sandbox\n    universe. You must add your own logic to ensure uniqueness.\n\n    Omit this flag to have Salesforce generate a unique username for your org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_72.txt"}}],["0543266e-247d-4411-a056-9af9ab76f520",{"pageContent":"\n\nDelete a sandbox.\n\nUSAGE\n  $ sfdx org delete sandbox -o <value> [--json] [-p]\n\nFLAGS\n  -o, --target-org=<value>  (required) Sandbox alias or login user.\n  -p, --no-prompt           Don't prompt the user to confirm the deletion.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete a sandbox.\n\n  Salesforce CLI marks the org for deletion in the production org that contains\n  the sandbox licenses and then deletes all local references to the org from\n  your computer.\n  Specify a sandbox with either the username you used when you logged into it,\n  or the alias you gave the sandbox when you created it. Run \"sfdx org list\" to\n  view all your orgs, including sandboxes, and their aliases.\n\nALIASES\n  $ sfdx env delete sandbox\n\nEXAMPLES\n  Delete a sandbox with alias my-sandbox:\n\n    $ sfdx org delete sandbox --target-org=my-sandbox\n\n  Specify a username instead of an alias:\n\n    $ sfdx org delete sandbox --target-org=myusername@example.com.qa\n\n  Delete the sandbox without prompting to confirm :\n\n    $ sfdx org delete sandbox --target-org=my-sandbox --no-prompt\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_73.txt"}}],["d7f7e63d-c957-40c3-b224-3285aade1edd",{"pageContent":"\n\nDelete a scratch org.\n\nUSAGE\n  $ sfdx org delete scratch -o <value> [--json] [-p]\n\nFLAGS\n  -o, --target-org=<value>  (required) Scratch org alias or login user.\n  -p, --no-prompt           Don't prompt the user to confirm the deletion.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Delete a scratch org.\n\n  Salesforce CLI marks the org for deletion in the Dev Hub org and then deletes\n  all local references to the org from your computer.\n  Specify a scratch org with either the username or the alias you gave the\n  scratch org when you created it. Run \"sfdx org list\" to view all your orgs,\n  including scratch orgs, and their aliases.\n\nALIASES\n  $ sfdx env delete scratch\n\nEXAMPLES\n  Delete a scratch org with alias my-scratch-org:\n\n    $ sfdx org delete scratch --target-org=my-scratch-org\n\n  Specify a username instead of an alias:\n\n    $ sfdx org delete scratch --target-org=test-123456-abcdefg@example.com\n\n  Delete the scratch org without prompting to confirm :\n\n    $ sfdx org delete scratch --target-org=my-scratch-org --no-prompt\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_74.txt"}}],["bac7cdef-0d39-42d8-83b9-0c5db2d257d7",{"pageContent":"\n\nCheck the status of a sandbox creation, and log in to it if it's ready.\n\nUSAGE\n  $ sfdx org resume sandbox [--json] [-w <value>] [-n <value> | -i <value>] [-l]\n    [-o <value>]\n\nFLAGS\n  -i, --job-id=<value>      Job ID of the incomplete sandbox creation that you\n                            want to check the status of.\n  -l, --use-most-recent     Use the most recent sandbox create request.\n  -n, --name=<value>        Name of the sandbox org.\n  -o, --target-org=<value>  Username or alias of the production org that\n                            contains the sandbox license.\n  -w, --wait=<minutes>      Number of minutes to wait for the sandbox org to be\n                            ready.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Check the status of a sandbox creation, and log in to it if it's ready.\n\n  Sandbox creation can take a long time. If the original \"sfdx org create\n  sandbox\" command either times out, or you specified the --async flag, the\n  command displays a job ID. Use this job ID to check whether the sandbox\n  creation is complete, and if it is, the command then logs into it.\n\n  You can also use the sandbox name to check the status or the --use-most-recent\n  flag to use the job ID of the most recent sandbox creation.\n\nALIASES\n  $ sfdx env resume sandbox\n\nEXAMPLES\n  Check the status of a sandbox creation using its name and specify a\n  production org with alias \"prodOrg\":\n\n    $ sfdx org resume sandbox --name mysandbox --target-org prodOrg\n\n  Check the status using the job ID:\n\n    $ sfdx org resume sandbox --job-id 0GRxxxxxxxx\n\n  Check the status of the most recent sandbox create request:\n\n    $ sfdx org resume sandbox --use-most-recent\n\nFLAG DESCRIPTIONS\n  -i, --job-id=<value>\n\n    Job ID of the incomplete sandbox creation that you want to check the status\n    of.\n\n    The job ID is valid for 24 hours after you start the sandbox creation.\n\n  -o, --target-org=<value>\n\n    Username or alias of the production org that contains the sandbox license.\n\n    When it creates the sandbox org, Salesforce copies the metadata, and\n    optionally data, from your production org to the new sandbox org.\n\n  -w, --wait=<minutes>\n\n    Number of minutes to wait for the sandbox org to be ready.\n\n    If the command continues to run after the wait period, the CLI returns\n    control of the terminal window to you and returns the job ID. To resume\n    checking the sandbox creation, rerun this command\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_75.txt"}}],["479fc08d-d388-492a-94a0-283025f7d1c8",{"pageContent":"\n\nResume the creation of an incomplete scratch org.\n\nUSAGE\n  $ sfdx env resume scratch [--json] [-i <value>] [-r]\n\nFLAGS\n  -i, --job-id=<value>   Job ID of the incomplete scratch org create that you\n                         want to resume.\n  -r, --use-most-recent  Use the job ID of the most recent incomplete scratch\n                         org.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Resume the creation of an incomplete scratch org.\n\n  When the original \"sfdx org create scratch\" command either times out or is run\n  with the --async flag, it displays a job ID.\n\n  Run this command by either passing it a job ID or using the --use-most-recent\n  flag to specify the most recent incomplete scratch org.\n\nALIASES\n  $ sfdx env resume scratch\n\nEXAMPLES\n  Resume a scratch org create with a job ID:\n\n    $ sfdx env resume scratch --job-id 2SR3u0000008fBDGAY\n\n  Resume your most recent incomplete scratch org:\n\n    $ sfdx env resume scratch --use-most-recent\n\nFLAG DESCRIPTIONS\n  -i, --job-id=<value>\n\n    Job ID of the incomplete scratch org create that you want to resume.\n\n    The job ID is the same as the record ID of the incomplete scratch org in the\n    ScratchOrgInfo object of the Dev Hub.\n\n    The job ID is valid for 24 hours after you start the scratch org creation\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_76.txt"}}],["9b6644f4-fefc-4200-8589-14e9b4cfaeb5",{"pageContent":"\n\nList all aliases currently set on your local computer.\n\nUSAGE\n  $ sfdx force alias list [--json]\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List all aliases currently set on your local computer.\n\n  Aliases are global, which means that you can use all the listed aliases in any\n  Salesforce DX project on your computer.\n\nALIASES\n  $ sfdx force alias list\n\nEXAMPLES\n  List all the aliases you've set:\n\n    $ sfdx force alias list\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_77.txt"}}],["ee52867c-7f1f-492a-b943-cbe8e061294d",{"pageContent":"\n\nSet one or more aliases on your local computer.\n\nUSAGE\n  $ sfdx force alias set [--json]\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Set one or more aliases on your local computer.\n\n  Aliases are user-defined short names that make it easier to use the CLI. For\n  example, users often set an alias for a scratch org usernames because they're\n  long and unintuitive.  Check the --help of a CLI command to determine where\n  you can use an alias.\n\n  You can associate an alias with only one value at a time. If you set an alias\n  multiple times, the alias points to the most recent value. Aliases are global;\n  after you set an alias, you can use it in any Salesforce DX project on your\n  computer.\n\n  Use quotes to specify an alias value that contains spaces. You typically use\n  an equal sign to set your alias, although you don't need it if you're setting\n  a single alias in a command.\n\nALIASES\n  $ sfdx force alias set\n\nEXAMPLES\n  Set an alias for a scratch org username:\n\n    $ sfdx force alias set my-scratch-org=test-sadbiytjsupn@example.com\n\n  Set multiple aliases with a single command:\n\n    $ sfdx force alias set my-scratch-org=test-sadbiytjsupn@example.com \\\n      my-other-scratch-org=test-ss0xut7txzxf@example.com\n\n  Set an alias that contains spaces:\n\n    $ sfdx force alias set my-alias='alias with spaces'\n\n  Set a single alias without using an equal sign:\n\n    $ sfdx force alias set my-scratch-org test-ss0xut7txzxf@example.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_78.txt"}}],["072d4d21-2a82-4ce6-b000-8d2c48db9243",{"pageContent":"\n\nUnset one or more aliases that are currently set on your local computer.\n\nUSAGE\n  $ sfdx force alias unset [--json] [-a] [-p]\n\nFLAGS\n  -a, --all        Unset all currently set aliases.\n  -p, --no-prompt  Don't prompt the user for confirmation when unsetting all\n                   aliases.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Unset one or more aliases that are currently set on your local computer.\n\n  Aliases are global, so when you unset one it's no longer available in any\n  Salesforce DX project.\n\nALIASES\n  $ sfdx force alias unset\n\nEXAMPLES\n  Unset an alias:\n\n    $ sfdx force alias unset my-alias\n\n  Unset multiple aliases with a single command:\n\n    $ sfdx force alias unset my-alias my-other-alias\n\n  Unset all aliases:\n\n    $ sfdx force alias unset --all [--no-prompt]\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_79.txt"}}],["e1815686-1eb2-4475-aed3-417729930c59",{"pageContent":"\n\nDisplay test results for a specific asynchronous test run.\n\nUSAGE\n  $ sfdx apex get test -o <value> -i <value> [--json] [--api-version\n    <value>] [-c] [-d <value>] [-r human|tap|junit|json]\n\nFLAGS\n  -c, --code-coverage           Retrieve code coverage results.\n  -d, --output-dir=<value>      Directory in which to store test result files.\n  -i, --test-run-id=<value>     (required) ID of the test run.\n  -o, --target-org=<value>      (required) Username or alias of the target org.\n  -r, --result-format=<option>  [default: human] Format of the results.\n                                <options: human|tap|junit|json>\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display test results for a specific asynchronous test run.\n\n  Provide a test run ID to display test results for an enqueued or completed\n  asynchronous test run. The test run ID is displayed after running the \"sfdx\n  apex test run\" command.\n\nALIASES\n  $ sfdx force apex test report\n\nEXAMPLES\n  Display test results for your default org using a test run ID:\n\n    $ sfdx apex get test --test-run-id <test run id>\n\n  Similar to previous example, but output the result in JUnit format:\n\n    $ sfdx apex get test --test-run-id <test run id> --result-format junit\n\n  Also retrieve code coverage results and output in JSON format:\n\n    $ sfdx apex get test --test-run-id <test run id> --code-coverage --json\n\n  Specify a directory in which to save the test results from the org with the\n  specified username (rather than your default org):\n\n    $ sfdx apex get test --test-run-id <test run id> --code-coverage \\\n      --output-dir <path to outputdir> --target-org me@myorg',\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_8.txt"}}],["a18905cb-2697-4fbb-a814-05eb48570b3a",{"pageContent":"\n\nGenerate a simple Analytics template.\n\nUSAGE\n  $ sfdx force analytics template create -n <value> [--json] [-d <value>] [--api-version\n    <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -n, --name=<value>        (required) Name of the Analytics template.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a simple Analytics template.\n\n  The metadata files associated with the Analytics template must be contained in\n  a parent directory called \"waveTemplates\" in your package directory. Either\n  run this command from an existing directory of this name, or use the\n  --output-dir flag to generate one or point to an existing one.\n\nALIASES\n  $ sfdx force analytics template create\n\nEXAMPLES\n  Generate the metadata files for a simple Analytics template file called\n  myTemplate in the force-app/main/default/waveTemplates directory:\n\n    $ sfdx force analytics template create --name myTemplate --output-dir \\\n      force-app/main/default/waveTemplates\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_80.txt"}}],["8146aec3-7c35-41b1-9d44-6a6c722d2198",{"pageContent":"\n\nGenerate an Apex class.\n\nUSAGE\n  $ sfdx force apex class create -n <value> [--json] [-t\n    ApexException|ApexUnitTest|DefaultApexClass|InboundEmailService] [-d\n    <value>] [--api-version <value>]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -n, --name=<value>        (required) Name of the generated Apex class.\n  -t, --template=<option>   [default: DefaultApexClass] Template to use for file\n                            creation.\n                            <options: ApexException|ApexUnitTest|DefaultApexClas\n                            s|InboundEmailService>\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate an Apex class.\n\n  Generates the Apex *.cls file and associated metadata file. These files must\n  be contained in a parent directory called \"classes\" in your package directory.\n  Either run this command from an existing directory of this name, or use the\n  --output-dir flag to generate one or point to an existing one.\n\nALIASES\n  $ sfdx force apex class create\n\nEXAMPLES\n  Generate two metadata files associated with the MyClass Apex class\n  (MyClass.cls and MyClass.cls-meta.xml) in the current directory:\n\n    $ sfdx force apex class create --name MyClass\n\n  Similar to previous example, but generates the files in the\n  \"force-app/main/default/classes\" directory:\n\n    $ sfdx force apex class create --name MyClass --output-dir \\\n      force-app/main/default/classes\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Apex class.\n\n    The name can be up to 40 characters and must start with a letter.\n\n  -t, --template=ApexException|ApexUnitTest|DefaultApexClass|InboundEmailService\n\n    Template to use for file creation.\n\n    Supplied parameter values or default values are filled into a copy of the\n    template\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_81.txt"}}],["35b1ebcc-43d2-47bb-87ed-844a68e74248",{"pageContent":"\n\nExecute anonymous Apex code entered on the command line or from a local file.\n\nUSAGE\n  $ sfdx apex run -o <value> [--json] [--api-version <value>] [-f\n    <value>]\n\nFLAGS\n  -f, --file=<value>        Path to a local file that contains Apex code.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Execute anonymous Apex code entered on the command line or from a local file.\n\n  If you don’t run this command from within a Salesforce DX project, you must\n  specify the —-target-org flag.\n\n  To execute your code interactively, run this command with no flags. At the\n  prompt, enter all your Apex code; press CTRL-D when you're finished. Your code\n  is then executed in a single execute anonymous request.\n  For more information, see \"Anonymous Blocks\" in the Apex Developer Guide.\n\nALIASES\n  $ sfdx force apex execute\n\nEXAMPLES\n  Execute the Apex code that's in the ~/test.apex file in the org with the\n  specified username:\n\n    $ sfdx apex run --target-org testusername@salesforce.org --file \\\n      ~/test.apex\n\n  Similar to previous example, but execute the code in your default org:\n\n    $ sfdx apex run --file ~/test.apex\n\n  Run the command with no flags to start interactive mode; the code will\n  execute in your default org when you exit. At the prompt, start type Apex\n  code and press the Enter key after each line. Press CTRL+D when finished.\n\n    $ sfdx apex run\n\nCOMMANDS\n  apex run test  Invoke Apex tests in an org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_82.txt"}}],["906dbd23-a806-4270-a0b5-ef1715d03b1a",{"pageContent":"\n\nFetch the specified log or given number of most recent logs from the org.\n\nUSAGE\n  $ sfdx apex get log -o <value> [--json] [--api-version <value>] [-i\n    <value>] [-n <value>] [-d <value>]\n\nFLAGS\n  -d, --output-dir=<value>  Directory for saving the log files.\n  -i, --log-id=<value>      ID of the specific log to display.\n  -n, --number=<value>      Number of the most recent logs to display.\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Fetch the specified log or given number of most recent logs from the org.\n\n  To get the IDs for your debug logs, run \"sfdx apex log list\". Executing this\n  command without flags returns the most recent log.\n\nALIASES\n  $ sfdx force apex log get\n\nEXAMPLES\n  Fetch the log in your default org using an ID:\n\n    $ sfdx apex get log --log-id <log id>\n\n  Fetch the log in the org with the specified username using an ID:\n\n    $ sfdx apex get log --log-id <log id> --target-org me@my.org\n\n  Fetch the two most recent logs in your default org:\n\n    $ sfdx apex get log --number 2\n\n  Similar to previous example, but save the two log files in the specified\n  directory:\n\n    $ sfdx apex get log --output-dir /Users/sfdxUser/logs --number 2\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the log files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_83.txt"}}],["e002700e-d949-48bd-96b5-f7deb9ccb020",{"pageContent":"\n\nDisplay a list of IDs and general information about debug logs.\n\nUSAGE\n  $ sfdx apex list log -o <value> [--json] [--api-version <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display a list of IDs and general information about debug logs.\n\n  Run this command in a project to list the IDs and general information for all\n  debug logs in your default org.\n\n  To fetch a specific log from your org, obtain the ID from this command's\n  output, then run the “sfdx apex log get” command.\n\nALIASES\n  $ sfdx force apex log list\n\nEXAMPLES\n  List the IDs and information about the debug logs in your default org:\n\n    $ sfdx apex list log\n\n  Similar to previous example, but use the org with the specified username:\n\n    $ sfdx apex list log --target-org me@my.org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_84.txt"}}],["05e71b5a-ae11-48ac-b4c8-dc3b2e58401b",{"pageContent":"\n\nActivate debug logging and display logs in the terminal.\n\nUSAGE\n  $ sfdx apex tail log -o <value> [--json] [--api-version <value>] [-c] [-d\n    <value> | -s]\n\nFLAGS\n  -c, --color                Apply default colors to noteworthy log lines.\n  -d, --debug-level=<value>  Debug level to set on the DEVELOPER_LOG trace flag\n                             for your user.\n  -o, --target-org=<value>   (required) Username or alias of the target org.\n  -s, --skip-trace-flag      Skip trace flag setup. Assumes that a trace flag\n                             and debug level are fully set up.\n  --api-version=<value>      Override the api version used for api requests made\n                             by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Activate debug logging and display logs in the terminal.\n\n  You can also pipe the logs to a file.\n\nALIASES\n  $ sfdx force apex log tail\n\nEXAMPLES\n  Activate debug logging:\n\n    $ sfdx apex tail log\n\n  Specify a debug level:\n\n    $ sfdx apex tail log --debug-level MyDebugLevel\n\n  Skip the trace flag setup and apply default colors:\n\n    $ sfdx apex tail log --color --skip-trace-flag\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_85.txt"}}],["5938bf21-a25c-48d6-bd94-3704cfff6508",{"pageContent":"\n\nDisplay test results for a specific asynchronous test run.\n\nUSAGE\n  $ sfdx apex get test -o <value> -i <value> [--json] [--api-version\n    <value>] [-c] [-d <value>] [-r human|tap|junit|json]\n\nFLAGS\n  -c, --code-coverage           Retrieve code coverage results.\n  -d, --output-dir=<value>      Directory in which to store test result files.\n  -i, --test-run-id=<value>     (required) ID of the test run.\n  -o, --target-org=<value>      (required) Username or alias of the target org.\n  -r, --result-format=<option>  [default: human] Format of the results.\n                                <options: human|tap|junit|json>\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display test results for a specific asynchronous test run.\n\n  Provide a test run ID to display test results for an enqueued or completed\n  asynchronous test run. The test run ID is displayed after running the \"sfdx\n  apex test run\" command.\n\nALIASES\n  $ sfdx force apex test report\n\nEXAMPLES\n  Display test results for your default org using a test run ID:\n\n    $ sfdx apex get test --test-run-id <test run id>\n\n  Similar to previous example, but output the result in JUnit format:\n\n    $ sfdx apex get test --test-run-id <test run id> --result-format junit\n\n  Also retrieve code coverage results and output in JSON format:\n\n    $ sfdx apex get test --test-run-id <test run id> --code-coverage --json\n\n  Specify a directory in which to save the test results from the org with the\n  specified username (rather than your default org):\n\n    $ sfdx apex get test --test-run-id <test run id> --code-coverage \\\n      --output-dir <path to outputdir> --target-org me@myorg',\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_86.txt"}}],["d692b96d-b623-4927-86ee-85c32cc42aaa",{"pageContent":"\n\nInvoke Apex tests in an org.\n\nUSAGE\n  $ sfdx apex run test -o <value> [--json] [--api-version <value>] [-d\n    <value>] [-l RunLocalTests|RunAllTestsInOrg|RunSpecifiedTests] [-n <value>]\n    [-r human|tap|junit|json] [-s <value>] [-t <value>] [-w <value>] [-y] [-v\n    -c]\n\nFLAGS\n  -c, --code-coverage           Retrieve code coverage results.\n  -d, --output-dir=<value>      Directory in which to store test run files.\n  -l, --test-level=<option>     Level of tests to run; default is RunLocalTests.\n                                <options: RunLocalTests|RunAllTestsInOrg|RunSpec\n                                ifiedTests>\n  -n, --class-names=<value>     Comma-separated list of Apex test class names to\n                                run; default is all classes.\n  -o, --target-org=<value>      (required) Username or alias of the target org.\n  -r, --result-format=<option>  [default: human] Format of the test results.\n                                <options: human|tap|junit|json>\n  -s, --suite-names=<value>     Comma-separated list of Apex test suite names to\n                                run; default is all suites.\n  -t, --tests=<value>           Comma-separated list of Apex test class names or\n                                IDs and, if applicable, test methods to run;\n                                default is all tests.\n  -v, --detailed-coverage       Display detailed code coverage per test.\n  -w, --wait=<value>            Sets the streaming client socket timeout in\n                                minutes; specify a longer wait time if timeouts\n                                occur frequently.\n  -y, --synchronous             Runs test methods from a single Apex class\n                                synchronously; if not specified, tests are run\n                                asynchronously.\n  --api-version=<value>         Override the api version used for api requests\n                                made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Invoke Apex tests in an org.\n\n  Specify which tests to run by using the --class-names, --suite-names, or\n  --tests flags. Alternatively, use the --test-level flag to run all the tests\n  in your org, local tests, or specified tests.\n\n  To see code coverage results, use the --code-coverage flag with\n  --result-format. The output displays a high-level summary of the test run and\n  the code coverage values for classes in your org. If you specify\n  human-readable result format, use the --detailed-coverage flag to see detailed\n  coverage results for each test method run.\n\n  Apex tests run asynchronously by default. The command waits for 1 minute\n  (default), or for the value of the --wait flag; if the tests have finished,\n  the command displays the results. If the tests haven't finished by the end of\n  the wait time, the command displays a test run ID; use the \"sfdx apex get test\n  --test-run-id\" command to get the results.\n\n  NOTE: The testRunCoverage value (JSON and JUnit result formats) is a\n  percentage of the covered lines and total lines from all the Apex classes\n  evaluated by the tests in this run.\n\nALIASES\n  $ sfdx force apex test run\n\nEXAMPLES\n  Run all Apex tests and suites in your default org:\n\n    $ sfdx apex run test\n\n  Run the specified Apex test classes in your default org and display results\n  in human-readable form:\n\n    $ sfdx apex run test --class-names \"MyClassTest,MyOtherClassTest\" \\\n      --result-format human\n\n  Run the specified Apex test suites in your default org and include code\n  coverage results and additional details:\n\n    $ sfdx apex run test --suite-names \"MySuite,MyOtherSuite\" \\\n      --code-coverage --detailed-coverage\n\n  Run the specified Apex tests in your default org and display results in\n  human-readable output:\n\n    $ sfdx apex run test --tests \"MyClassTest.testCoolFeature,MyClassTest.te \\\n      stAwesomeFeature,AnotherClassTest,namespace.TheirClassTest.testThis\" \\\n      --result-format human\n\n  Run all tests in the org with the specified username with the specified test\n  level; save the output to the specified directory:\n\n    $ sfdx apex run test --test-level RunLocalTests --output-dir <path to \\\n      outputdir> --target-org me@my.org\n\nFLAG DESCRIPTIONS\n  -l, --test-level=RunLocalTests|RunAllTestsInOrg|RunSpecifiedTests\n\n    Level of tests to run; default is RunLocalTests.\n\n    Here's what the levels mean:\n\n    - RunSpecifiedTests — Only the tests that you specify are run.\n    - RunLocalTests — All tests in your org are run, except the ones that\n    originate from installed managed packages.\n    - RunAllTestsInOrg — All tests are in your org and in installed managed\n    packages are run\n\n  -n, --class-names=<value>\n\n    Comma-separated list of Apex test class names to run; default is all\n    classes.\n\n    If you select --class-names, you can't specify --suite-names or --tests.\n\n  -s, --suite-names=<value>\n\n    Comma-separated list of Apex test suite names to run; default is all suites.\n\n    If you select --suite-names, you can't specify --class-names or --tests.\n\n  -t, --tests=<value>\n\n    Comma-separated list of Apex test class names or IDs and, if applicable,\n    test methods to run; default is all tests.\n\n    If you specify --tests, you can't specify --class-names or --suite-names\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_87.txt"}}],["d9b8adaa-dae3-41dd-a4dd-98da92edbbf3",{"pageContent":"\n\nGenerate an Apex trigger.\n\nUSAGE\n  $ sfdx force apex trigger create -n <value> [--json] [-t ApexTrigger] [-d <value>]\n    [--api-version <value>] [-s <value>] [-e before insert|before update|before\n    delete|after insert|after update|after delete|after undelete]\n\nFLAGS\n  -d, --output-dir=<value>  [default: .] Directory for saving the created files.\n  -e, --event=<option>...   [default: before insert] Events that fire the\n                            trigger.\n                            <options: before insert|before update|before\n                            delete|after insert|after update|after delete|after\n                            undelete>\n  -n, --name=<value>        (required) Name of the generated Apex trigger\n  -s, --sobject=<value>     [default: SOBJECT] Salesforce object to generate a\n                            trigger on.\n  -t, --template=<option>   [default: ApexTrigger] Template to use for file\n                            creation.\n                            <options: ApexTrigger>\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate an Apex trigger.\n\n  Generates the Apex trigger *.trigger file and associated metadata file. These\n  files must be contained in a parent directory called \"triggers\" in your\n  package directory. Either run this command from an existing directory of this\n  name, or use the --output-dir flag to generate one or point to an existing\n  one.\n\n  If you don't specify the --sobject flag, the .trigger file contains the\n  generic placeholder SOBJECT; replace it with the Salesforce object you want to\n  generate a trigger for. If you don't specify --event, \"before insert\" is used.\n\nALIASES\n  $ sfdx force apex trigger create\n\nEXAMPLES\n  Generate two files associated with the MyTrigger Apex trigger\n  (MyTrigger.trigger and MyTrigger.trigger-meta.xml) in the current directory:\n\n    $ sfdx force apex trigger create --name MyTrigger\n\n  Similar to the previous example, but generate the files in the\n  \"force-app/main/default/triggers\" directory:\n\n    $ sfdx force apex trigger create --name MyTrigger --output-dir \\\n      force-app/main/default/triggers\n\n  Generate files for a trigger that fires on the Account object before and\n  after an insert:\n\n    $ sfdx force apex trigger create --name MyTrigger --sobject Account \\\n      --event \"before insert,after insert\"\n\nFLAG DESCRIPTIONS\n  -d, --output-dir=<value>  Directory for saving the created files.\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --name=<value>  Name of the generated Apex trigger\n\n    The name can be up to 40 characters and must start with a letter.\n\n  -t, --template=ApexTrigger  Template to use for file creation.\n\n    Supplied parameter values or default values are filled into a copy of the\n    template\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_88.txt"}}],["56c5cde1-1f5c-41f9-b1f0-20f288c03a95",{"pageContent":"\n\nAuthorize an org using an existing Salesforce access token.\n\nUSAGE\n  $ sfdx force auth accesstoken store -r <value> [--json] [-d] [-s] [-a <value>]\n  [-p]\n\nFLAGS\n  -a, --alias=<value>         Alias for the org.\n  -d, --set-default-dev-hub   Set the authenticated org as the default Dev Hub.\n  -p, --no-prompt             Don't prompt for confirmation.\n  -r, --instance-url=<value>  (required) URL of the instance that the org lives\n                              on.\n  -s, --set-default           Set the authenticated org as the default that all\n                              org-related commands run against.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Authorize an org using an existing Salesforce access token.\n\n  By default, the command runs interactively and asks you for the access token.\n  If you previously authorized the org, the command prompts whether you want to\n  overwrite the local file. Specify --no-prompt to not be prompted.\n\n  To use the command in a CI/CD script, set the SFDX_ACCESS_TOKEN environment\n  variable to the access token. Then run the command with the --no-prompt\n  parameter.\n\nALIASES\n  $ sfdx force auth accesstoken store\n  $ sfdx auth accesstoken store\n\nEXAMPLES\n  Authorize an org on https://mycompany.my.salesforce.com; the command prompts\n  you for the access token:\n\n    $ sfdx force auth accesstoken store --instance-url \\\n      https://mycompany.my.salesforce.com\n\n  Authorize the org without being prompted; you must have previously set the\n  SFDX_ACCESS_TOKEN environment variable to the access token:\n\n    $ sfdx force auth accesstoken store --instance-url \\\n      https://dev-hub.my.salesforce.com --no-prompt\n\nFLAG DESCRIPTIONS\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n\n    If you specify an --instance-url value, this value overrides the\n    sfdcLoginUrl value in your sfdx-project.json file.\n\n    To specify a My Domain URL, use the format\n    https://yourcompanyname.my.salesforce.com.\n\n    To specify a sandbox, set --instance-url to\n    https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_89.txt"}}],["4bafc925-920d-4926-9a4f-6e7bec2ebced",{"pageContent":"\n\nDisplay a list of IDs and general information about debug logs.\n\nUSAGE\n  $ sfdx apex list log -o <value> [--json] [--api-version <value>]\n\nFLAGS\n  -o, --target-org=<value>  (required) Username or alias of the target org.\n  --api-version=<value>     Override the api version used for api requests made\n                            by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Display a list of IDs and general information about debug logs.\n\n  Run this command in a project to list the IDs and general information for all\n  debug logs in your default org.\n\n  To fetch a specific log from your org, obtain the ID from this command's\n  output, then run the “sfdx apex log get” command.\n\nALIASES\n  $ sfdx force apex log list\n\nEXAMPLES\n  List the IDs and information about the debug logs in your default org:\n\n    $ sfdx apex list log\n\n  Similar to previous example, but use the org with the specified username:\n\n    $ sfdx apex list log --target-org me@my.org\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_9.txt"}}],["01788a08-02f1-4720-905f-82fa60ee71c1",{"pageContent":"\n\nAuthorize an org using a device code.\n\nUSAGE\n  $ sfdx force auth device login [--json] [-i <value>] [-r <value>] [-d] [-s] [-a\n    <value>]\n\nFLAGS\n  -a, --alias=<value>         Alias for the org.\n  -d, --set-default-dev-hub   Set the authenticated org as the default Dev Hub.\n  -i, --client-id=<value>     OAuth client ID (also called consumer key) of your\n                              custom connected app.\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n  -s, --set-default           Set the authenticated org as the default that all\n                              org-related commands run against.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Authorize an org using a device code.\n\n  Use this command to allow a device to connect to an org.\n\n  When you run this command, it first displays an 8-digit device code and the\n  URL for verifying the code on your org. The default instance URL is\n  https://login.salesforce.com, so if the org you're authorizing is on a\n  different instance, use the --instance-url. The command waits while you\n  complete the verification. Open a browser and navigate to the displayed\n  verification URL, enter the code, then click Connect. If you aren't already\n  logged into your org, log in, and then you're prompted to allow the device to\n  connect to the org. After you successfully authorize the org, you can close\n  the browser window.\n\nALIASES\n  $ sfdx force auth device login\n  $ sfdx auth device login\n\nEXAMPLES\n  Authorize an org using a device code, give the org the alias TestOrg1, and\n  set it as your default Dev Hub org:\n\n    $ sfdx force auth device login --set-default-dev-hub --alias TestOrg1\n\n  Authorize an org in which you've created a custom connected app with the\n  specified client ID (consumer key):\n\n    $ sfdx force auth device login --client-id <OAuth client id>\n\n  Authorize a sandbox org with the specified instance URL:\n\n    $ sfdx force auth device login --instance-url \\\n      https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\nFLAG DESCRIPTIONS\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n\n    If you specify an --instance-url value, this value overrides the\n    sfdcLoginUrl value in your sfdx-project.json file.\n\n    To specify a My Domain URL, use the format\n    https://yourcompanyname.my.salesforce.com.\n\n    To specify a sandbox, set --instance-url to\n    https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_90.txt"}}],["e28d7154-40ca-4d22-9f44-d2617a73fddc",{"pageContent":"\n\nLog in to a Salesforce org using a JSON web token (JWT).\n\nUSAGE\n  $ sfdx force auth jwt grant -o <value> -f <value> -i <value> [--json] [-r\n    <value>] [-d] [-s] [-a <value>]\n\nFLAGS\n  -a, --alias=<value>         Alias for the org.\n  -d, --set-default-dev-hub   Set the authenticated org as the default Dev Hub.\n  -f, --jwt-key-file=<value>  (required) Path to a file containing the private\n                              key.\n  -i, --client-id=<value>     (required) OAuth client ID (also called consumer\n                              key) of your custom connected app.\n  -o, --username=<value>      (required) Username of the user logging in.\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n  -s, --set-default           Set the authenticated org as the default that all\n                              org-related commands run against.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Log in to a Salesforce org using a JSON web token (JWT).\n\n  Use this command in automated environments where you can’t interactively log\n  in with a browser, such as in CI/CD scripts.\n\n  Logging into an org authorizes the CLI to run other commands that connect to\n  that org, such as deploying or retrieving a project. You can log into many\n  types of orgs, such as sandboxes, Dev Hubs, Env Hubs, production orgs, and\n  scratch orgs.\n\n  Complete these steps before you run this command:\n\n  1. Create a digital certificate (also called digital signature) and the\n  private key to sign the certificate. You can use your own key and certificate\n  issued by a certification authority. Or use OpenSSL to create a key and a\n  self-signed digital certificate.\n  2. Store the private key in a file on your computer. When you run this\n  command, you set the --jwt-key-file flag to this file.\n  3. Create a custom connected app in your org using the digital certificate.\n  Make note of the consumer key (also called client id) that’s generated for\n  you. Be sure the username of the user logging in is approved to use the\n  connected app. When you run this command, you set the --client-id flag to the\n  consumer key.\n\n  See https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/s\n  fdx_dev_auth_jwt_flow.htm for more information.\n\n  We recommend that you set an alias when you log into an org. Aliases make it\n  easy to later reference this org when running commands that require it. If you\n  don’t set an alias, you use the username that you specified when you logged in\n  to the org. If you run multiple commands that reference the same org, consider\n  setting the org as your default. Use --set-default for your default scratch\n  org or sandbox, or --set-default-dev-hub for your default Dev Hub.\n\nALIASES\n  $ sfdx force auth jwt grant\n  $ sfdx auth jwt grant\n\nEXAMPLES\n  Log into an org with username jdoe@example.org and on the default instance\n  URL (https://login.salesforce.org). The private key is stored in the file\n  /Users/jdoe/JWT/server.key and the command uses the connected app with\n  consumer key (client id) 04580y4051234051.\n\n    $ sfdx force auth jwt grant --username jdoe@example.org --jwt-key-file \\\n      /Users/jdoe/JWT/server.key --client-id 04580y4051234051\n\n  Set the org as the default and give it an alias:\n\n    $ sfdx force auth jwt grant --username jdoe@example.org --jwt-key-file \\\n      /Users/jdoe/JWT/server.key --client-id 04580y4051234051 --alias ci-org \\\n      --set-default\n\n  Set the org as the default Dev Hub and give it an alias:\n\n    $ sfdx force auth jwt grant --username jdoe@example.org --jwt-key-file \\\n      /Users/jdoe/JWT/server.key --client-id 04580y4051234051 --alias \\\n      ci-dev-hub --set-default-dev-hub\n\n  Log in to a sandbox using URL\n  https://MyDomainName--SandboxName.sandbox.my.salesforce.com:\n\n    $ sfdx force auth jwt grant --username jdoe@example.org --jwt-key-file \\\n      /Users/jdoe/JWT/server.key --client-id 04580y4051234051 --alias ci-org \\\n      --set-default --instance-url \\\n      https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\nFLAG DESCRIPTIONS\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n\n    If you specify an --instance-url value, this value overrides the\n    sfdcLoginUrl value in your sfdx-project.json file.\n\n    To specify a My Domain URL, use the format\n    https://yourcompanyname.my.salesforce.com.\n\n    To specify a sandbox, set --instance-url to\n    https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_91.txt"}}],["a71e7267-3e21-4deb-b341-dfd576a7a7e6",{"pageContent":"\n\nList authorization information about the orgs you created or logged into.\n\nUSAGE\n  $ sfdx force auth list [--json]\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List authorization information about the orgs you created or logged into.\n\n  This command uses local authorization information that Salesforce CLI caches\n  when you create a scratch org or log into an org. The command doesn't actually\n  connect to the orgs to verify that they're still active. As a result, this\n  command executes very quickly. If you want to view live information about your\n  authorized orgs, such as their connection status, use the \"org list\" command.\n\nALIASES\n  $ sfdx force auth list\n  $ sfdx auth list\n\nEXAMPLES\n  List local authorization information about your orgs:\n\n    $ sfdx force auth list\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_92.txt"}}],["e75a7971-b80d-4c50-8202-26b7b03b7126",{"pageContent":"\n\nLog out of a Salesforce org.\n\nUSAGE\n  $ sfdx force auth logout [--json] [-a | -o <value>] [-p]\n\nFLAGS\n  -a, --all                 Include all authenticated orgs.\n  -o, --target-org=<value>  Username or alias of the target org.\n  -p, --no-prompt           Don't prompt for confirmation.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Log out of a Salesforce org.\n\n  If you run this command with no flags, it first displays a list of orgs you've\n  created or logged into, with none of the orgs selected. Use the arrow keys to\n  scroll through the list and the space bar to select the orgs you want to log\n  out of. Press Enter when you're done; the command asks for a final\n  confirmation before logging out of the selected orgs.\n\n  The process is similar if you specify --all, except that in the initial list\n  of orgs, they're all selected. Use --target-org to logout of a specific org.\n  In both these cases by default, you must still confirm that you want to log\n  out. Use --no-prompt to never be asked for confirmation when also using --all\n  or --target-org.\n\n  Be careful! If you log out of a scratch org without having access to its\n  password, you can't access the scratch org again, either through the CLI or\n  the Salesforce UI.\n\nALIASES\n  $ sfdx force auth logout\n  $ sfdx auth logout\n\nEXAMPLES\n  Interactively select the orgs to log out of:\n\n    $ sfdx force auth logout\n\n  Log out of the org with username me@my.org:\n\n    $ sfdx force auth logout --target-org me@my.org\n\n  Log out of all orgs after confirmation:\n\n    $ sfdx force auth logout --all\n\n  Logout of the org with alias my-scratch and don't prompt for confirmation:\n\n    $ sfdx force auth logout --target-org my-scratch --no-prompt\n\nFLAG DESCRIPTIONS\n  -a, --all  Include all authenticated orgs.\n\n    All orgs includes Dev Hubs, sandboxes, DE orgs, and expired, deleted, and\n    unknown-status scratch orgs\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_93.txt"}}],["3db05a95-cdcf-4a19-a56f-ddf34c6bd432",{"pageContent":"\n\nAuthorize an org using a Salesforce DX authorization URL stored in a file.\n\nUSAGE\n  $ sfdx force auth sfdxurl store -f <value> [--json] [-d] [-s] [-a <value>]\n\nFLAGS\n  -a, --alias=<value>          Alias for the org.\n  -d, --set-default-dev-hub    Set the authenticated org as the default Dev Hub.\n  -f, --sfdx-url-file=<value>  (required) Path to a file that contains the\n                               Salesforce DX authorization URL.\n  -s, --set-default            Set the authenticated org as the default that all\n                               org-related commands run against.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Authorize an org using a Salesforce DX authorization URL stored in a file.\n\n  The Salesforce DX (SFDX) authorization URL must have the format\n  \"force://<clientId>:<clientSecret>:<refreshToken>@<instanceUrl>\". NOTE: The\n  SFDX authorization URL uses the \"force\" protocol, and not \"http\" or \"https\".\n  Also, the \"instanceUrl\" inside the SFDX authorization URL doesn't include the\n  protocol (\"https://\").\n\n  You have three options when creating the authorization file. The easiest\n  option is to redirect the output of the \"sfdx org display --verbose --json\"\n  command into a file. For example, using an org with alias my-org that you've\n  already authorized:\n\n  $ sfdx org display --target-org my-org --verbose --json > authFile.json\n\n  The resulting JSON file contains the URL in the \"sfdxAuthUrl\" property of the\n  \"result\" object. You can then reference the file when running this command:\n\n  $ sfdx force auth sfdxurl store --sfdx-url-file authFile.json\n\n  NOTE: The \"sfdx org display --verbose\" command displays the refresh token only\n  for orgs authorized with the web server flow, and not the JWT bearer flow.\n\n  You can also create a JSON file that has a top-level property named\n  sfdxAuthUrl whose value is the authorization URL. Finally, you can create a\n  normal text file that includes just the URL and nothing else.\n\nALIASES\n  $ sfdx force auth sfdxurl store\n  $ sfdx auth sfdxurl store\n\nEXAMPLES\n  Authorize an org using the SFDX authorization URL in the files/authFile.json\n  file:\n\n    $ sfdx force auth sfdxurl store --sfdx-url-file files/authFile.json\n\n  Similar to previous example, but set the org as your default and give it an\n  alias MyDefaultOrg:\n\n    $ sfdx force auth sfdxurl store --sfdx-url-file files/authFile.json \\\n      --set-default --alias MyDefaultOrg\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_94.txt"}}],["17d502c9-20f6-41d6-bb71-7b93576ec874",{"pageContent":"\n\nLog in to a Salesforce org using the web server flow.\n\nUSAGE\n  $ sfdx force auth web login [--json] [-b chrome|edge|firefox] [-i <value>] [-r\n    <value>] [-d] [-s] [-a <value>]\n\nFLAGS\n  -a, --alias=<value>         Alias for the org.\n  -b, --browser=<option>      Browser in which to open the org.\n                              <options: chrome|edge|firefox>\n  -d, --set-default-dev-hub   Set the authenticated org as the default Dev Hub.\n  -i, --client-id=<value>     OAuth client ID (also called consumer key) of your\n                              custom connected app.\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n  -s, --set-default           Set the authenticated org as the default that all\n                              org-related commands run against.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Log in to a Salesforce org using the web server flow.\n\n  Opens a Salesforce instance URL in a web browser so you can enter your\n  credentials and log in to your org. After you log in, you can close the\n  browser window.\n\n  Logging into an org authorizes the CLI to run other commands that connect to\n  that org, such as deploying or retrieving metadata. You can log into many\n  types of orgs, such as sandboxes, Dev Hubs, Env Hubs, production orgs, and\n  scratch orgs.\n\n  We recommend that you set an alias when you log into an org. Aliases make it\n  easy to later reference this org when running commands that require it. If you\n  don’t set an alias, you use the username that you specified when you logged in\n  to the org. If you run multiple commands that reference the same org, consider\n  setting the org as your default. Use --set-default for your default scratch\n  org or sandbox, or --set-default-dev-hub for your default Dev Hub.\n\n  By default, this command uses the global out-of-the-box connected app in your\n  org. If you need more security or control, such as setting the refresh token\n  timeout or specifying IP ranges, create your own connected app using a digital\n  certificate. Make note of the consumer key (also called cliend id) that’s\n  generated for you. Then specify the consumer key with the --client-id flag.\n\nALIASES\n  $ sfdx force auth web login\n  $ sfdx auth web login\n\nEXAMPLES\n  Run the command with no flags to open the default Salesforce login page\n  (https://login.salesforce.com):\n\n    $ sfdx force auth web login\n\n  Log in to your Dev Hub, set it as your default Dev Hub, and set an alias\n  that you reference later when you create a scratch org:\n\n    $ sfdx force auth web login --set-default-dev-hub --alias dev-hub\n\n  Log in to a sandbox and set it as your default org:\n\n    $ sfdx force auth web login --instance-url \\\n      https://MyDomainName--SandboxName.sandbox.my.salesforce.com \\\n      --set-default\n\n  Use --browser to specify a specific browser, such as Google Chrome:\n\n    $ sfdx force auth web login --instance-url \\\n      https://MyDomainName--SandboxName.sandbox.my.salesforce.com \\\n      --set-default --browser chrome\n\n  Use your own connected app by specifying its consumer key (also called\n  client ID):\n\n    $ sfdx force auth web login --instance-url \\\n      https://MyDomainName--SandboxName.sandbox.my.salesforce.com \\\n      --set-default --browser chrome --client-id 04580y4051234051\n\nFLAG DESCRIPTIONS\n  -b, --browser=chrome|edge|firefox  Browser in which to open the org.\n\n    If you don’t specify --browser, the command uses your default browser. The\n    exact names of the browser applications differ depending on the operating\n    system you're on; check your documentation for details.\n\n  -r, --instance-url=<value>  URL of the instance that the org lives on.\n\n    If you specify an --instance-url value, this value overrides the\n    sfdcLoginUrl value in your sfdx-project.json file.\n\n    To specify a My Domain URL, use the format\n    https://yourcompanyname.my.salesforce.com.\n\n    To specify a sandbox, set --instance-url to\n    https://MyDomainName--SandboxName.sandbox.my.salesforce.com\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_95.txt"}}],["1aa39d93-d437-4b75-bb8d-7e8dbd025290",{"pageContent":"\n\nGenerate a new custom metadata type in the current project.\n\nUSAGE\n  $ sfdx force cmdt create -n <value> [--json] [-l <value>] [-p <value>] [-v\n    PackageProtected|Protected|Public] [-d <value>]\n\nFLAGS\n  -d, --output-directory=<value>  Directory to store the newly-created custom\n                                  metadata type files\n  -l, --label=<value>             Label for the custom metadata type.\n  -n, --type-name=<value>         (required) Unique object name for the custom\n                                  metadata type.\n  -p, --plural-label=<value>      Plural version of the label value; if blank,\n                                  uses label.\n  -v, --visibility=<option>       [default: Public] Who can see the custom\n                                  metadata type.\n                                  <options: PackageProtected|Protected|Public>\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a new custom metadata type in the current project.\n\n  This command creates a metadata file that describes the new custom metadata\n  type. By default, the file is created in the MyCustomType__mdt directory in\n  the current directory, where MyCustomType is the value of the required\n  --type-name flag. Use the --output-directory to generate the file in a package\n  directory with other custom metadata types, such as\n  \"force-app/main/default/objects\".\n\nALIASES\n  $ sfdx force cmdt create\n  $ sfdx cmdt create\n\nEXAMPLES\n  Generate a custom metadata type with developer name 'MyCustomType'; this\n  name is also used as the label:\n\n    $ sfdx force cmdt create --type-name MyCustomType\n\n  Generate a protected custom metadata type with a specific label:\n\n    $ sfdx force cmdt create --type-name MyCustomType --label \"Custom Type\" \\\n      --plural-label \"Custom Types\" --visibility Protected\n\nFLAG DESCRIPTIONS\n  -d, --output-directory=<value>\n\n    Directory to store the newly-created custom metadata type files\n\n    The location can be an absolute path or relative to the current working\n    directory. The default is the current directory.\n\n  -n, --type-name=<value>  Unique object name for the custom metadata type.\n\n    The name can contain only underscores and alphanumeric characters, and must\n    be unique in your org. It must begin with a letter, not include spaces, not\n    end with an underscore, and not contain two consecutive underscores.\n\n  -v, --visibility=PackageProtected|Protected|Public\n\n    Who can see the custom metadata type.\n\n    For more information on what each option means, see this topic in Salesforce\n    Help: https://help.salesforce.com/s/articleView?id=sf.custommetadatatypes_ui\n    _create.htm&type=5\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_96.txt"}}],["497bf1db-8091-49c8-9b92-8b372fd56411",{"pageContent":"\n\nGenerate a field for a custom metadata type based on the provided field type.\n\nUSAGE\n  $ sfdx force cmdt field create -n <value> -f\n    Checkbox|Date|DateTime|Email|Number|Percent|Phone|Picklist|Text|TextArea|Lon\n    gTextArea|Url [--json] [-p <value>] [-s <value>] [-l <value>] [-d <value>]\n\nFLAGS\n  -d, --output-directory=<value>    Directory to store newly-created field\n                                    definition files.\n  -f, --type=<option>               (required) Type of the field.\n                                    <options: Checkbox|Date|DateTime|Email|Numbe\n                                    r|Percent|Phone|Picklist|Text|TextArea|LongT\n                                    extArea|Url>\n  -l, --label=<value>               Label for the field.\n  -n, --name=<value>                (required) Unique name for the field.\n  -p, --picklist-values=<value>...  Picklist values; required for picklist\n                                    fields.\n  -s, --decimal-places=<value>      Number of decimal places to use for number\n                                    or percent fields.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a field for a custom metadata type based on the provided field type.\n\n  Similar to a custom object, a custom metadata type has a list of custom fields\n  that represent aspects of the metadata.\n\n  This command creates a metadata file that describes the new custom metadata\n  type field. By default, the file is created in a \"fields\" directory in the\n  current directory. Use the --output-directory to generate the file in the\n  directory that contains the custom metadata type metdata files, such as\n  \"force-app/main/default/objects/MyCmdt__mdt\" for the custom metadata type\n  called MyCmdt.\n\nALIASES\n  $ sfdx force cmdt field create\n  $ sfdx cmdt field create\n\nEXAMPLES\n  Generate a metadata file for a custom checkbox field and add the file to the\n  MyCmdt__mdt/fields directory:\n\n    $ sfdx force cmdt field create --name MyCheckboxField --type Checkbox \\\n      --output-directory force-app/main/default/objects/MyCmdt__mdt\n\n  Generate a metadata file for a custom picklist field and add a few values:\n\n    $ sfdx force cmdt field create --name MyPicklistField --type Picklist \\\n      --picklist-values A --picklist-values B --picklist-values C \\\n      --output-directory force-app/main/default/objects/MyCmdt__mdt\n\n  Generate a metadata file for a custom number field and specify 2 decimal\n  places:\n\n    $ sfdx force cmdt field create --name MyNumberField --type Number \\\n      --decimal-places 2 --output-directory \\\n      force-app/main/default/objects/MyCmdt__mdt\n\nFLAG DESCRIPTIONS\n  -d, --output-directory=<value>\n\n    Directory to store newly-created field definition files.\n\n    New files are automatically created in the \"fields\" directory. The location\n    can be an absolute path or relative to the current working directory. The\n    default is the current directory.\n\n  -f, --type=Checkbox|Date|DateTime|Email|Number|Percent|Phone|Picklist|Text|TextArea|LongTextArea|Url\n\n    Type of the field.\n\n    You can't use this command to create a custom metadata type field of type\n    \"Metadata Relationship\". Use the Salesforce Setup UI instead.\n\n  -s, --decimal-places=<value>\n\n    Number of decimal places to use for number or percent fields.\n\n    The value must be greater than or equal to zero. Default value is 0\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_97.txt"}}],["cff197a1-1daf-479d-ab66-db33f348fe86",{"pageContent":"\n\nGenerate a custom metadata type and all its records from a Salesforce object.\n\nUSAGE\n  $ sfdx cmdt generate fromorg -o <value> -n <value> -s <value> [--json]\n    [--api-version <value>] [-l <value>] [-p <value>] [-v\n    PackageProtected|Protected|Public] [-i] [-d <value>] [-r <value>]\n\nFLAGS\n  -d, --type-output-directory=<value>  [default: force-app/main/default/objects]\n                                       Directory to store newly-created custom\n                                       metadata type files.\n  -i, --ignore-unsupported             Ignore unsupported field types.\n  -l, --label=<value>                  Label for the custom metadata type.\n  -n, --dev-name=<value>               (required) Name of the custom metadata\n                                       type.\n  -o, --target-org=<value>             (required) Username or alias of the\n                                       target org.\n  -p, --plural-label=<value>           Plural version of the label value; if\n                                       blank, uses label.\n  -r, --records-output-dir=<value>     [default:\n                                       force-app/main/default/customMetadata]\n                                       Directory to store newly-created custom\n                                       metadata record files.\n  -s, --sobject=<value>                (required) API name of the source\n                                       Salesforce object used to generate the\n                                       custom metadata type.\n  -v, --visibility=<option>            [default: Public] Who can see the custom\n                                       metadata type.\n                                       <options:\n                                       PackageProtected|Protected|Public>\n  --api-version=<value>                Override the api version used for api\n                                       requests made by this command\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a custom metadata type and all its records from a Salesforce object.\n\n  Use this command to migrate existing custom objects or custom settings in an\n  org to custom metadata types. If a field of the Salesforce object is of an\n  unsupported type, the field type is automatically converted to text. Run \"sfdx\n  cmdt generate field --help\" to see the list of supported cmdt field types,\n  listed in the --type flag summary. Use the --ignore-unsupported to ignore\n  these fields.\n\n  This command creates the metadata files that describe the new custom metadata\n  type and its fields in the \"force-app/main/default/objects/TypeName__mdt\"\n  directory by default, where \"TypeName\" is the value of the required --dev-name\n  flag. Use --type-output-directory to create them in a different directory.\n\nALIASES\n  $ sfdx force cmdt generate\n\nEXAMPLES\n  Generate a custom metadata type from a custom object called\n  MySourceObject__c in your default org:\n\n    $ sfdx cmdt generate fromorg --dev-name MyCMDT --sobject \\\n      MySourceObject__c\n\n  Generate a custom metadata type from a custom object in an org with alias\n  my-scratch-org; ignore unsupported field types instead of converting them to\n  text:\n\n    $ sfdx cmdt generate fromorg --dev-name MyCMDT --sobject \\\n      MySourceObject__c --ignore-unsupported --target-org my-scratch-org\n\n  Generate a protected custom metadata type from a custom object:\n\n    $ sfdx cmdt generate fromorg --dev-name MyCMDT --sobject \\\n      MySourceObject__c --visibility Protected\n\n  Generate a protected custom metadata type from a custom setting with a\n  specific singular and plural label:\n\n    $ sfdx cmdt generate fromorg --dev-name MyCMDT --label \"My CMDT\" \\\n      --plural-label \"My CMDTs\" --sobject MySourceSetting__c --visibility \\\n      Protected\n\n  Generate a custom metadata type and put the resulting metadata files in the\n  specified directory:\n\n    $ sfdx cmdt generate fromorg --dev-name MyCMDT --sobject \\\n      MySourceObject__c --type-output-directory path/to/my/cmdt/directory\n\n  Generate a custom metadata type and put the resulting record metadata\n  file(s) in the specified directory:\n\n    $ sfdx cmdt generate fromorg --dev-name MyCMDT --sobject \\\n      MySourceObject__c --records-output-dir path/to/my/cmdt/record/directory\n\nFLAG DESCRIPTIONS\n  -i, --ignore-unsupported  Ignore unsupported field types.\n\n    In this context, \"ignore\" means that the fields aren't created. The default\n    behavior is to create fields of type text and convert the field values to\n    text.\n\n  -v, --visibility=PackageProtected|Protected|Public\n\n    Who can see the custom metadata type.\n\n    For more information on what each option means, see this topic in Salesforce\n    Help: https://help.salesforce.com/s/articleView?id=sf.custommetadatatypes_ui\n    _create.htm&type=5\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_98.txt"}}],["ca3d0d03-88fe-43b9-a1c3-929e2ebabfe4",{"pageContent":"\n\nGenerate a new record for a given custom metadata type in the current project.\n\nUSAGE\n  $ sfdx force cmdt record create -t <value> -n <value> [--json] [-l <value>] [-p\n    true|false] [-i <value>] [-d <value>]\n\nFLAGS\n  -d, --output-directory=<value>  [default:\n                                  force-app/main/default/customMetadata]\n                                  Directory to store newly-created custom\n                                  metadata record files.\n  -i, --input-directory=<value>   [default: force-app/main/default/objects]\n                                  Directory from which to get the custom\n                                  metadata type definition from.\n  -l, --label=<value>             Label for the new record.\n  -n, --record-name=<value>       (required) Name of the new record.\n  -p, --protected=<option>        [default: false] Protect the record when it's\n                                  in a managed package.\n                                  <options: true|false>\n  -t, --type-name=<value>         (required) API name of the custom metadata\n                                  type to create a record for; must end in\n                                  \"__mdt\".\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Generate a new record for a given custom metadata type in the current project.\n\n  The custom metadata type must already exist in your project. You must specify\n  a name for the new record. Use name=value pairs to specify the values for the\n  fields, such as MyTextField=\"some text here\" or MyNumberField=32.\n\nALIASES\n  $ sfdx force cmdt record create\n  $ sfdx cmdt record create\n\nEXAMPLES\n  Create a record metadata file for custom metadata type 'MyCMT' with\n  specified values for two custom fields:\n\n    $ sfdx force cmdt record create --type-name MyCMT__mdt --record-name \\\n      MyRecord My_Custom_Field_1=Foo My_Custom_Field_2=Bar\n\n  Create a protected record metadata file for custom metadata type 'MyCMT'\n  with a specific label and values specified for two custom fields:\n\n    $ sfdx force cmdt record create --type-name MyCMT__mdt --record-name \\\n      MyRecord --label \"My Record\" --protected true My_Custom_Field_1=Foo \\\n      My_Custom_Field_2=Bar\n\nFLAG DESCRIPTIONS\n  -p, --protected=true|false  Protect the record when it's in a managed package.\n\n    Protected records can only be accessed by code in the same managed package\n    namespace\n\n","metadata":{"source":"/home/shreyas/Projects/lang-chain-dx-knowledgebase/output/output_99.txt"}}]],{"0":"f7ac0378-31fd-4925-aef3-1982aecfc8b1","1":"d10af63f-31f8-4a45-9a1e-2145bf2d42dd","2":"66fb2617-0a01-4eaf-93f2-7be7dd085533","3":"fa44e9be-5413-452d-9962-bd2a29a170f1","4":"c15b2e6c-96ad-4050-b9a4-f7e246f9310c","5":"01917ce5-5faf-4dfd-afcc-7a7cd7087023","6":"9f35f2b3-7f06-46b8-9891-fcc34ac98e22","7":"6e1f2c25-150f-4809-adc2-3eadc416f5dd","8":"f1874c4a-09e4-4830-8fa5-06eab2432342","9":"f9495cc2-d232-464a-bc81-00ecdcde164f","10":"11c44e91-7995-4462-8597-200ae8437172","11":"26acd95e-9855-43c7-9350-beaade87b711","12":"39e02d3d-1c18-4654-b66f-8981a77e709e","13":"5b2b243e-4570-47d8-bb67-06d2a7acb5a2","14":"85a35306-c29d-4da6-9f91-4e113892d663","15":"a4ee20e3-fc1a-4840-b5a3-1e0e6db5e634","16":"f7f0ff35-0495-415b-ac33-44eab8e70133","17":"3139aff1-322f-4ff3-add5-c727bacbc679","18":"5b404160-da50-4b1e-95c4-3686cad5dc1c","19":"6dd56e32-5cea-4392-a167-b1711369da58","20":"3b4ad1f3-dcb0-479e-a084-a97a8f49cbc5","21":"6f0b5b92-6d5d-487d-8b30-a6093065ff7b","22":"5bb603a7-8193-43b5-92ab-e7a0a60f6b29","23":"8572142c-4e6e-46bb-870c-daa2be4ab44d","24":"7ede9cf6-5826-453d-8fd5-1c2b1784f903","25":"f1de8351-8ce9-4fc9-abcc-9017a8cc8b77","26":"e1f7cb68-ba87-458b-9177-10ec0bf6b76b","27":"2d95d195-a428-4443-b463-4358101374a6","28":"6a8449c8-fc1f-4742-9f46-07c0cfae4eb1","29":"42334395-1f83-42bc-9a7f-aea2c5672acc","30":"5203c115-776a-4bdd-8455-0956ba35a0aa","31":"3984fd51-3820-4e32-b083-186beaaef5bd","32":"27f3a61d-14d5-4b09-9697-85d13274a835","33":"256e3d4f-5fdb-4814-a469-380abe0671aa","34":"bb22275d-5672-4df5-b686-6da71826d4e9","35":"e2803930-2ae0-4310-9a58-08e3f34dcad6","36":"1e03b382-c35c-497a-b804-5118c6cf21a4","37":"c342c851-9c23-4fd8-b1da-f2c5b5e281b9","38":"0868c827-672b-497e-9197-649efe324f93","39":"ddab2f69-5395-44ed-87ef-474c6a45af6a","40":"91f533e9-da3e-44ab-a490-d8b29b3867b2","41":"b6ef3d4d-3fcb-4cfa-a6de-956a7e9cba8e","42":"5084d3b6-4ce4-411a-9ebf-a6fd8313ea54","43":"3b1507f5-76f3-45ba-b2bd-92dcbe4d67b1","44":"ea1998fc-1cfc-48b3-b850-a34d771c4174","45":"42ef592b-203c-4982-ac98-f0ceb44164d3","46":"79d474ad-5850-4566-8e59-28d998011168","47":"ac894f6c-a54b-4cd1-8448-730168cac123","48":"0ce7d3a5-7d9b-47a7-8b63-bd3ff7889bc7","49":"0e5be05f-a7c0-4c92-8eed-97c28a2478dc","50":"6d61c0fe-caa1-46f7-83d6-11c541aa53bd","51":"3e5d485b-d168-4643-8be3-3abc39b84161","52":"a7c60058-ba30-4569-abb2-aa2cbe94d635","53":"a3684ea3-d4dc-4ef5-b5a4-cbf94a7248fb","54":"408415b0-57c3-42e9-9f31-d7bb7b17a467","55":"d9df2bfe-63e5-44e8-871c-20ce7c91a091","56":"5d54346b-97ce-4791-a524-17a129dbdf35","57":"ecea3db7-9ecf-46d9-b170-8965c24f8b4e","58":"d06cfc52-87b8-42d4-ba0e-069353a4f3ec","59":"0c49fdf5-1ec3-4ac9-91be-94ccc4b10f36","60":"9eafa2ec-806b-4693-8dac-df628cef0465","61":"8861df30-df2e-4b29-aa89-1c82d8a16ccd","62":"b6da1132-6b7a-47cb-9b00-5ef85e203a04","63":"d213a068-5d18-4638-b450-09b2da759f4c","64":"ac3485bc-9b65-4be7-a3b7-a4ef50f94069","65":"4d62592e-ec35-4eda-af8e-e71cf41f831a","66":"529c3b3d-8627-4dce-92d1-339f6909437c","67":"9862a4ea-e4aa-44db-87cf-58596302aa05","68":"1f231f84-e4fe-4168-a4b8-c7fa7b472955","69":"a36d19f0-c9b6-4ba3-b62c-32e28d9b639e","70":"78a10c93-9710-42a6-b0e3-9a6da89a3a9e","71":"d97ff068-0216-409b-8654-931472701c7e","72":"66859ecf-6466-419d-be40-432afb922413","73":"8a6194ce-c1c5-4f2f-8d4e-527350af62f1","74":"de501a81-4221-4802-a866-3bb67fb35b2c","75":"81800308-2f9f-406b-96e8-ce991155b0a1","76":"06d3d63e-5cc4-459c-868e-3321443dd305","77":"0a0dd91e-b939-42e8-8229-33aad87f52ef","78":"a37f8c79-49ae-486c-b955-030051ac521a","79":"befadc3f-3999-495d-a6ad-aa0b053609ce","80":"e89be0fc-ec3c-4b35-b910-bde97a537b7e","81":"604cab56-662e-4929-b73c-7b184f1ba835","82":"ea55187e-873d-4df5-890a-17117f4d93e7","83":"c294163a-64a4-47a9-9fed-307ab2f459a5","84":"a1a75bdc-355a-4c6b-a5f0-d2bbcbb6d041","85":"d62fafbc-16b7-4949-a2e9-f301ee707612","86":"3f506e5a-7062-4d87-b6b1-04e1578bf702","87":"4cdad702-b72f-4f5b-88d7-70b9149c8511","88":"1c36cfa0-8325-405c-b857-011c2c383f24","89":"6c09629f-79de-40f3-b8f4-632f7dbd2ea5","90":"a4d352b4-58a7-43d5-93bd-27f301e03b76","91":"281e3d1a-f165-41cf-a0d3-cb56290e3c4a","92":"fc0fcf7c-ad61-4368-8762-9c875cf1c723","93":"ede87b12-b2c9-4a34-bf47-5ce4e051c8a0","94":"18f4b438-56c3-4c1a-9dff-ecf23e94ef12","95":"2497a45b-f902-4ff6-aea1-883848807ee7","96":"0e7f2294-49d7-4ab8-ad20-b5e797806fcf","97":"266766ae-26b9-4ac4-a583-9acad3bc1378","98":"9dfe28ea-e37c-4570-b563-9b4f74ac15bc","99":"6bed6de2-1266-4a76-bc15-0c5f7638a2c9","100":"2280da0f-382d-4cda-8712-c2c1b3e0c5d7","101":"d81ae91f-d159-4b9e-884f-0122d97afe7e","102":"fceeaea1-2cd0-4f11-9505-1c2a1cb0ff12","103":"5cc38b76-4306-44d3-b653-fc761544ba6c","104":"1fd189eb-7b69-416c-b868-797d955a9a90","105":"efe4b168-5af3-4082-bd99-a1e7f92900e1","106":"3dc21235-f22f-4907-b171-0ecbb009de03","107":"763e326a-6815-4dfa-865c-3061ecdac4be","108":"8e963695-ff92-449d-9e4a-7d957e821310","109":"d525147c-47cc-4983-9649-d229cbb6a671","110":"56fc280a-89bc-4dbe-ab04-61f9427bd811","111":"e023c295-ed17-4b48-b65d-741ee1f1cc15","112":"f4c6047a-b7dd-4c93-ba71-0640ce4633bc","113":"86fdd69a-4143-465f-be26-218572a21b6e","114":"71bcad79-4ab1-4976-9967-a61bb11e4f40","115":"996e3df4-8ed4-4c6e-9707-620b53c2fdc0","116":"94543998-327f-4251-9068-b26b352367d0","117":"6ac9723b-6d30-498c-8047-7cc65ab5d319","118":"c3a605a9-5491-4d9a-b497-7c71f03a71d4","119":"7cc8c0e7-4d8f-479d-acce-9fbe535ce0d8","120":"52329b04-8c33-4ef3-b5d7-f061e6446016","121":"2a6b78ee-a90b-4e2b-8031-08395bdc5205","122":"bda1d425-57e7-4f46-a62d-9c20e7f8bf16","123":"e136e9b2-d74e-46cb-bac9-712c575f3352","124":"545bc484-e4de-4a13-a550-92d9585eb8cb","125":"a8112f8d-8db8-4617-9717-63c119826bbf","126":"778f0739-a54c-48da-a0c1-b70d1dd417f3","127":"014f0aaa-384a-4d2b-83c6-b1170652dfd0","128":"c6107ebc-fd81-4a80-9f60-e1c5fbb4f3be","129":"0ee5815c-e8ad-43f3-a357-409baf8ac636","130":"9dcb6279-4510-4ced-9ac6-f45449806e03","131":"0f83302c-ab70-4a2e-b61a-fa9de9b8b4aa","132":"97b7cb22-c660-41bf-a25b-cc5043006b6a","133":"3b9d5c11-f81f-42a2-be88-1c8aed9162c4","134":"2d99009b-7497-4e9f-a1f5-03e903e91594","135":"9f49e713-1803-4f1a-88ad-2e0b70f7b24e","136":"03d97eda-7244-4e59-98d4-a8800afba03b","137":"09f002f6-b87d-4cfa-90c5-ec447f755d0f","138":"43bae684-3e0a-43f9-bc84-1ae814443f65","139":"45b55603-0dc2-4038-a758-aa7508dec572","140":"f6e52e79-50a9-4fa9-b537-4b2409485576","141":"505fd76a-8606-4436-abd6-8fe661de9f09","142":"10f815ee-5a7f-4e29-b0be-86f7ad991ce3","143":"ba48c04a-7892-4b89-9b56-f38f1ed08901","144":"bed19603-da96-4baf-9c35-a349748947f0","145":"88de2e45-bf3c-4091-abf2-538402e1f9aa","146":"e42c89b6-4f3d-499f-8ee3-919617e9450f","147":"e2a442d1-9f3c-4143-9519-010872f1e4fa","148":"c93edf35-4370-48f4-a81e-087125aec442","149":"9565df8b-fcb3-4226-8061-596f896e9cb1","150":"a04535fe-1a85-43e7-b37c-78621acae394","151":"6fd6c103-bd94-4faf-b9d6-10ba006b8094","152":"d4b5967f-df11-4815-8bd8-f89a0b0a2cf5","153":"04af53cf-5bf1-46be-a778-6ec0ec698cce","154":"f04b8fc2-5d7d-4029-b48c-63e1be8c2d95","155":"9f8f6789-754f-4d25-8648-286398c43b2f","156":"4b3bd856-b9c4-4e78-8d90-2c867e633e27","157":"3f283ff4-941c-407b-b0b9-90d7389b57a2","158":"ca5b0287-cf5b-4b7a-b419-7c0981bd3859","159":"335f0a4d-9fc0-43dc-a3d2-a3f4ae6b78ea","160":"249edb0b-3d19-4f5a-972d-b269c20421f4","161":"c522b28d-e7f8-439a-aaa3-abc8f4bcdb26","162":"6034ab69-d6e9-48a1-b546-f43846139a9d","163":"5df9ee4e-4bbf-4337-8458-94c1a3c3ec09","164":"05c29b1b-3819-46f6-bd78-313f26651d26","165":"6bbe7f2d-06e8-4ebe-baee-8c2499741189","166":"45fd0c27-900d-4a2d-bbbf-50ad1fa1393d","167":"53a4d2b1-5bb4-4ac6-8217-6e7d49535932","168":"fa006cb2-64a8-45ec-b114-91df1b6a6083","169":"a179e4b3-9a43-4faa-8a10-b314a98a1f89","170":"6a7c78bd-75bb-4142-9dac-3ec44efcbd51","171":"89af5eff-a6ae-4eb2-a40c-b8d4ec4e545a","172":"75cfe794-aed1-48d5-98fd-c51414936313","173":"61bd4d3b-2fb4-4132-b983-a06b676381f2","174":"3fda9d6a-4299-43b7-af6b-f720b2145e28","175":"c24a3092-3a37-47b9-bb76-52beaa424e8b","176":"e52da2b4-da03-4bbc-8a4d-09617b907767","177":"2910c686-4e42-4f5f-8091-37ac164a3024","178":"275c88a4-da21-4b2f-adb0-816bdbdab3ed","179":"4b505b11-e602-4811-8897-5d4e3ca4b278","180":"348f4dcf-8999-496e-9064-2f76f55d472f","181":"7adb9014-f032-4b54-a65d-bc7ac63388c0","182":"d2753d4e-73b4-4fdc-b9f1-89c3fc7f215d","183":"3d62b4a3-11fe-4a8f-8344-2737bce668b2","184":"73386acb-228f-48c9-a2f9-bb14d4321aa9","185":"9c2ee7bb-7cc9-48f1-81a8-5c497b3bc74f","186":"eac3e96f-1d6e-4502-891f-dc59a9fd2a9f","187":"ab54bb07-cdf7-4957-8665-5636a9c13682","188":"66b38368-4c96-47b0-a5e8-83643542de8a","189":"a428cfdf-9ae0-44ca-a199-8c824b54a3c7","190":"6de9af10-142a-42de-8000-c8c7fe29575e","191":"5c5f9558-12d6-4b38-87cf-319f2eb5cf90","192":"7b801f74-b459-4528-9c36-67bff5b5c874","193":"7900c565-3443-4650-aa13-c5f226da7dde","194":"7106d7b5-0ab4-49b7-b079-89f0424f2c71","195":"94e692c7-ac4f-4da7-96b3-711f26d87f0a","196":"4850b085-35c4-4780-a1c0-9d587ba1f1d4","197":"0fdf3679-130b-406a-a33d-e2514d4431a5","198":"c927766e-7f5e-48e4-b9b6-d1ca2144db5f","199":"446f74e3-703b-4d3a-b9d3-4981c00dadc2","200":"064efbc3-f26b-49b5-9863-8b501e62989f","201":"531b3f56-7eac-4d60-a5a7-9199fd03d00b","202":"44385e6b-139b-471a-b178-9d2901c95dff","203":"82c82dee-35a4-42d1-a672-dc2b24757352","204":"510c602a-e435-4bd7-8827-3362b5a3fef3","205":"ba0b2f81-54d8-4b56-90be-ba526e4cfd77","206":"8679a084-edff-44e5-b5a1-012dcc636751","207":"5fb0a615-4fe8-4c54-a047-09ebf088a58f","208":"866f59bb-2674-44bd-b500-76dd233ef509","209":"57b617f5-142a-41d9-9c19-6a4aa5c30fa0","210":"fb2002f5-3c9e-4bd2-9af9-5577ef4f512d","211":"b5f5fc02-d181-4986-856a-7c6b40ee7ab8","212":"63e81ccd-5bdf-4bb1-b896-ff958435ff0f","213":"8b524f33-9be3-481f-a1d2-b40e14f02e9f","214":"93aceef9-16f5-41cf-94a0-efb5cae4ab26","215":"1e4546bc-ad83-41ea-b5b5-343df3c77450","216":"3326734b-412f-4643-8f66-946a75d5ede2","217":"b68cda4d-1c29-4950-9b59-e2cc6435d973","218":"f7bed00b-58ec-4d3e-a77b-fc1794277540","219":"37e6b086-dbd8-4d1a-bb31-aa9580dc52f1","220":"bf29832b-086a-4116-a43f-1c346a755b18","221":"5045a0b8-c29b-4f00-b09d-b80f61d9ebe6","222":"72b4eb7d-1470-4701-8c64-c4d1f3e85451","223":"c9195d8f-2624-42a4-be18-4e759c81e62c","224":"3791a28f-22a9-4802-8531-af66704b1b07","225":"38d6cbaa-8146-482e-9b20-dbe081eff790","226":"543e931d-5dee-40a1-be74-96349f6270c8","227":"cb0c7918-8e35-4c14-8526-e8914e03dccc","228":"342722c5-ebc6-41b0-acfa-33477e330397","229":"60f12f11-5bf5-49ef-a8c5-0d37293e7684","230":"f9abddad-fc91-4c3a-b4df-82906e5cb6ea","231":"371724b2-01e2-47d3-9816-5b9c56d623df","232":"d72a0669-f2ff-4cff-b911-23014dfb9dc6","233":"a6d2b86d-9abe-4826-b851-a8111bf9bd5a","234":"d2250589-c31e-4c3d-85a0-dc0dcfacb63a","235":"a9e2a3cb-22e4-4775-a2f4-253ef48ed5cf","236":"8510200d-252a-4552-96c8-f8af368d04d4","237":"7821d0ae-5c85-41e4-903b-dcca005a7fee","238":"816bddec-dfa1-4324-b771-b1feb8abed06","239":"864aac11-762a-40e5-a927-48474ec65f88","240":"fc13a7d9-c9b7-4798-8374-2656695b5910","241":"7cca69d5-c2d8-4804-943c-eb2f1d0a9ee5","242":"6546dcdc-ebc0-4506-b42c-472611c1d43f","243":"3f3ca0aa-8a71-4369-91ab-3deca9edd9de","244":"dc3c65fa-bd49-46fd-9f17-0cd3429bb788","245":"12c94439-4a63-4bb5-8106-536c6618c707","246":"684c085d-52df-424e-a04f-2bd1a7b7599b","247":"d1714269-db2b-474f-a042-4e5f5a6af55f","248":"a18a8f20-050e-46e5-93f0-ac2ebb8055d9","249":"f5722832-60d9-4908-bca4-81a62b62c2c1","250":"95a7f9d8-2805-4bc1-8785-793a61f854ab","251":"8b6a6331-61f6-4cdc-93a7-ffa26d1f0416","252":"259aaa5f-33ff-4b20-a600-f9300cd53e24","253":"ff049b87-6d50-4a8d-a16e-070ba4f00630","254":"958adb34-bf90-4f0c-9a2d-2cb3aaf5d17c","255":"375c693b-bfe5-4597-8de9-6fedbf30647c","256":"fcb9b93a-8bf3-49cc-a1aa-a05c4c532cb9","257":"9543f72d-5f21-4ad8-b6e0-bad0e72671f6","258":"8db8b0e0-a3ea-4fe8-88bf-3c91004b0f55","259":"31d4538a-8dc1-4280-ad04-97193905f78c","260":"ea651187-ee04-4728-9112-6e6c76b45782","261":"bd8d315c-78e4-41ba-ae3e-26173d3cb9be","262":"8b615b58-6e9f-4f69-954c-a4e63bb473f6","263":"8cd79edf-edbe-4736-be75-cf25713ec9a4","264":"739d450d-17f4-44a7-8f88-5617247f0cea","265":"5c7a191f-be8a-4d6b-9fba-dc05cb68f6c5","266":"c61cb16b-31ab-4c05-9ba1-cdefe28623d5","267":"0dd70ca8-26fd-47b3-96f8-e918facd3f2c","268":"540efbe3-52e4-4a49-863d-0d1883ef7f32","269":"dc1c8403-ad50-40a1-8e74-6655583bb463","270":"6eca7d34-7362-47ee-ba12-51f391bafe73","271":"37dafa4d-112b-4ee6-98fb-957f17b3a7e8","272":"65cc9c7e-60d8-4dd4-8177-6ad9e1ad79e1","273":"1adffe33-71e5-4d87-91ac-658ccb20da62","274":"4e8e0589-d8aa-47a4-b530-7dd8696fe719","275":"413b1b10-b1d0-44fa-b88f-ea428bcfdf5a","276":"ea9b6798-88d4-491e-aae0-1c18fb39f1e9","277":"ade2dd54-85aa-462e-a910-cd026a85a848","278":"30b41604-b82c-429a-80a9-5d9c35851e36","279":"9e732791-b8e1-4e29-8cff-4b7631a3bfe7","280":"ab43e5f4-0938-44db-a541-6c4d743eae63","281":"af0d700a-1121-49b2-a18d-a08758186469","282":"ffdb3b75-35f8-4330-87e7-19e5d2895f2a","283":"2fba8b6c-63f3-4ccd-99fa-8f1b6a8d76d0","284":"580f30d6-7a20-41c8-b6e7-4fe207df937c","285":"dfd9aa64-fca3-44c2-8ffa-3026872f672e","286":"0a6c8e47-4f60-4feb-ac6d-0fef685346b0","287":"958af838-34c0-45e2-948c-75e5b9f4f549","288":"b07096f9-49c5-47d0-bbbe-4b5ccf129d59","289":"43697ba8-921d-4707-8d95-131af7139eee","290":"5e0e9b66-c885-415f-82fd-35ca6a155191","291":"dfbea98f-e279-4344-8eb4-70863f091166","292":"30cb3762-2ab6-4569-92b4-d024d7456e43","293":"e5be0d12-58ff-4b67-a609-acd4eeb509dd","294":"be73000d-07dd-4313-a7c4-22103ac5dd68","295":"498049dc-a21a-4487-9aff-c87dff2b1b9f","296":"506f4b45-bc3a-4b5b-a074-e49b60866bf5","297":"aa0f692f-4f4c-4e50-84e9-36a7763ada2d","298":"06c975e7-8534-4a6b-9177-57d13f92e46f","299":"7f7b75e7-3c23-4690-bb3b-a9fe9d4eb39e","300":"ce97a504-91e6-419d-94cb-421876bf1cf7","301":"51d71230-f670-4432-948e-59bb63a307ae","302":"d02cb16c-9aa6-43f7-ac4b-879e0a5dbb9f","303":"0011649c-2167-41ea-a2d6-c88d55e692a5","304":"44027ae7-ed7c-4d48-88bd-3a47d5dec2b1","305":"05056626-a379-4af9-ad8c-484dd304ae9c","306":"2bf835b5-a7a3-4251-ba1d-d3dc7ac6e0ec","307":"4ff9f1bf-f118-43b7-afcb-99b0f1ae1bc2","308":"2fba4038-5fa4-402d-befd-fe333971de2a","309":"0543266e-247d-4411-a056-9af9ab76f520","310":"d7f7e63d-c957-40c3-b224-3285aade1edd","311":"bac7cdef-0d39-42d8-83b9-0c5db2d257d7","312":"479fc08d-d388-492a-94a0-283025f7d1c8","313":"9b6644f4-fefc-4200-8589-14e9b4cfaeb5","314":"ee52867c-7f1f-492a-b943-cbe8e061294d","315":"072d4d21-2a82-4ce6-b000-8d2c48db9243","316":"e1815686-1eb2-4475-aed3-417729930c59","317":"a18905cb-2697-4fbb-a814-05eb48570b3a","318":"8146aec3-7c35-41b1-9d44-6a6c722d2198","319":"35b1ebcc-43d2-47bb-87ed-844a68e74248","320":"906dbd23-a806-4270-a0b5-ef1715d03b1a","321":"e002700e-d949-48bd-96b5-f7deb9ccb020","322":"05e71b5a-ae11-48ac-b4c8-dc3b2e58401b","323":"5938bf21-a25c-48d6-bd94-3704cfff6508","324":"d692b96d-b623-4927-86ee-85c32cc42aaa","325":"d9b8adaa-dae3-41dd-a4dd-98da92edbbf3","326":"56c5cde1-1f5c-41f9-b1f0-20f288c03a95","327":"4bafc925-920d-4926-9a4f-6e7bec2ebced","328":"01788a08-02f1-4720-905f-82fa60ee71c1","329":"e28d7154-40ca-4d22-9f44-d2617a73fddc","330":"a71e7267-3e21-4deb-b341-dfd576a7a7e6","331":"e75a7971-b80d-4c50-8202-26b7b03b7126","332":"3db05a95-cdcf-4a19-a56f-ddf34c6bd432","333":"17d502c9-20f6-41d6-bb71-7b93576ec874","334":"1aa39d93-d437-4b75-bb8d-7e8dbd025290","335":"497bf1db-8091-49c8-9b92-8b372fd56411","336":"cff197a1-1daf-479d-ab66-db33f348fe86","337":"ca3d0d03-88fe-43b9-a1c3-929e2ebabfe4"}]